<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell入门到实战</title>
      <link href="/posts/1004.html"/>
      <url>/posts/1004.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="1-Shell概述"><a href="#1-Shell概述" class="headerlink" title="1. Shell概述"></a>1. Shell概述</h2><p>大数据工程师为什么要学习shell</p><p>（1）能够编写简单的shell脚本用于大数据集群的管理（启动、停止等）</p><p>（2）能够大概看懂运维编写的脚本</p><img src="../img/shell/image-20210102100342576.png"/>Linux系统的核心是内核。内核控制着计算机系统上的所有硬件和软件，在必要时为应用程序分配硬件， 并根据需要执行程序中的代码。 <p>内核主要负责以下四种功能：</p><ul><li><p>系统内存管理</p></li><li><p>软件程序管理</p></li><li><p>硬件设备管理</p></li><li><p>文件系统管理</p></li></ul><p>简单来说Shell是一种特殊的交互式工具，核心是命令提示符，允许输入文本命令，解释命令，并在内核中执行命令。</p><p>Liunx操作系统的核心是Kernal（内核）</p><p>当应用程序在执行时，需要调用计算机 硬件CPU、内存等资源。</p><p>程序将指令发送给内核执行</p><p>为了防止程序发送一些恶意指令导致损坏内核，在内核和应用程序接口之间设置了一个中间层，称为shell</p><p>本质上来说：</p><p>​        shelll：是一个可以解释shell规定的语法命令的解释器，解释器负责将应用程序的指令进行检查、合法后交给内核执行，返回结果</p><p>​        shell语言：shell解释器要求的指定语法编写的命令</p><p>​        shell脚本：多条shell命令，可以编写在一个文件中，文件中的指令可以按照顺序执行，将这个文件称为shell脚本。</p><h2 id="2-Shell解析器"><a href="#2-Shell解析器" class="headerlink" title="2.Shell解析器"></a>2.Shell解析器</h2><p>Linux提供的Shell解析器有：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 ~]$ cat &#x2F;etc&#x2F;shells &#x2F;bin&#x2F;sh&#x2F;bin&#x2F;bash&#x2F;sbin&#x2F;nologin&#x2F;bin&#x2F;dash&#x2F;bin&#x2F;tcsh&#x2F;bin&#x2F;csh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）bash和sh的关系</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 bin]$ ll | grep bash-rwxr-xr-x. 1 root root 941880 5月  11 2016 bashlrwxrwxrwx. 1 root root    4 5月  27 2017 sh -&gt; bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）Centos默认的解析器是bash</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 bin]$ echo $SHELL&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-Shell脚本入门"><a href="#3-Shell脚本入门" class="headerlink" title="3.Shell脚本入门"></a>3.Shell脚本入门</h2><p>1．脚本格式</p><p>脚本以#!/bin/bash开头（指定解析器）</p><p>2．第一个Shell脚本：helloworld</p><p>（1）需求：创建一个Shell脚本，输出helloworld</p><p>（2）案例实操：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch helloworld.sh[atguigu@hadoop101 datas]$ vim helloworld.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在helloworld.sh中输入如下内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashecho &quot;helloworld&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）脚本的常用执行方式</p><p>第一种：采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限）</p><p>​    sh+脚本的相对路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ sh helloworld.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Helloworld</p><p>​    sh+脚本的绝对路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ sh &#x2F;home&#x2F;atguigu&#x2F;datas&#x2F;helloworld.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>helloworld</p><p>​    bash+脚本的相对路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ bash helloworld.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Helloworld</p><p>​    bash+脚本的绝对路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ bash &#x2F;home&#x2F;atguigu&#x2F;datas&#x2F;helloworld.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Helloworld</p><p>第二种：采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p><p>（a）首先要赋予helloworld.sh 脚本的+x权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ chmod +x helloworld.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（b）执行脚本</p><p>相对路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ .&#x2F;helloworld.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Helloworld</p><p>绝对路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ &#x2F;home&#x2F;atguigu&#x2F;datas&#x2F;helloworld.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Helloworld</p><p>注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p><p>3．第二个Shell脚本：多命令处理</p><p>（1）需求： </p><p>在/home/atguigu/目录下创建一个banzhang.txt,在banzhang.txt文件中增加“I love cls”。</p><p>（2）案例实操：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch batch.sh[atguigu@hadoop101 datas]$ vim batch.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在batch.sh中输入如下内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashcd &#x2F;home&#x2F;atguigutouch cls.txtecho &quot;I love cls&quot; &gt;&gt;cls.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Shell中的变量"><a href="#4-Shell中的变量" class="headerlink" title="4.Shell中的变量"></a>4.Shell中的变量</h2><h3 id="4-1系统变量"><a href="#4-1系统变量" class="headerlink" title="4.1系统变量"></a>4.1系统变量</h3><ol><li>常用系统变量</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$HOME、$PWD、$SHELL、$USER等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>案例实操</li></ol><p>（1）查看系统变量的值</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ echo $HOME&#x2F;home&#x2F;atguigu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）显示当前Shell中所有变量：set</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ setBASH&#x3D;&#x2F;bin&#x2F;bashBASH_ALIASES&#x3D;()BASH_ARGC&#x3D;()BASH_ARGV&#x3D;()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2自定义变量"><a href="#4-2自定义变量" class="headerlink" title="4.2自定义变量"></a>4.2自定义变量</h3><p>1．基本语法</p><p>（1）定义变量：变量=值 </p><p>（2）撤销变量：unset 变量</p><p>（3）声明静态变量：readonly变量，注意：不能unset</p><p>2．变量定义规则</p><p>​    （1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，==环境变量名建议大写==。</p><p>​    （2）==等号两侧不能有空格==</p><p>​    （3）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。</p><p>​    （4）变量的值如果有空格，需要使用双引号或单引号括起来。</p><p>3．案例实操</p><p>​    （1）定义变量A</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ A&#x3D;5[atguigu@hadoop101 datas]$ echo $A5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （2）给变量A重新赋值</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ A&#x3D;8[atguigu@hadoop101 datas]$ echo $A8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （3）撤销变量A</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ unset A[atguigu@hadoop101 datas]$ echo $A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （4）声明静态(只读)的变量B=2，不能unset</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ readonly B&#x3D;2[atguigu@hadoop101 datas]$ echo $B2[atguigu@hadoop101 datas]$ B&#x3D;9-bash: B: readonly variable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （5）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 ~]$ C&#x3D;1+2[atguigu@hadoop102 ~]$ echo $C1+2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（6）变量的值如果有空格，需要使用双引号或单引号括起来,无需注意数据的类型</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 ~]$ D&#x3D;I love banzhang-bash: world: command not found[atguigu@hadoop102 ~]$ D&#x3D;&quot;I love banzhang&quot;[atguigu@hadoop102 ~]$ echo $AI love banzhang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （7）可把变量提升为全局环境变量，可供其他Shell程序使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ vim helloworld.sh 在helloworld.sh文件中增加echo $B#!&#x2F;bin&#x2F;bashecho &quot;helloworld&quot;echo $B[atguigu@hadoop101 datas]$ .&#x2F;helloworld.sh Helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现并没有打印输出变量B的值。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ export B[atguigu@hadoop101 datas]$ .&#x2F;helloworld.sh helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     （8）使用双引号可以识别变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc shells]# echo $Ahello[root@0725pc shells]# B&#x3D;&quot;hello $A&quot;[root@0725pc shells]# echo $Bhello hello[root@0725pc shells]# C&#x3D;&#39;hello $A&#39;[root@0725pc shells]# echo $Chello $A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（9）使用反引号，将命令运行的结果赋值给参数，即A=<code>ll</code> 等同于 A=$(ll)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc shells]# D&#x3D;&#96;ll&#96;[root@0725pc shells]# echo $D总用量 4 -rwxr--r--. 1 root root 23 10月 8 21:36 test1.sh[root@0725pc shells]# E&#x3D;$(ll)[root@0725pc shells]# echo $E总用量 4 -rwxr--r--. 1 root root 23 10月 8 21:36 test1.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3特殊变量：-n"><a href="#4-3特殊变量：-n" class="headerlink" title="4.3特殊变量：$n"></a>4.3特殊变量：$n</h3><p>1．基本语法</p><p>​    $n    （功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p><p>2．案例实操</p><p>（1）输出该脚本文件名称、输入参数1和输入参数2 的值</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch parameter.sh [atguigu@hadoop101 datas]$ vim parameter.sh#!&#x2F;bin&#x2F;bashecho &quot;$0  $1   $2&quot;[atguigu@hadoop101 datas]$ chmod 777 parameter.sh[atguigu@hadoop101 datas]$ .&#x2F;parameter.sh cls  xz.&#x2F;parameter.sh  cls   xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-4特殊变量："><a href="#4-4特殊变量：" class="headerlink" title="4.4特殊变量：$#"></a>4.4特殊变量：$#</h3><p>1．基本语法</p><p>​    $#    （功能描述：获取所有输入参数个数，常用于循环）。</p><p>2．案例实操</p><p>（1）获取输入参数的个数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ vim parameter.sh#!&#x2F;bin&#x2F;bashecho &quot;$0  $1   $2&quot;echo $#[atguigu@hadoop101 datas]$ chmod 777 parameter.sh[atguigu@hadoop101 datas]$ .&#x2F;parameter.sh cls  xzparameter.sh cls xz 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5特殊变量：-、"><a href="#4-5特殊变量：-、" class="headerlink" title="4.5特殊变量：$*、$@"></a>4.5特殊变量：$*、$@</h3><p>1．基本语法</p><p>​    $*    （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p><p>​    $@    （功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</p><p>2．案例实操</p><p>（1）打印输入的所有参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ vim parameter.sh#!&#x2F;bin&#x2F;bashecho &quot;$0  $1   $2&quot;echo $#echo $*echo $@[atguigu@hadoop101 datas]$ bash parameter.sh 1 2 3parameter.sh  1   231 2 31 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-6特殊变量-？"><a href="#4-6特殊变量-？" class="headerlink" title="4.6特殊变量$？"></a>4.6特殊变量$？</h3><p>1．基本语法</p><p>$？    （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p><p>2．案例实操</p><p>​    （1）判断helloworld.sh脚本是否正确执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ .&#x2F;helloworld.sh hello world[atguigu@hadoop101 datas]$ echo $?0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><p>1．基本语法</p><p>（1）“$((运算式))”或“$[运算式]”</p><p>（2）expr  + , - , *,  /,  %   加，减，乘，除，取余</p><p>注意：expr运算符间要有空格</p><p>2．案例实操： </p><p>（1）计算3+2的值</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ expr 2 + 35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）计算3-2的值</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ expr 3 - 2 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）计算（2+3）X4的值</p><p>​    （a）expr一步完成计算</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ expr &#96;expr 2 + 3&#96; \* 420<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（b）采用$[运算式]方式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]# S&#x3D;$[(2+3)*4][atguigu@hadoop101 datas]# echo $S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-条件判断"><a href="#6-条件判断" class="headerlink" title="6.条件判断"></a>6.条件判断</h2><ol><li>基本语法</li></ol><p>[ condition ]（==注意condition前后要有空格==）</p><p>注意：条件非空即为true，[ atguigu ]返回true，[] 返回false。</p><ol start="2"><li>常用判断条件</li></ol><p>（1）两个整数之间比较</p><p>= 字符串比较</p><p>-lt 小于（less than）            -le 小于等于（less equal）</p><p>-eq 等于（equal）                -gt 大于（greater than）</p><p>-ge 大于等于（greater equal）    -ne 不等于（Not equal）</p><p>（2）按照文件权限进行判断</p><p>-r 有读的权限（read）            -w 有写的权限（write）</p><p>-x 有执行的权限（execute）</p><p>（3）按照文件类型进行判断</p><p>-f 文件存在并且是一个常规的文件（file）</p><p>-e 文件存在（existence）        -d 文件存在并是一个目录（directory）</p><ol start="3"><li>案例实操</li></ol><p>​    （1）23是否大于等于22</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ [ 23 -ge 22 ][atguigu@hadoop101 datas]$ echo $?0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （2）helloworld.sh是否具有写权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ [ -w helloworld.sh ][atguigu@hadoop101 datas]$ echo $?0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （3）/home/atguigu/cls.txt目录中的文件是否存在</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ [ -e &#x2F;home&#x2F;atguigu&#x2F;cls.txt ][atguigu@hadoop101 datas]$ echo $?1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 ~]$ [ condition ] &amp;&amp; echo OK || echo notokOK[atguigu@hadoop101 datas]$ [ condition ] &amp;&amp; [ ] || echo notoknotok<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-流程控制（重点）"><a href="#7-流程控制（重点）" class="headerlink" title="7.流程控制（重点）"></a>7.流程控制（重点）</h2><h3 id="7-1-if-判断"><a href="#7-1-if-判断" class="headerlink" title="7.1 if 判断"></a>7.1 if 判断</h3><ol><li>基本语法</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ 条件判断式 ] ; then 程序 fi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if  [ 条件判断式 ]  then  程序 fi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>多分支</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if  [ 条件判断式 ]  then  程序 elif  [ 条件判断式 ]​then​程序else​程序fi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    注意事项：</p><p>（1）[ 条件判断式 ]，中括号和条件判断式之间必须有==空格==</p><p>（2）if后要有空格</p><p>2．案例实操</p><p>（1）输入一个数字，如果是1，则输出banzhang zhen shuai，如果是2，则输出cls zhen mei，如果是其它，什么也不输出。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch if.sh[atguigu@hadoop101 datas]$ vim if.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashif [ $1 -eq &quot;1&quot; ]thenecho &quot;banzhang zhen shuai&quot;elif [ $1 -eq &quot;2&quot; ]thenecho &quot;cls zhen mei&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[atguigu@hadoop101 datas]$ chmod 777 if.sh </p><p>[atguigu@hadoop101 datas]$ ./if.sh 1</p><p>banzhang zhen shuai</p><h3 id="7-2-case-语句"><a href="#7-2-case-语句" class="headerlink" title="7.2 case 语句"></a>7.2 case 语句</h3><p>1．基本语法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">case $变量名 in   &quot;值1&quot;）     如果变量的值等于值1，则执行程序1     ;;   &quot;值2&quot;）     如果变量的值等于值2，则执行程序2     ;;   …省略其他分支…   *）     如果变量的值都不是以上的值，则执行此程序     ;; esac<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意事项：</p><ol><li><p>case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。</p></li><li><p>双分号“****;;****”表示命令序列结束，相当于java中的break。</p></li><li><p>最后的“<em>）”表示默认模式，相当于java中的default，</em>不可以加双引号。</p></li></ol><p>2．案例实操</p><p>（1）输入一个数字，如果是1，则输出banzhang，如果是2，则输出cls，如果是其它，输出renyao。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch case.sh[atguigu@hadoop101 datas]$ vim case.sh!&#x2F;bin&#x2F;bashcase $1 in&quot;1&quot;)        echo &quot;banzhang&quot;;;&quot;2&quot;)        echo &quot;cls&quot;;;*)        echo &quot;renyao&quot;;;esac[atguigu@hadoop101 datas]$ chmod 777 case.sh[atguigu@hadoop101 datas]$ .&#x2F;case.sh 11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-3-for-循环"><a href="#7-3-for-循环" class="headerlink" title="7.3 for 循环"></a>7.3 for 循环</h3><p>1．基本语法1</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for (( 初始值;循环控制条件;变量变化 ))   do     程序   done<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2．案例实操</p><p>（1）从1加到100</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch for1.sh[atguigu@hadoop101 datas]$ vim for1.sh#!&#x2F;bin&#x2F;bashs&#x3D;0for((i&#x3D;0;i&lt;&#x3D;100;i++))do        s&#x3D;$[$s+$i]doneecho $s[atguigu@hadoop101 datas]$ chmod 777 for1.sh [atguigu@hadoop101 datas]$ .&#x2F;for1.sh “5050”[root@0725pc shells]# tail -n 4 test1.sh SUM2&#x3D;0for((i&#x3D;0;i&lt;&#x3D;10;i++));do SUM2&#x3D;$(($SUM2+$i)); doneecho &quot;从1加到100的值是：$SUM2&quot;[root@0725pc shells]# .&#x2F;test1.sh 从1加到100的值是：55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3．基本语法2</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for 变量 in 值1 值2 值3…   do     程序   done<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4．案例实操</p><p>​    （1）打印所有输入参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch for2.sh[atguigu@hadoop101 datas]$ vim for2.sh#!&#x2F;bin&#x2F;bash#打印数字for i in $*    do      echo &quot;ban zhang love $i &quot;    done[atguigu@hadoop101 datas]$ chmod 777 for2.sh [atguigu@hadoop101 datas]$ bash for2.sh cls xz bdban zhang love clsban zhang love xzban zhang love bd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多种写法啊</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc shells]# cat test2.sh #! &#x2F;bin&#x2F;bashfor i in 1 2 3do echo $idoneecho &quot;--------------------&quot;for i in 1 2 3 ;do echo $i;doneecho &quot;--------------------&quot;for i in &#123;1..3&#125;;do echo $i;done[root@0725pc shells]# .&#x2F;test2.sh 123--------------------123--------------------123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）比较$*和$@区别</p><p>（a）$*和$@都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以$1 $2 …$n的形式输出所有参数。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch for.sh[atguigu@hadoop101 datas]$ vim for.sh#!&#x2F;bin&#x2F;bash for i in $*do      echo &quot;ban zhang love $i &quot;donefor j in $@do              echo &quot;ban zhang love $j&quot;done[atguigu@hadoop101 datas]$ bash for.sh cls xz bdban zhang love cls ban zhang love xz ban zhang love bd ban zhang love clsban zhang love xzban zhang love bd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（b）当它们被双引号“”包含时，“$*”会将所有的参数作为一个整体，以“$1 $2 …$n”的形式输出所有参数；“$@”会将各个参数分开，以“$1” “$2”…”$n”的形式输出所有参数。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ vim for.sh#!&#x2F;bin&#x2F;bash for i in &quot;$*&quot; #$*中的所有参数看成是一个整体，所以这个for循环只会循环一次         do                 echo &quot;ban zhang love $i&quot;        done for j in &quot;$@&quot; #$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次         do                 echo &quot;ban zhang love $j&quot; done[atguigu@hadoop101 datas]$ chmod 777 for.sh[atguigu@hadoop101 datas]$ bash for.sh cls xz bdban zhang love cls xz bdban zhang love clsban zhang love xzban zhang love bd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-4-while-循环"><a href="#7-4-while-循环" class="headerlink" title="7.4 while 循环"></a>7.4 while 循环</h3><p>1．基本语法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">while  [ 条件判断式 ]   do     程序  done<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2．案例实操</p><p>​    （1）从1加到100</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch while.sh[atguigu@hadoop101 datas]$ vim while.sh#!&#x2F;bin&#x2F;bashs&#x3D;0i&#x3D;1while [ $i -le 100 ]do        s&#x3D;$[$s+$i]        i&#x3D;$[$i+1]doneecho $s[atguigu@hadoop101 datas]$ chmod 777 while.sh [atguigu@hadoop101 datas]$ .&#x2F;while.sh 5050<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     （2）从0开始，累加加11次</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc shells]# bash test3.sh 11[root@0725pc shells]# cat test3.sh #! &#x2F;bin&#x2F;bashNUM&#x3D;0while((NUM&lt;&#x3D;10));do let NUM++; doneecho $NUM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意事项：</p><p>while后面需要有空格</p><h2 id="8-read读取控制台输入"><a href="#8-read读取控制台输入" class="headerlink" title="8.read读取控制台输入"></a>8.read读取控制台输入</h2><p>1．基本语法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">read(选项)(参数)选项：-p：指定读取值时的提示符；-t：指定读取值时等待的时间（秒）。参数变量：指定读取值的变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2．案例实操</p><p>​    （1）提示7秒内，读取控制台输入的名称</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch read.sh[atguigu@hadoop101 datas]$ vim read.sh#!&#x2F;bin&#x2F;bashread -t 7 -p &quot;Enter your name in 7 seconds &quot; NAMEecho $NAME[atguigu@hadoop101 datas]$ .&#x2F;read.sh Enter your name in 7 seconds xiaozexiaoz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h2><h3 id="9-1-系统函数"><a href="#9-1-系统函数" class="headerlink" title="9.1 系统函数"></a>9.1 系统函数</h3><p>1．basename基本语法</p><p>basename [string / pathname] [suffix]  （功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。</p><p>选项：</p><p>suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。</p><p>2．案例实操</p><p>（1）截取该/home/atguigu/banzhang.txt路径的文件名称</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ basename &#x2F;home&#x2F;atguigu&#x2F;banzhang.txt banzhang.txt[atguigu@hadoop101 datas]$ basename &#x2F;home&#x2F;atguigu&#x2F;banzhang.txt .txtbanzhang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>   dirname基本语法</li></ol><p>​    dirname 文件绝对路径        （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p><p>4．案例实操</p><p>（1）获取banzhang.txt文件的路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 ~]$ dirname &#x2F;home&#x2F;atguigu&#x2F;banzhang.txt &#x2F;home&#x2F;atguigu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-2-自定义函数"><a href="#9-2-自定义函数" class="headerlink" title="9.2 自定义函数"></a>9.2 自定义函数</h3><p>1．基本语法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[ function ] funname[()]&#123;Action;[return int;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2．经验技巧</p><p>​    （1）必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译。</p><p>​    （2）函数返回值，只能通过$?系统变量获得，可以显示加return返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255)</p><p>3．案例实操</p><p>​    （1）计算两个输入参数的和</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ touch fun.sh[atguigu@hadoop101 datas]$ vim fun.sh#!&#x2F;bin&#x2F;bashfunction sum()&#123;    s&#x3D;0    s&#x3D;$[ $1 + $2 ]    echo &quot;$s&quot;&#125;read -p &quot;Please input the number1: &quot; n1;read -p &quot;Please input the number2: &quot; n2;sum $n1 $n2;[atguigu@hadoop101 datas]$ chmod 777 fun.sh[atguigu@hadoop101 datas]$ .&#x2F;fun.sh Please input the number1: 2Please input the number2: 57<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-Shell工具（重点）"><a href="#10-Shell工具（重点）" class="headerlink" title="10.Shell工具（重点）"></a>10.Shell工具（重点）</h2><h3 id="10-1-wc"><a href="#10-1-wc" class="headerlink" title="10.1 wc"></a>10.1 wc</h3><p>​     wc命令用来计算数字。利用wc指令我们可以计算文件的Byte数、字数或是列数，若不指定文件名称，或是所给予的文件名为“-”，则wc指令会从标准输入设备读取数据。</p><p>​    1. 基本用法</p><p>​         wc [选项参数] filename</p><p>​    2. 参数说明</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-l</td><td>统计文件行数</td></tr><tr><td>-w</td><td>统计文件的单词数</td></tr><tr><td>-m</td><td>统计文件的字符数</td></tr><tr><td>-c</td><td>统计文件的字节数</td></tr></tbody></table><ol start="3"><li>案例实操</li></ol><p>​             统计redis_6379.conf文件的行数、单词数、字节数！</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc myredis]# ll | grep redis_6379.conf-rw-r--r--. 1 root root      188 10月  9 15:33 redis_6379.conf[root@0725pc myredis]# cat -n redis_6379.conf      1include &#x2F;root&#x2F;myredis&#x2F;redis.conf     2pidfile &quot;&#x2F;var&#x2F;run&#x2F;redis_6379.pid&quot;     3port 6379     4dbfilename &quot;dump_6379.rdb&quot;     5cluster-enabled yes     6cluster-config-file nodes-6379.conf     7cluster-node-timeout 15000     8[root@0725pc myredis]# wc -w redis_6379.conf 14 redis_6379.conf[root@0725pc myredis]# wc -l redis_6379.conf 8 redis_6379.conf[root@0725pc myredis]# wc -m redis_6379.conf 188 redis_6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-2-cut"><a href="#10-2-cut" class="headerlink" title="10.2 cut"></a>10.2 cut</h3><p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><p>1.基本用法</p><p>cut [选项参数]  filename </p><p>说明：默认分隔符是制表符</p><p>2.选项参数说明</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>f为fileds，列号，提取第几列</td></tr><tr><td>-d</td><td>d为Descriptor分隔符，按照指定分隔符分割列</td></tr><tr><td>-c</td><td>指定具体字符</td></tr></tbody></table><p>3.案例实操 </p><p>（0）以：为间隔，切割PATH环境变量的第一列</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc ~]# echo $PATH&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;opt&#x2F;jdk1.8.0_121&#x2F;bin:&#x2F;root&#x2F;bin[root@0725pc ~]# echo $PATH | cut -d &#39;:&#39; -f 1&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）以：为间隔，切割PATH环境变量的第二、三列</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc ~]# echo $PATH&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;opt&#x2F;jdk1.8.0_121&#x2F;bin:&#x2F;root&#x2F;bin[root@0725pc ~]# echo $PATH | cut -d &#39;:&#39; -f 2,3&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）选取系统PATH变量值，第2个“：”开始后的所有路径：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ echo $PATH&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;home&#x2F;atguigu&#x2F;bin[atguigu@hadoop102 datas]$ echo $PATH | cut -d: -f 3-&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;home&#x2F;atguigu&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> （4）以：为间隔，切割PATH环境变量的第一到三列，和第五列</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@0725pc ~]# echo $PATH&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;opt&#x2F;jdk1.8.0_121&#x2F;bin:&#x2F;root&#x2F;bin[root@0725pc ~]# echo $PATH | cut -d &#39;:&#39; -f 1-3,5&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）切割ifconfig 后打印的IP地址</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop101 datas]$ ifconfig eth0 | grep &quot;inet addr&quot; | cut -d: -f 2 | cut -d&quot; &quot; -f1ifconfig ens33 |grep &#39;netmask&#39;  | cut -d &#39;t&#39; -f 2 |cut -d &quot; &quot; -f 2192.168.1.102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-3-awk"><a href="#10-3-awk" class="headerlink" title="10.3 awk"></a>10.3 awk</h3><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><ol><li>基本用法</li></ol><p>awk [选项参数] ‘pattern1{action1} pattern2{action2}…’ filename</p><p>pattern：表示AWK在数据中查找的内容，就是匹配模式</p><p>action：在找到匹配内容时所执行的一系列命令</p><ol start="2"><li>选项参数说明</li></ol><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定输入文件折分隔符</td></tr><tr><td>-v</td><td>赋值一个用户定义变量</td></tr></tbody></table><ol start="3"><li>案例实操</li></ol><p>（0）数据准备</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ sudo cp &#x2F;etc&#x2F;passwd .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（1）搜索passwd文件以root关键字开头的所有行，并输出该行的第7列。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ awk -F: &#39;&#x2F;^root&#x2F;&#123;print $7&#125;&#39; passwd &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ awk -F: &#39;&#x2F;^root&#x2F;&#123;print $1&quot;,&quot;$7&#125;&#39; passwd root,&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：只有匹配了patter的行才会执行action</p><p>（3）只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user，shell在最后一行添加”dahaige，/bin/zuishuai”。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ awk -F : &#39;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;dahaige,&#x2F;bin&#x2F;zuishuai&quot;&#125;&#39; passwduser, shellroot,&#x2F;bin&#x2F;bashbin,&#x2F;sbin&#x2F;nologin。。。atguigu,&#x2F;bin&#x2F;bashdahaige,&#x2F;bin&#x2F;zuishuai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</p><p>（4）将passwd文件中的用户id增加数值1并输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ awk -v i&#x3D;1 -F: &#39;&#123;print $3+i&#125;&#39; passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1</p><p>2</p><p>3</p><p>4</p><ol start="4"><li>awk的内置变量</li></ol><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>FILENAME</td><td>文件名</td></tr><tr><td>NR</td><td>已读的记录数（行号）</td></tr><tr><td>NF</td><td>浏览记录的域的个数（切割后列的个数）</td></tr></tbody></table><ol start="5"><li>案例实操</li></ol><p>（1）统计passwd文件名，每行的行号，每行的列数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ awk -F: &#39;&#123;print &quot;filename:&quot;  FILENAME &quot;, linenumber:&quot; NR  &quot;,columns:&quot; NF&#125;&#39; passwd filename:passwd, linenumber:1,columns:7filename:passwd, linenumber:2,columns:7filename:passwd, linenumber:3,columns:7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​      （2）切割IP</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ ifconfig eth0 | grep &quot;inet addr&quot; | awk -F: &#39;&#123;print $2&#125;&#39; | awk -F &quot; &quot; &#39;&#123;print $1&#125;&#39; ifconfig |grep &quot;netmask&quot; |  awk -F &quot;inet&quot; &#39;&#123;print $2&#125;&#39;| awk -F &quot; &quot; &#39;&#123;print $1&#125;&#39;192.168.1.102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​      （3）查询sed.txt中空行所在的行号</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ awk &#39;&#x2F;^$&#x2F;&#123;print NR&#125;&#39; sed.txt 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-4-sort"><a href="#10-4-sort" class="headerlink" title="10.4 sort"></a>10.4 sort</h3><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。默认情况以第一个字符串的字典顺序来排序！</p><ol><li>基本语法</li></ol><p>sort(选项)(参数)</p><p>表1-57</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>依照数值的大小排序</td></tr><tr><td>-r</td><td>以相反的顺序来排序</td></tr><tr><td>-t</td><td>设置排序时所用的分隔字符，默认使用TAB</td></tr><tr><td>-k</td><td>指定需要排序的列</td></tr><tr><td>-u</td><td>u为unique的缩写，即如果出现相同的数据，只出现一行</td></tr></tbody></table><p>参数：指定待排序的文件列表</p><ol start="2"><li>案例实操</li></ol><p>（0）数据准备</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ touch sort.sh[atguigu@hadoop102 datas]$ vim sort.sh bb:40:5.4bd:20:4.2xz:50:2.3cls:10:3.5ss:30:1.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（1）按照“：”分割后的第三列倒序排序。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ sort -t : -nrk 3  sort.sh bb:40:5.4bd:20:4.2cls:10:3.5xz:50:2.3ss:30:1.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-常见错误及解决方案"><a href="#11-常见错误及解决方案" class="headerlink" title="11.常见错误及解决方案"></a>11.常见错误及解决方案</h2><ol><li>虚拟化支持异常情况如下几种情况</li></ol><img src="../img/shell/image-20201018074324883.png"/>图1-168 <img src="../img/shell/image-20201018074328941.png"/><p>图1-169</p> <img src="../img/shell/image-20201018074331717.png"/><p>图1-170</p><img src="../img/shell/image-20201018074335164.png"/><p>图1-171</p><p>问题原因：宿主机BIOS设置中的硬件虚拟化被禁用了</p><p>解决办法：需要打开笔记本BIOS中的IVT对虚拟化的支持</p> <img src="../img/shell/image-20201018074340923.png"/><p>图1-172</p><h2 id="12-企业真实面试题"><a href="#12-企业真实面试题" class="headerlink" title="12.企业真实面试题"></a>12.企业真实面试题</h2><h3 id="12-1-百度-amp-考满分"><a href="#12-1-百度-amp-考满分" class="headerlink" title="12.1 百度&amp;考满分"></a>12.1 百度&amp;考满分</h3><p>问题：Linux常用命令</p><p>参考答案：find、df、tar、ps、top、netstat等。（尽量说一些高级命令）</p><h3 id="12-2-瓜子二手车"><a href="#12-2-瓜子二手车" class="headerlink" title="12.2 瓜子二手车"></a>12.2 瓜子二手车</h3><p>问题：Linux查看内存、磁盘存储、io 读写、端口占用、进程等命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">答案：1、查看内存：top2、查看磁盘存储情况：df -h3、查看磁盘IO读写情况：iotop（需要安装一下：yum install iotop）、iotop -o（直接查看输出比较高的磁盘读写程序）4、查看端口占用情况：netstat -tunlp | grep 端口号5、查看进程：ps aux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-3-京东"><a href="#12-3-京东" class="headerlink" title="12.3 京东"></a>12.3 京东</h3><p>问题1：使用Linux命令查询file1中空行所在的行号</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">答案：[atguigu@hadoop102 datas]$ awk &#39;&#x2F;^$&#x2F;&#123;print NR&#125;&#39; sed.txt 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问题2：有文件chengji.txt内容如下:</p><p>张三 40</p><p>李四 50</p><p>王五 60</p><p>使用Linux命令计算第二列的和并输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ cat chengji.txt | awk -F &quot; &quot; &#39;&#123;sum+&#x3D;$2&#125; END&#123;print sum&#125;&#39;150<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-4-搜狐-amp-和讯网"><a href="#12-4-搜狐-amp-和讯网" class="headerlink" title="12.4 搜狐&amp;和讯网"></a>12.4 搜狐&amp;和讯网</h3><p>问题1：Shell脚本里如何检查一个文件是否存在？如果不存在该如何处理？</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashif [ -f file.txt ]; then   echo &quot;文件存在!&quot;else   echo &quot;文件不存在!&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-5-新浪"><a href="#12-5-新浪" class="headerlink" title="12.5 新浪"></a>12.5 新浪</h3><p>问题1：用shell写一个脚本，对文本中无序的一列数字排序</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@CentOS6-2 ~]# cat test.txt98765432101[root@CentOS6-2 ~]# sort -n test.txt|awk &#39;&#123;a+&#x3D;$0;print $0&#125;END&#123;print &quot;SUM&#x3D;&quot;a&#125;&#39;12345678910SUM&#x3D;55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-6-金和网络"><a href="#12-6-金和网络" class="headerlink" title="12.6 金和网络"></a>12.6 金和网络</h3><p>问题1：请用shell脚本写出查找当前文件夹（/home）下所有的文本文件内容中包含有字符”shen”的文件名称</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 datas]$ grep -r &quot;shen&quot; &#x2F;home | cut -d &quot;:&quot; -f 1&#x2F;home&#x2F;atguigu&#x2F;datas&#x2F;sed.txt&#x2F;home&#x2F;atguigu&#x2F;datas&#x2F;cut.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="13-正则表达式入门"><a href="#13-正则表达式入门" class="headerlink" title="13.正则表达式入门"></a>13.正则表达式入门</h2><p>正则表达式使用单个字符串来描述、匹配一系列符合某个语法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。在Linux中，grep，awk等命令都支持通过正则表达式进行模式匹配。</p><h3 id="13-1-常规匹配"><a href="#13-1-常规匹配" class="headerlink" title="13.1 常规匹配"></a>13.1 常规匹配</h3><p>一串不包含特殊字符的正则表达式匹配它自己，例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@hadoop101 datas]$ cat &#x2F;etc&#x2F;passwd | grep atguigu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会匹配所有包含atguigu的行</p><h3 id="13-2-常用特殊字符"><a href="#13-2-常用特殊字符" class="headerlink" title="13.2 常用特殊字符"></a>13.2 常用特殊字符</h3><p><strong>1****）特殊字符：^</strong></p><p>^ 匹配一行的开头，例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@hadoop101 datas]$ cat &#x2F;etc&#x2F;passwd | grep ^a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会匹配出所有以a开头的行</p><p><strong>2****）特殊字符：$</strong></p><p>$ 匹配一行的结束，例如</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@hadoop101 datas]$ cat &#x2F;etc&#x2F;passwd | grep t$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会匹配出所有以t结尾的行</p><p><strong>思考：^$</strong> <strong>匹配什么？</strong></p><p><strong>3****）特殊字符：.</strong></p><p>. 匹配一个任意的字符，例如</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@hadoop101 datas]$ cat &#x2F;etc&#x2F;passwd | grep r..t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会匹配包含rabt,rbbt,rxdt,root等的所有行</p><p><strong>4****）特殊字符：*</strong></p><p>* 不单独使用，他和上一个字符连用，表示匹配上一个字符0次或多次，例如</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@hadoop101 datas]$ cat &#x2F;etc&#x2F;passwd | grep ro*t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会匹配rt, rot, root, rooot, roooot等所有行</p><p>思考：.* 匹配什么？</p><p><strong>5****）特殊字符：[ ]</strong></p><p>[ ] 表示匹配某个范围内的一个字符，例如</p><p>[6,8]——匹配6或者8</p><p>[a-z]——匹配一个a-z之间的字符</p><p>[a-z]*—–匹配任意字母字符串</p><p>[a-c, e-f]-匹配a-c或者e-f之间的任意字符</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@hadoop101 datas]$ cat &#x2F;etc&#x2F;passwd | grep r[a,b,c]*t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会匹配rat, rbt, rabt, rbact等等所有行</p><p>*<em>6</em>**<em>）特殊字符：*</em></p><p>\ 表示转义，并不会单独使用。由于所有特殊字符都有其特定匹配模式，当我们想匹配某一特殊字符本身时（例如，我想找出所有包含 ‘$’ 的行），就会碰到困难。此时我们就要将转义字符和特殊字符连用，来表示特殊字符本身，例如</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@hadoop101 datas]$ cat &#x2F;etc&#x2F;passwd | grep a\$b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会匹配所有包含 a$b 的行。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell Linux 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS入门到精通</title>
      <link href="/posts/1003.html"/>
      <url>/posts/1003.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、JavaScript概述"><a href="#一、JavaScript概述" class="headerlink" title="一、JavaScript概述"></a>一、JavaScript概述</h2><h3 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1 编程语言"></a>1 编程语言</h3><h4 id="1-1-编程语言的定义"><a href="#1-1-编程语言的定义" class="headerlink" title="1.1 编程语言的定义"></a>1.1 编程语言的定义</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">-</span> 编程语言就是人与计算机交流的语言。<span class="token operator">-</span> <span class="token function">编程语言要满足图灵完备性</span><span class="token punctuation">(</span>一切可计算的问题都能计算<span class="token punctuation">)</span>，所以说<span class="token constant">HTML</span>和<span class="token constant">CSS</span>不能算作编程语言。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-2-编程语言的分类"><a href="#1-2-编程语言的分类" class="headerlink" title="1.2 编程语言的分类"></a>1.2 编程语言的分类</h4><p>① 机器语言</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">01000100001000001010101000001000010000010000</span><span class="token number">00001000011101111011110001110000111000100000</span><span class="token number">01011100001000101010101000111000010000101010</span><span class="token number">01010101010101010111100000011101111000101010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>② 汇编语言</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">section <span class="token punctuation">.</span>data            <span class="token punctuation">;</span> 数据段声明    msg db <span class="token string">"Hello, world!"</span><span class="token punctuation">,</span> <span class="token number">0xA</span>     <span class="token punctuation">;</span> 要输出的字符串    len equ $ <span class="token operator">-</span> msg                 <span class="token punctuation">;</span> 字串长度section <span class="token punctuation">.</span>text            <span class="token punctuation">;</span> 代码段声明global _start            <span class="token punctuation">;</span> 指定入口函数_start<span class="token operator">:</span>                  <span class="token punctuation">;</span> 在屏幕上显示一个字符串        mov edx<span class="token punctuation">,</span> len     <span class="token punctuation">;</span> 参数三：字符串长度        mov ecx<span class="token punctuation">,</span> msg     <span class="token punctuation">;</span> 参数二：要显示的字符串        mov ebx<span class="token punctuation">,</span> <span class="token number">1</span>       <span class="token punctuation">;</span> <span class="token function">参数一：文件描述符</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>         mov eax<span class="token punctuation">,</span> <span class="token number">4</span>       <span class="token punctuation">;</span> <span class="token function">系统调用号</span><span class="token punctuation">(</span>sys_write<span class="token punctuation">)</span>         int <span class="token number">0x80</span>         <span class="token punctuation">;</span> 调用内核功能                         <span class="token punctuation">;</span> 退出程序        mov ebx<span class="token punctuation">,</span> <span class="token number">0</span>       <span class="token punctuation">;</span> 参数一：退出代码        mov eax<span class="token punctuation">,</span> <span class="token number">1</span>       <span class="token punctuation">;</span> <span class="token function">系统调用号</span><span class="token punctuation">(</span>sys_exit<span class="token punctuation">)</span>         int <span class="token number">0x80</span>         <span class="token punctuation">;</span> 调用内核功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 高级语言</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">编译型 ： 先编译，再运行； 如 Java、<span class="token constant">C</span>、<span class="token constant">C</span><span class="token operator">++</span> <span class="token operator">...</span> 运行效率更高。需要编译器。解释型 <span class="token operator">:</span> 边编译，边运行； 如JavaScript、<span class="token constant">PHP</span>、Python<span class="token operator">...</span> 开发效率更高。需要解释器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-什么是-JavaScript"><a href="#2-什么是-JavaScript" class="headerlink" title="2 什么是 JavaScript"></a>2 什么是 JavaScript</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">JavaScript 是一门动态的，弱类型的，解释型的，基于对象的脚本语言。动态： 程序执行的时候才会确定数据类型。 静态： 书写代码的时候提前确定数据类型。弱类型： 数据类型可以自动转换。 强类型： 数据类型无法自动转换。解释型： 边编译，边运行，开发效率更高。 编译型： 边编译，边运行，开发效率更高。脚本：一般都是可以嵌在其它编程语言当中执行。JavaScript 的解释器（运行环境）是浏览器或Node<span class="token punctuation">.</span>js。Java 和 JavaScript 的关系： 雷锋和雷峰塔的关系。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-JavaScript-的由来"><a href="#3-JavaScript-的由来" class="headerlink" title="3 JavaScript 的由来"></a>3 JavaScript 的由来</h3><blockquote><img src="../img/js/image-20210610170801502.png" style="zoom:67%;" />        <p>​        在美国 布莱登艾奇 1995年 用了10天开发了js<br>JavaScript是一门动态、弱类型、解释型的脚本语言<br>​        动态语言：只有在执行的时候才能确定数据类型<br>​        弱类型：变量数据的类型不是确定的，可以随意的进行改变<br>​       解释型：相对编译型来说，编译型计算机在执行之前需要把程序进行编译，完事之后在执行， 而解释型，不需要编译，执行的时候一行一行去解释执行<br>​        脚本：一般只是要脚本语言，都代表可以嵌套在其他语言中进行执行</p><img src="../img/image-20210610170852115.png"  style="zoom:67%;" /><p>起初叫什么、后来怎么叫JavaScript了<br>       刚开始叫livescript  sum开发了java 借助了java的名字火了一把<br>       把livescript改为了JavaScript</p></blockquote><blockquote><p>1.为什么要有JavaScript<br>           开始能干什么<br>                   负责表单验证（仅仅是负责表单验证）<br>                   如果没有js，那么我们网页的表单验证需要通过网络传输数据去服务器进行验证<br>                   占用带宽资源严重，并且用户体验效果不好</p><p>​            现在能干什么<br>​                    浏览器端js，页面特效(表单验证、各种特效)<br>​                    手机app(ios编程语言、oc和swift; 安卓：java)(js开发混合app：一键打包到安卓、ios、windowsphone)<br>​                    游戏(网页，代替flash)<br>​                    后端开发(nodejs)</p><img src="../img/js/image-20210610171016065.png"  style="zoom:50%;" /><p>2.javascript的组成部分<br>       ECMAscript(ES5) 是一个标准负责JavaScript基础语法<br>       DOM  文档对象模型（主要就是操作网页中的元素）<br>       BOM  浏览器对象模型（就是操作浏览器的）</p><p>3.js语句的特点<br>       alert函数  以弹出框的形式输出内容<br>       clonsole.log函数 以日志的形式在控制台输出内容<br>       document.write函数 把内容作为网页的内容进行显示<br>       clonsole.dir 函数 更详细日志<br>       js语句的特点：每一行我们都会有一个分号进行结尾，分号不是必须的。</p><p>4.js的三种书写位置的优缺点<br>       内嵌式：用的比较多，一般写项目初期都会内嵌，最后变为外链<br>       外链式：里面不能写其他代码，外链以后几乎全是外链<br>       行内式(内联)：局限性比较大，只能对事件进行书写js，问题也很大，做不到结构和行为分离</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">   <span class="token number">1.</span>可以编写到标签的指定属性中<span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"alert('hello');"</span><span class="token operator">></span>我是按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:alert('aaa');"</span><span class="token operator">></span>超链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token number">2.</span>可以编写到script标签中  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">//编写js代码</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">3.</span>可以将代码编写到外部的js文件中，然后通过标签将其引入 <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"文件路径"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">></span><span class="token operator">-</span> <span class="token constant">JS</span>严格区分大小写<span class="token operator">></span><span class="token operator">-</span> <span class="token constant">JS</span><span class="token function">中每条语句以分号</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">)</span>结尾<span class="token operator">></span><span class="token operator">-</span> <span class="token constant">JS</span>中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="二、-变量及作用"><a href="#二、-变量及作用" class="headerlink" title="二、 变量及作用"></a>二、 变量及作用</h2><blockquote><p>什么是变量，什么是常量<br>       变量就是可以变化的量<br>       常量就是不可以改变的量</p><p>字面量：都是一些不可改变的值</p><p>​                    比如：1.2.4.5</p><p>​                 字面量都是可以直接使用，但是我们一般不会直接使用字面量</p><p>变量：变量可以用来保存字面量，而且变量的值可以任意改变的</p><p>​                变量更加方便我们使用，所以在开发中都是通过变量去保存一个字面量，很少使用字面量</p><p>​                js中的变量并不直接存储值，而是存储值的内存地址，当我们访问变量时，是通过内存地址找到值</p><p>​              在js中所有基本类型都是不可变类型，值一旦创建，就不可修改</p><p>为什么要有变量<br>       我们对数据进行运算，然后进行输出，这个数据就需要一个东西去保存，就是<br>       我们所说的变量，本质上是一个容器</p><p>怎么去玩<br>1.定义变量，定义后使用，变量的初始化（var和不写的区别） 变量的本质<br>           定义变量使用var关键字，先定义后使用，定义好了可以给变量赋值<br>           如果定义变量不使用var，那么变量必须要赋值，不赋值就报错<br>           建议，我们在使用的时候，都带上var去定义变量</p><p>​    2.变量的命名规范（大驼峰，小驼峰，下划线）<br>​                变量的名字由：数组、字母、下划线、以及$组成<br>​                不能以数字开头，不能和关键字以及保留字同名</p><p>​                不能是ES中关键字或保留字</p><p>​        变量名我们一般要见名知意<br>​                大驼峰：变量名所有的单词首字母大写                                 var ClassNumber<br>​                小驼峰：变量名第一个单词首字母小写，其它的大写          var classNumber  前端人员最常用的是这个，只有特定情况用大驼峰；<br>​                下划线：单词和单词之间用下划线连接                  var class_number    </p><p>​    3.关键字和保留字  </p><img src="../img/js/image-20210610220943354.png"  style="zoom: 67%;" /></blockquote><h2 id="三、-数据类型"><a href="#三、-数据类型" class="headerlink" title="三、 数据类型"></a>三、 数据类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1</span>、数据类型（存储的数据的类型）<span class="token function">基本数据类型和对象</span><span class="token punctuation">(</span>复杂<span class="token punctuation">)</span>数据类型基本数据类型（值类型）<span class="token constant">ES5</span>中有五种 ：<span class="token operator">-</span> String 字符串<span class="token operator">-</span> Number 数值<span class="token operator">-</span> Boolean 布尔值<span class="token operator">-</span> Null 空值<span class="token operator">-</span> Undefined 未定义<span class="token operator">-</span> Object 对象        这<span class="token number">5</span>种之外的类型都称为Object，所以总的来看JavaScript中共有六种数据类型。<span class="token number">2</span>、基本使用场景数值类型    <span class="token function">整数和浮点数</span><span class="token punctuation">(</span>小数<span class="token punctuation">)</span> 字符串      单引号或者双引号包含  空字符串  和  空白字符串布尔      <span class="token boolean">true</span>或者<span class="token boolean">false</span><span class="token keyword">undefined</span>   定义的变量没有赋值    <span class="token keyword">null</span>        定义的变量赋值为<span class="token keyword">null</span><span class="token punctuation">(</span>一般是对对象进行初始化使用或者是删除一个对象的时候用到<span class="token punctuation">)</span>Null类型也是只有一个值：<span class="token keyword">null</span><span class="token punctuation">(</span>空<span class="token punctuation">)</span>    通常当一个对象（Object类型）不再使用时，可以赋值为<span class="token keyword">null</span> 让垃圾回收机制回收Null和Undefined的关系：         <span class="token operator">*</span> Null 类型的值只有一个，就是<span class="token keyword">null</span>  空值         <span class="token operator">*</span> <span class="token keyword">null</span>这个值专门用来表示一个为空的对象         <span class="token operator">*</span> 使用<span class="token keyword">typeof</span>检查<span class="token keyword">null</span>值时，会返回object         <span class="token operator">*</span> Undefined类型的值只有一个，就是<span class="token keyword">undefined</span>  表示未定义         <span class="token operator">*</span> 当声明一个变量，但是不给变量赋值时，他的值就是<span class="token keyword">undefined</span><span class="token keyword">undefined</span>值实际上是由<span class="token keyword">null</span>值衍生出来的，所以如果比较<span class="token keyword">undefined</span>和<span class="token keyword">null</span>是否相等，会返回<span class="token boolean">true</span>但是转化成数字时，<span class="token keyword">undefined</span>为<span class="token number">NaN</span>，<span class="token keyword">null</span>为<span class="token number">0</span>    <span class="token number">3</span>、数据类型的判断 使用<span class="token keyword">typeof</span>操作符可以用来检查一个变量的数据类型。语法： <span class="token keyword">typeof</span> 变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、-运算符和表达式"><a href="#四、-运算符和表达式" class="headerlink" title="四、 运算符和表达式"></a>四、 运算符和表达式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">什么是运算符  什么是表达式   ​    运算符：参与运算的符号​    表达式：由变量或常量和运算符组成的式子   表达式是有值的<span class="token number">1</span>、算术  算术表达式<span class="token operator">+</span>对两个值进行加法运算并返回结果<span class="token operator">-</span>  对两个值进行减法运算并返回结果<span class="token operator">*</span>对两个值进行乘法运算并返回结果<span class="token operator">/</span>对两个值进行除法运算并返回结果<span class="token operator">%</span>对两个值进行取余运算并返回结果        <span class="token operator">-</span> 除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。<span class="token operator">-</span> 而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。<span class="token operator">-</span> 任何值和字符串做加法，都会先转换为字符串，然后再拼串<span class="token operator">++</span> <span class="token operator">--</span> 作用及注意事项<span class="token operator">-</span> 自增<span class="token operator">-</span> 自增可以使变量在原值的基础上自增<span class="token number">1</span><span class="token operator">-</span> 自增使用 <span class="token operator">++</span><span class="token operator">-</span> 自增可以使用 前<span class="token operator">++</span>（<span class="token operator">++</span>a）后<span class="token operator">++</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">-</span> 无论是<span class="token operator">++</span>a 还是 a<span class="token operator">++</span>都会立即使原变量自增<span class="token number">1</span>不同的是<span class="token operator">++</span>a和a<span class="token operator">++</span>的值是不同的，<span class="token operator">++</span>a先让a值的<span class="token operator">+</span><span class="token number">1</span>，后把a的值赋值给表达式  <span class="token function">的值等于原变量自增后的值</span><span class="token punctuation">(</span>新值<span class="token punctuation">)</span> （自增后的值）a<span class="token operator">++</span><span class="token function">是先赋值</span><span class="token punctuation">(</span>先把a的值赋值给表达式<span class="token punctuation">)</span>    的值是变量的原值（自增前的值）<span class="token operator">-</span> 自减<span class="token operator">-</span> 自减可以使变量在原值的基础上自减<span class="token number">1</span><span class="token operator">-</span> 自减使用 <span class="token operator">--</span><span class="token operator">-</span> 自减可以使用 前<span class="token operator">--</span>（<span class="token operator">--</span>a）后<span class="token operator">--</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">-</span> 无论是<span class="token operator">--</span>a 还是 a<span class="token operator">--</span>都会立即使原变量自减<span class="token number">1</span>不同的是<span class="token operator">--</span>a和a<span class="token operator">--</span>的值是不同的，<span class="token operator">--</span>a的值是变量的新值（自减后的值）a<span class="token operator">--</span>的值是变量的原值（自减前的值）<span class="token number">2</span>、赋值  把<span class="token operator">=</span>右边的值 赋值给左边的值   <span class="token operator">=</span>左边一定是变量    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">=</span>   <span class="token operator">+=</span>  <span class="token operator">-=</span>  <span class="token operator">*=</span>  <span class="token operator">/=</span>  <span class="token operator">%=</span>a<span class="token operator">+=</span>b  相当于 a <span class="token operator">=</span> a <span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token number">3</span><span class="token function">、比较</span><span class="token punctuation">(</span>条件运算符<span class="token punctuation">)</span><span class="token operator">></span>  <span class="token operator">&lt;</span>  <span class="token operator">>=</span>  <span class="token operator">&lt;=</span>  <span class="token operator">==</span>  <span class="token operator">!=</span>  <span class="token operator">===</span><span class="token punctuation">(</span>全等于<span class="token punctuation">)</span>  <span class="token operator">!==</span><span class="token punctuation">(</span>不全等于<span class="token punctuation">)</span>主要用来比较两个值之间的关系，如果关系成立则返回<span class="token boolean">true</span>，关系不成立则返回<span class="token boolean">false</span>。<span class="token operator">-</span> 如果比较的两个值是非数值，会将其转换为Number然后再比较。<span class="token operator">-</span> 如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。<span class="token operator">==</span><span class="token operator">-</span> 相等，判断左右两个值是否相等，如果相等返回<span class="token boolean">true</span>，如果不等返回<span class="token boolean">false</span><span class="token operator">-</span> 相等会自动对两个值进行类型转换，如果对不同的类型进行比较，会将其转换为相同的类型然后再比较，转换后相等它也会返回<span class="token boolean">true</span>    <span class="token operator">!=</span><span class="token operator">-</span> 不等，判断左右两个值是否不等，如果不等则返回<span class="token boolean">true</span>，如果相等则返回<span class="token boolean">false</span><span class="token operator">-</span> 不等也会做自动的类型转换。<span class="token operator">===</span><span class="token operator">-</span> 全等，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，如果两个值的类型不同，则直接返回<span class="token boolean">false</span><span class="token operator">!==</span><span class="token operator">-</span> 不全等，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回<span class="token boolean">true</span><span class="token keyword">null</span>和<span class="token keyword">undefined</span>使用<span class="token operator">==</span>判断时是相等的<span class="token operator">==</span> ：判断的是值是否一致<span class="token operator">===</span>：判断的是类型和值是否都一致，都一致才会为<span class="token boolean">true</span><span class="token number">4</span>、逻辑运算符 用在多个条件表达式的连接<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>并且<span class="token punctuation">)</span>  <span class="token operator">||</span><span class="token punctuation">(</span>或者<span class="token punctuation">)</span>  <span class="token operator">!</span><span class="token operator">&amp;&amp;</span>一假则假   两个值只要有一个fasle，就返回fasle 两个值都为<span class="token boolean">true</span>，才会返回<span class="token boolean">true</span><span class="token operator">||</span> 一真则真  两个值只要有一个<span class="token boolean">true</span>，就返回<span class="token boolean">true</span> 两个值都为<span class="token boolean">false</span> 才返回<span class="token boolean">false</span>！非真即假 非假即真<span class="token operator">&amp;&amp;</span> 先判断<span class="token operator">&amp;&amp;</span>之前是否为为真，如果为真 ，那么取后边的值，赋值给逻辑表达式 前面如果是假，那么取前面的值赋值给逻辑表达式<span class="token operator">||</span> 先判断<span class="token operator">||</span>之前是否为为真，如果为真 ，那么取前面的值，赋值给逻辑表达式 前面前面的值为假，那么取后面的值赋值给逻辑表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">5</span><span class="token function">、三目运算符</span><span class="token punctuation">(</span>也叫三元运算符<span class="token punctuation">)</span> <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">10</span> <span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">;</span> 语法：条件表达式<span class="token operator">?</span>语句<span class="token number">1</span><span class="token operator">:</span>语句<span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">先执行第一个表达式</span><span class="token punctuation">(</span>也就是<span class="token operator">?</span>前面的表达式<span class="token punctuation">)</span>，看看这个表达式是否为真，如果判断结果为<span class="token boolean">true</span>，则执行语句<span class="token number">1</span>，并返回执行结果如果判断结果为<span class="token boolean">false</span>，则执行语句<span class="token number">2</span>，并返回执行结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、数据类型转换"><a href="#五、数据类型转换" class="headerlink" title="五、数据类型转换"></a>五、数据类型转换</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1</span>、数据类型强制转换<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">使用Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数通常情况下是用来转字符串的强制将一个其它类型数据转化为数字类型，转不了就是<span class="token number">NaN</span>   字符串 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 数字               <span class="token operator">-</span> 如果是纯数字的字符串，则直接转换为数字               <span class="token operator">-</span> 如果字符串是一个非法的数字，则转换为<span class="token number">NaN</span>               <span class="token operator">-</span> 如果是一个空串或纯空格的字符串，则转换为<span class="token number">0</span>           布尔值 <span class="token operator">--</span><span class="token operator">></span> 数字  转化数字的时候，除了<span class="token number">0</span>是<span class="token boolean">false</span><span class="token punctuation">,</span>其余都是<span class="token boolean">true</span>   <span class="token operator">-</span> <span class="token boolean">true</span>转换为<span class="token number">1</span>   <span class="token operator">-</span> <span class="token boolean">false</span>转换为<span class="token number">0</span><span class="token keyword">null</span><span class="token punctuation">(</span>空值<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 数字<span class="token operator">-</span> <span class="token keyword">null</span>转换为<span class="token number">0</span><span class="token function">未定义</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 数字<span class="token operator">-</span> <span class="token keyword">undefined</span> 转换为<span class="token number">NaN</span> <span class="token number">NaN</span>，即非数值（Not a Number）是一个特殊的数值，<span class="token constant">JS</span>中当对数值进行计算时没有结果返回，则返回<span class="token number">NaN</span>。使用Typeof检查<span class="token number">NaN</span>会返回Number<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数强制将一个其它类型数据转化为字符串类型转化字符串没有什么特殊，只要给我东西，那么就会把这个东西原样变为字符串输出；<span class="token function">将其他数值转换为字符串有三种方式：调用被转换数据的toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">方法、调用String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数、拼串。<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  强制将一个其它类型数据转化为boolean类型<span class="token function">使用Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数字符串 <span class="token operator">--</span><span class="token operator">></span> 布尔  <span class="token operator">-</span>  转化字符串的时候，除了空字符串是<span class="token boolean">false</span><span class="token punctuation">,</span>其余都是<span class="token boolean">true</span><span class="token function">Number</span><span class="token punctuation">(</span>数值<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 布尔 <span class="token operator">-</span> 除了<span class="token number">0</span>和<span class="token number">NaN</span>是fasle其余的全是<span class="token boolean">true</span><span class="token keyword">null</span>、<span class="token keyword">undefined</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 布尔 <span class="token operator">-</span> 转化<span class="token keyword">undefined</span>和<span class="token keyword">null</span>都是<span class="token boolean">false</span><span class="token punctuation">;</span>对象 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 布尔<span class="token operator">-</span> 都是<span class="token boolean">true</span><span class="token number">2</span>、数据类型隐式转换各种类型在适当的场合会发生隐式转换主要是运算过程和判断过程中<span class="token number">3</span>、数据类型手动转换（其实就是在字符串当中提取数字 强制类型转换）<span class="token operator">-</span> <span class="token function">调用parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">或parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 这两个函数专门用来将一个字符串转换为数字的<span class="token operator">-</span>  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    从字符串中提取整数 字符串必须以数字开头，转换为Number<span class="token punctuation">,</span>否则<span class="token number">NaN</span><span class="token operator">-</span>  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">从字符串中提取浮点数</span><span class="token punctuation">(</span>小数<span class="token punctuation">)</span>字符串必须以数字开头，转换为Number<span class="token punctuation">,</span>否则<span class="token number">NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、语句结构分类"><a href="#六、语句结构分类" class="headerlink" title="六、语句结构分类"></a>六、语句结构分类</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">顺序结构  分支结构   循环结构通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。<span class="token number">1</span>、<span class="token keyword">if</span>判断单分支<span class="token keyword">if</span><span class="token punctuation">(</span>一般都是一个表达式，但是最终只要有值就行<span class="token punctuation">,</span>并且这个值最终会转换为boolean<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>代码块<span class="token punctuation">&#125;</span><span class="token operator">-</span> 执行流程：<span class="token keyword">if</span>语句执行时，会先对条件表达式进行求值判断，如果值为<span class="token boolean">true</span>，则执行<span class="token keyword">if</span>后的语句如果值为<span class="token boolean">false</span>，则不执行双分支<span class="token keyword">if</span><span class="token punctuation">(</span>一般都是一个表达式，但是最终只要有值就行，并且这个值最终会转化为boolean<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>代码块；<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>代码块；<span class="token punctuation">&#125;</span><span class="token operator">-</span> 执行流程：<span class="token keyword">if</span><span class="token operator">...</span><span class="token keyword">else</span>语句执行时，会对条件表达式进行求值判断，如果值为<span class="token boolean">true</span>，则执行<span class="token keyword">if</span>后的语句如果值为<span class="token boolean">false</span>，则执行<span class="token keyword">else</span>后的语句多分支多分支是把一件事分成多种情况去考虑，每一种情况都要去处理；<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span><span class="token operator">-</span> 执行流程<span class="token operator">-</span> <span class="token keyword">if</span><span class="token operator">...</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token operator">...</span><span class="token keyword">else</span>语句执行时，会自上至下依次对条件表达式进行求值判断，如果判断结果为<span class="token boolean">true</span>，则执行当前<span class="token keyword">if</span>后的语句，执行完成后语句结束。如果判断结果为<span class="token boolean">false</span>，则继续向下判断，直到找到为<span class="token boolean">true</span>的为止。如果所有的条件表达式都是<span class="token boolean">false</span>，则执行<span class="token keyword">else</span>后的语句<span class="token number">2</span>、<span class="token keyword">switch</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token keyword">case</span>分支语句（其实就是<span class="token keyword">if</span>多分支的变种，为了代码可读性更好一些）<span class="token punctuation">;</span><span class="token operator">-</span> <span class="token keyword">switch</span>语句<span class="token operator">-</span> 语法<span class="token operator">:</span><span class="token keyword">switch</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> 表达式<span class="token operator">:</span>语句<span class="token operator">...</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> 表达式<span class="token operator">:</span>语句<span class="token operator">...</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> 表达式<span class="token operator">:</span>语句<span class="token operator">...</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>语句<span class="token operator">...</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span> 执行流程：<span class="token operator">-</span> <span class="token keyword">switch</span><span class="token operator">...</span><span class="token keyword">case</span><span class="token operator">...</span>语句在执行时，会依次将<span class="token keyword">case</span>后的表达式的值和<span class="token keyword">switch</span>后的表达式的值进行全等比较，如果比较结果为<span class="token boolean">false</span>，则继续向下比较。如果比较结果为<span class="token boolean">true</span>，则从当前<span class="token keyword">case</span>处开始向下执行代码。如果所有的<span class="token keyword">case</span>判断结果都为<span class="token boolean">false</span>，则从<span class="token keyword">default</span>处开始执行代码。<span class="token number">3</span>、  <span class="token keyword">for</span>循环<span class="token number">1.</span>循环的意义（为什么要循环）<span class="token operator">-</span> 语法：<span class="token keyword">for</span><span class="token punctuation">(</span>①初始化表达式 <span class="token punctuation">;</span> ②条件表达式 <span class="token punctuation">;</span> ④更新表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>③语句<span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">-</span> 执行流程：首先执行①初始化表达式，初始化一个变量，然后对②条件表达式进行求值判断，如果为<span class="token boolean">false</span>则终止循环如果判断结果为<span class="token boolean">true</span>，则执行③循环体循环体执行完毕，执行④更新表达式，对变量进行更新。更新表达式执行完毕重复②一定注意： <span class="token keyword">for</span>循环初始化表达式只是在第一次循环的时候执行，后面的循环全部都不执行了；  <span class="token keyword">for</span>循环当中的循环变量i  有两个作用，  <span class="token number">1</span>、控制着循环的次数   <span class="token number">2</span>、变量同时也是有值的；<span class="token number">4</span>、  <span class="token keyword">while</span>循环<span class="token operator">-</span> <span class="token keyword">while</span>循环<span class="token operator">-</span> 语法：<span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>语句<span class="token operator">...</span>i<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token operator">-</span> 执行流程：<span class="token keyword">while</span>语句在执行时，会先对条件表达式进行求值判断，如果判断结果为<span class="token boolean">false</span>，则终止循环如果判断结果为<span class="token boolean">true</span>，则执行循环体循环体执行完毕，继续对条件表达式进行求值判断，依此类推什么时候用<span class="token keyword">for</span><span class="token punctuation">,</span>什么时候用<span class="token keyword">while</span><span class="token comment">//for循环一般有明显的循环次数，这时候用for循环比较容易；</span><span class="token comment">//while循环一般没有明显的次数，用它最合适；</span><span class="token keyword">break</span>和<span class="token keyword">continue</span>关键字<span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//结束当前循环（continue以下的代码不会执行了，从下一次开始继续）</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//在循环当中，跳出离它最近的那一层循环。如果是多层循环要注意；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、-数组"><a href="#七、-数组" class="headerlink" title="七、  数组"></a>七、  数组</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">数组概念，作用，定义数组： 是一个具有相同类型或者不同类型的数据有序集合；为什么： 因为我们想要一次性拿到很多个数据，如果没有数组，就得定义很多的变量去存储    <span class="token operator">-</span> 数组也是一个对象，是一个用来存储数据的对象，和Object类似，但是它的存储效率比普通对象要高<span class="token operator">-</span> 数组中保存的内容我们称为元素<span class="token operator">-</span> 数组使用索引（index）来操作元素<span class="token operator">-</span> 索引指由<span class="token number">0</span>开始的整数数组length， 索引（下标）只要定义一个数组，数组里面就会有一个默认的属性叫length<span class="token punctuation">,</span>它代表着数组的长度索引也被称作下标，通常情况下只要我们知道了索引，就可以拿到这个数组对应的这个索引的值        <span class="token operator">-</span> 数组的操作：            <span class="token operator">-</span> 创建数组            通过构造函数定义数组                <span class="token operator">-</span> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                通过字面量定义数组                <span class="token operator">-</span> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">-</span> 向数组中添加元素                <span class="token operator">-</span> 语法；                    数组对象<span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token operator">=</span> 值<span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>            <span class="token operator">-</span> 创建数组时直接添加元素                <span class="token operator">-</span> 语法：                    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2.</span><span class="token operator">...</span>元素<span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token operator">-</span> 例子：                        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">-</span> 获取和修改数组的长度                <span class="token operator">-</span> 使用length属性来操作数组的长度                <span class="token operator">-</span> 获取长度：                    数组<span class="token punctuation">.</span>length                    <span class="token operator">-</span> length获取到的是数组的最大索引<span class="token operator">+</span><span class="token number">1</span>                    <span class="token operator">-</span> 对于连续的数组，length获取到的就是数组中元素的个数                <span class="token operator">-</span> 修改数组的长度                    数组<span class="token punctuation">.</span>length <span class="token operator">=</span> 新长度                        <span class="token operator">-</span> 如果修改后的length大于原长度，则多出的部分会空出来                        <span class="token operator">-</span> 如果修改后的length小于原长度，则原数组中多出的元素会被删除                <span class="token operator">-</span> 向数组的最后添加元素                    数组<span class="token punctuation">[</span>数组<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> 值<span class="token punctuation">;</span>           <span class="token operator">-</span> 数组的方法                <span class="token operator">-</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> 用来向数组的末尾添加一个或多个元素，并返回数组新的长度                    <span class="token operator">-</span> 语法：数组<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>元素<span class="token number">1</span><span class="token punctuation">,</span>元素<span class="token number">2</span><span class="token punctuation">,</span>元素<span class="token constant">N</span><span class="token punctuation">)</span>                <span class="token operator">-</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> 用来删除数组的最后一个元素，并返回被删除的元素                <span class="token operator">-</span> <span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> 向数组的前边添加一个或多个元素，并返回数组的新的长度                <span class="token operator">-</span> <span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> 删除数组的前边的一个元素，并返回被删除的元素                <span class="token operator">-</span> <span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> 可以从一个数组中截取指定的元素                    <span class="token operator">-</span> 该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回                    <span class="token operator">-</span> 参数：                        <span class="token number">1.</span>截取开始位置的索引（包括开始位置）                        <span class="token number">2.</span>截取结束位置的索引（不包括结束位置）                            <span class="token operator">-</span> 第二个参数可以省略不写，如果不写则一直截取到最后                        <span class="token operator">-</span> 参数可以传递一个负值，如果是负值，则从后往前数                <span class="token operator">-</span> <span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span> 可以用来删除数组中指定元素，并使用新的元素替换                        该方法会将删除的元素封装到新数组中返回                        这是一个万能的方法，可以增、可以删、可以改都是在原数组基础上进行的                    <span class="token operator">-</span> 参数：                        <span class="token number">1.</span>删除开始位置的索引                        <span class="token number">2.</span>删除的个数                        <span class="token number">3.</span>三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边          <span class="token operator">-</span> 遍历数组                <span class="token operator">-</span> 遍历数组就是将数组中元素都获取到                <span class="token operator">-</span> 一般情况我们都是使用<span class="token keyword">for</span>循环来遍历数组：                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>数组<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//数组[i]</span>                    <span class="token punctuation">&#125;</span>                <span class="token operator">-</span> <span class="token function">使用forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法来遍历数组（不兼容<span class="token constant">IE8</span>）                    数组<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value <span class="token punctuation">,</span> index <span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法需要一个回调函数作为参数，                        数组中有几个元素，回调函数就会被调用几次，                        每次调用时，都会将遍历到的信息以实参的形式传递进来，                        我们可以定义形参来获取这些信息。                        value<span class="token operator">:</span>正在遍历的元素                        index<span class="token operator">:</span>正在遍历元素的索引                        obj<span class="token operator">:</span>被遍历对象                        二、二维数组<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//二维数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>二维数组遍历        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、-函数"><a href="#八、-函数" class="headerlink" title="八、 函数"></a>八、 函数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1</span>、  函数基本使用 概念，定义（表达式，字面量），作用什么是函数：具有某种特定功能的代码块为什么要有函数<span class="token number">1</span>、函数可以解决代码复用问题<span class="token number">2</span>、函数可以把整个项目模块化函数定义（字面量定义和表达式定义   先定义后使用）                    <span class="token comment">// 字面量定义   常用</span>                    <span class="token keyword">function</span> <span class="token function">printTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 函数体 也就是你的功能代码</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 函数表达式定义</span>                    <span class="token keyword">var</span> <span class="token function-variable function">printTriangle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 函数体 也就是你的功能代码</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token operator">-</span> 函数也是一个对象，也具有普通对象的功能                <span class="token operator">-</span> 函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码                <span class="token operator">-</span> 使用<span class="token keyword">typeof</span>检查一个函数时会返回<span class="token keyword">function</span>函数定义或者调用都要考虑函数的三要素：功能  参数   返回值；功能：一般说的就是函数能做什么  通常情况下函数名就代表着函数的功能侧面告诉我们函数的名字要见名思意；参数：函数的小括号当中，写的是参数，函数定义的参数，我们被称作形参（形式参数）<span class="token punctuation">;</span> 函数调用的时候<span class="token punctuation">,</span>小括号里面也写的是参数<span class="token punctuation">,</span><span class="token function">这些参数我们称作实参</span><span class="token punctuation">(</span>实际参数<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">函数调用的实参本质上是在给函数定义的形参进行赋值</span><span class="token punctuation">(</span>把实参的值赋值给形参，通常叫传参<span class="token punctuation">)</span>； 注意：形参写出来就相当于在函数内部 <span class="token keyword">var</span>了一个变量   <span class="token keyword">function</span> <span class="token function">printLove</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">// var a ;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token function">printLove</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    函数传参：分为基本数据类型和对象数据类型                       传基本类型和对象类型不一样：基本数据类型传进去后，函数外和函数内操作的不是一个值。所以当基本数据类型的时候，函数内部运算后的结果我们需要返回。                       <span class="token function">但是如果传的是对象类型</span><span class="token punctuation">(</span>数组<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">那么函数内部和外部操作的是同一个数据</span><span class="token punctuation">(</span>数组<span class="token punctuation">)</span>，因此函数内部对数组所有的操作相当于操作外部的一样。所以运算完之后不需要返回，外部一样看到发生了变化返回值：每一个函数都会有返回值，有的函数返回值比较明确，写了<span class="token keyword">return</span><span class="token punctuation">,</span>但是有的函数没有写<span class="token keyword">return</span>，并不是代表这个函数没有返回值，而是省略了<span class="token keyword">return</span>，实际上返回值是<span class="token keyword">undefined</span>函数调用也被叫做函数调用表达式；既然函数调用是一个表达式，那么函数调用就是有值的，函数返回值就是函数调用表达式的值；​<span class="token number">2</span>、 函数的分类​<span class="token number">1</span><span class="token punctuation">)</span>无参无返回值​<span class="token number">2</span><span class="token punctuation">)</span>有参无返回值​<span class="token number">3</span><span class="token punctuation">)</span>无参有返回值​<span class="token number">4</span><span class="token punctuation">)</span>有参有返回值<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">// 无参无返回值</span><span class="token keyword">function</span> <span class="token function">prinLove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 有参无返回值</span><span class="token keyword">function</span> <span class="token function">prinLove</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 形参写出来就相当于在函数内部var了一个变量</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">prinLove</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 无参有返回值</span><span class="token keyword">function</span> <span class="token function">prinLove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 有参有返回值</span><span class="token keyword">function</span> <span class="token function">prinLove</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>形参和实参<span class="token operator">-</span> 形参：形式参数<span class="token operator">-</span> <span class="token function">定义函数时，可以在</span><span class="token punctuation">(</span><span class="token punctuation">)</span>中定义一个或多个形参，形参之间使用<span class="token punctuation">,</span>隔开定义形参就相当于在函数内声明了对应的变量但是并不赋值，形参会在调用时才赋值。<span class="token operator">-</span> 实参：实际参数<span class="token operator">-</span> <span class="token function">调用函数时，可以在</span><span class="token punctuation">(</span><span class="token punctuation">)</span>传递实参，传递的实参会赋值给对应的形参<span class="token punctuation">,</span>调用函数时<span class="token constant">JS</span>解析器不会检查实参的类型和个数，可以传递任意数据类型的值。如果实参的数量大于形参，多余实参将不会赋值，如果实参的数量小于形参，则没有对应实参的形参将会赋值<span class="token keyword">undefined</span><span class="token number">3</span>、  作用域 <span class="token number">1</span><span class="token punctuation">)</span>作用域概念，定义，作用（函数的执行过程，程序执行的过程）作用域说的是变量起作用的区域或者范围；作用域的作用：变量在各自的作用域当中起作用；内部可以用外部的东西，外部不能用内部的东西，学了闭包才能外部拿到内部的东西<span class="token number">2</span><span class="token punctuation">)</span>局部变量和全局变量局部变量：在局部作用域当中的变量（函数当中定义的变量）全局变量：在全局作用域当中的变量（函数外部定义的变量）局部变量和全局变量 没有任何关系全局变量在哪都可以使用而局部变量只能在自己局部作用域当中使用；<span class="token number">3</span><span class="token punctuation">)</span><span class="token function">作用域分类</span><span class="token punctuation">(</span>全局，局部，块级<span class="token punctuation">)</span>，在es5当中没有块级作用域，只有全局和局部全局作用域和局部作用域当中定义变量的坑：当我们定义变量的时候，都会加一个<span class="token keyword">var</span>，但是也有不加<span class="token keyword">var</span>的情况：在函数中，不使用<span class="token keyword">var</span>声明的变量都会成为全局变量<span class="token punctuation">,</span>声明了<span class="token keyword">var</span>就是局部变量定义形参就相当于在函数作用域中声明了变量如果是在全局：没有定义过的变量，不加<span class="token keyword">var</span>，那么必须给这个变量赋值，而且相当于给这个变量加<span class="token keyword">var</span>，是一个地地道道的全局变量如果是在局部：没有定义过的变量（如果没有参数，也没有加<span class="token keyword">var</span>），定义这个变量不加<span class="token keyword">var</span>，首先要看外部全局是否定义过这个变量如果全局定义过，那么这个变量就不是在初始化，而是在操作全局变量。如果没有定义过，相当于在定义全局变量；<span class="token number">4</span>）作用域链： 说的是变量在查找的过程，变量在查找的时候，首先从自己的作用域当中去查找，如果没有，往上一级作用域当中去查找一直查直到函数外部的全局作用域，只要找到，立即停止往上找，直接输出。如果没有找到会一直往上查，如果最后查到函数外部的全局都没有，就报错；<span class="token number">5</span><span class="token punctuation">)</span>程序执行过程 程序执行开始：首先肯定是创建的全局环境，然后才是局部环境，并且这些环境都是在栈里面进行管理的。 创建完全局环境之后，会把程序当中所有的全局变量收集起来并且进行执行开辟空间 接着函数调用的时候，才会创建函数环境，并且收集所有的局部变量，执行开辟空间 当函数执行完成以后，也就是函数返回值之后，代表函数执行完成，此时函数的环境会立马从栈中弹出，代表函数环境被销毁，也就是释放内存 当整个程序执行结束以后，全局环境最后才会弹出栈，也就是销毁了全局环境，释放全局环境占用的内存。<span class="token number">4</span>、预解析 预解释 声明提升  变量提升        a<span class="token punctuation">)</span>预解析演示                变量   带<span class="token keyword">var</span>和不带<span class="token keyword">var</span><span class="token operator">:</span> 预解析只会解析带<span class="token keyword">var</span>的变量，如果不带<span class="token keyword">var</span>，不进行预解析；   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        会变成下面这样        <span class="token keyword">var</span> a <span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span><span class="token number">10</span>                函数   字面量和表达式函数关系                    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            如果是这种写法；函数整体会提升                    <span class="token keyword">var</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   如果是这种写法；只会提升<span class="token keyword">var</span> f1<span class="token punctuation">;</span> 不会提升函数的表达式；b<span class="token punctuation">)</span>预解析效果全局 全局当中所有带<span class="token keyword">var</span>的变量  以及使用字面量定的函数  都要提升到全局的最上方 不提升值函数函数当中所有带<span class="token keyword">var</span>的变量，以及使用字面量定的函数  都要提升到这个函数的局部环境的最上方 <span class="token number">5</span>、 <span class="token constant">IIFE</span>，函数作为参数 <span class="token operator">&amp;</span> arguments <span class="token constant">IIFE</span><span class="token operator">:</span>意为立即调用的函数表达式（匿名函数自调用） 定义的时候就一起调用了，不会发生预解析       匿名函数自调用只能执行一次，通常用来做一些项目的初始化匿名函数通常可以做：<span class="token number">1</span>、封装代码实现，不把代码暴露出去<span class="token number">2</span><span class="token function">、可以防止外部的命名空间被污染</span>                                 <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 作用？函数是可以作为参数传递的（一般都是回调函数）回调函数定义：如果一个函数被当作参数传给另外一个函数，那么这个函数就被称作回调函数，虽然概念是这么定义的，但是真正的回调函数还要符合下面几个特点；如果不符合，我们不能称作是真正回调；                    回调函数：函数是我定义的   回调函数我传到另外一个函数中我没有调用    最终执行了                          事件          本来就是一个方法或者函数   写回调函数                          定时器                          ajax                          生命周期回调函数                        <span class="token comment">//把函数作为参数传到另外一个函数</span>                        <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token function">f1</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>Arguments  函数实参伪数组在每个函数当中，都会有一个实参的伪数组，这个东西是专门用来存储函数调用传过来的实参，即使你的函数定义当中没有形参，这个arguments当中也会存储你的实参；因此在js当中可以这么说，形参可有可无；    通常情况下我们可以根据这个arguments伪数组的长度去让一个函数表现出不同的功能，函数定义当中肯定是一个<span class="token keyword">if</span> <span class="token keyword">else</span>判断<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、Object实例对象"><a href="#九、Object实例对象" class="headerlink" title="九、Object实例对象"></a>九、Object实例对象</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">一  对象（一般外面说的对象是object的实例对象：万能的  通用的  可以表示任何事物的）  ​<span class="token function">不能说你随便给我创建一个对象里面随便写什么，一会狗一会人的，这个对象很不矜持。所以需要把对象更细化一下</span><span class="token punctuation">(</span>使用构造函数创建特定实例对象<span class="token punctuation">)</span><span class="token operator">-</span> 对象是<span class="token constant">JS</span>中的引用数据类型<span class="token operator">-</span> 对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性<span class="token operator">-</span> 使用<span class="token keyword">typeof</span>检查一个对象时，会返回object   基本数据类型和引用数据类型            <span class="token operator">-</span> 基本数据类型                String Number Boolean Null Undefined             以上这五种类型属于基本数据类型，以后我们看到的值，只要不是上边的五种，全都是对象            <span class="token operator">-</span> 引用数据类型                Object            <span class="token operator">-</span> 基本数据类型的数据，变量是直接保存的它的值。                变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。            <span class="token operator">-</span> 引用数据类型的数据，变量是保存的对象的引用（内存地址）。                如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。            <span class="token operator">-</span> 比较两个变量时，对于基本数据类型，比较的就是值，                对于引用数据类型比较的是地址，地址相同才相同 <span class="token number">1.</span>对象的概念在js当中，可以说一切皆对象；对象的概念： 无序的名值对的集合（键值对的集合）；   <span class="token number">2.</span>除了字符串、数字、<span class="token boolean">true</span>、<span class="token boolean">false</span>、<span class="token keyword">null</span>和<span class="token keyword">undefined</span>之外，<span class="token constant">JS</span>中的值都是对象。            如果存储一个简单的数据（一个数字，一个字符串）  直接<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>如果存储一堆的数据 此时我们想到数组  数组就是专门用来存储多个数据用的 <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>如果我们想要执行一段代码，或者让这段代码有功能，此时我们需要函数 <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>如果我想描述一个复杂的事物，比如说一个人，一台电脑（需要用到多个属性或者方法才能描述清楚），此时就要用到对象；                 <span class="token number">3.</span>对象的创建方法           a<span class="token punctuation">)</span>字面量创建  常用                    <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    name<span class="token operator">:</span><span class="token string">" 孙悟空"</span><span class="token punctuation">,</span>                    age<span class="token operator">:</span><span class="token number">18</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            b<span class="token punctuation">)</span>构造函数定义                <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'杨幂'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">" 孙悟空"</span><span class="token punctuation">;</span>                person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">4.</span>对象的操作及遍历（增删改查）              <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//相当于new object </span>                <span class="token comment">//增</span>                obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小黄"</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                obj<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"yellow"</span><span class="token punctuation">;</span> <span class="token comment">//和obj.color完全等价</span>                <span class="token comment">//如果用的是[]的方式，那么[]当中加引号是在往对象当中添加名或者键，如果不加[]就会被当做变量处理，没有定义这个变量就会报错</span>                <span class="token keyword">var</span> cry <span class="token operator">=</span> <span class="token string">"call"</span><span class="token punctuation">;</span>                obj<span class="token punctuation">[</span>cry<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 改</span>                <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"category"</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">;</span>  有则更改无则增加                obj<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"小黑"</span><span class="token punctuation">;</span>                obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"黑毛"</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 查</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 删</span>                <span class="token comment">// delete obj.category;</span>                <span class="token comment">// console.log(obj);</span>                遍历  <span class="token keyword">for</span> <span class="token keyword">in</span>循环进行遍历对象  遍历数组用<span class="token keyword">for</span>                 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">"car"</span><span class="token punctuation">,</span>                category<span class="token operator">:</span> <span class="token string">"劳斯莱斯"</span><span class="token punctuation">,</span>                color<span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>                money<span class="token operator">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span>                <span class="token comment">//把属于某个对象的函数称为方法</span>                <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑的很快"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//如果在遍历对象的时候，取值只能使用[]的方式，因为key是一个变量</span>                    <span class="token comment">//如果写成obj.key拿到的是undefined，key被认为是对象里面的属性</span>                    <span class="token comment">//obj[key] key被解析为变量，使用变量的值进行替换。</span>                <span class="token punctuation">&#125;</span>二<span class="token operator">:</span>  构造函数创建特定实例对象你想要创造人，就通过人去实例化，如果要创建猫就通过猫去实例化，而不是让人和狗通过object去实例化。<span class="token number">1.</span>构造函数的基本概念，使用，作用构造函数：本质上也是一个函数，只不过通常我们把构造函数的名字写成大驼峰；在js当中，没有类的概念（<span class="token constant">ES5</span>版本）<span class="token punctuation">,</span>构造函数可以理解为类；构造函数用法和普通的函数用法是一样的，直接可以调用，只不过它比普通函数多了一种用法  <span class="token keyword">new</span>一个构造函数可以对应很多对象，一个对象只有一个构造函数  创建两种构造函数 每个构造函数实例化<span class="token number">2</span>个对象  <span class="token keyword">function</span> <span class="token function">Singer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">//给对象设置属性</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>                  <span class="token comment">//给对象设置方法</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">Sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我什么都能唱"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">var</span> singer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singer</span><span class="token punctuation">(</span><span class="token string">"邓紫棋"</span><span class="token punctuation">,</span> <span class="token string">"famale"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singer1<span class="token punctuation">.</span><span class="token function">Sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>singer1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>singer1<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">var</span> singer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singer</span><span class="token punctuation">(</span><span class="token string">"张国荣"</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singer2<span class="token punctuation">.</span><span class="token function">Sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>singer2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>singer2<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">BlueCat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑的飞起呀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlueCat</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlueCat</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span>对<span class="token keyword">this</span>的讲解<span class="token keyword">this</span>其实通常情况下载任何函数当中都会有<span class="token keyword">this</span>这个关键字<span class="token keyword">this</span><span class="token function">本质其实是一个对象，代表着调用和这个函数或组方法的对象</span><span class="token punctuation">(</span>执行者<span class="token punctuation">)</span>不同场合<span class="token keyword">this</span>的指向不同在函数当中函数也可以叫做window对象的方法<span class="token punctuation">,</span>在全局作用域中<span class="token keyword">this</span>代表window在事件当中，回调函数当中的<span class="token keyword">this</span>，代表的是事件对象在对象的方法当中，<span class="token keyword">this</span>代表的是这个对象                使用call和apply调用时，<span class="token keyword">this</span>是指定的那个对象在构造函数当中，代表的是实例化出来的对象    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造函数通常是用来实例化对象用的，所以不会当作普通函数执行</span>    <span class="token keyword">var</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per1<span class="token punctuation">)</span><span class="token punctuation">;</span>、window对象简介  程序开始的时候，你一打开浏览器，浏览器当中所包含的一切全部都在window当中，浏览器窗口对象，代码执行的时候所有的一切都是包含在窗口对象下的。                        <span class="token number">3</span>、<span class="token keyword">new</span>关键字实例化对象的<span class="token number">1</span>、开辟内存空间<span class="token number">2</span>、<span class="token keyword">this</span>指向该内存<span class="token number">3</span>、执行函数<span class="token number">4</span>、生成对象实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">4</span>、 <span class="token function">原型对象</span><span class="token punctuation">(</span>prototype<span class="token punctuation">)</span>和原型链原型对象什么是原型对象               如果不用原型对象就会产生大量重复对象，很浪费空间所以就需要原型对象来做资源共享节省空间                                       <span class="token operator">-</span> 每创建一个函数以后，解析器都会默认在函数对象中添加一个prototype                               prototype属性指向的是一个对象，这个对象我们称为原型对象。                               原型对象默认是Object的实例对象                                                   <span class="token operator">-</span> 当函数作为构造函数使用，它所创建的对象中都会有一个隐含的属性执行该原型对象。                               这个隐含的属性可以通过对象<span class="token punctuation">.</span>__proto__来访问。                                   constructor：构造器 在指向自己的构造函数                                   prototype：指向原型对象  原型对象中会有constructor                                   _proto_ ：隐士原型对象  也会指向原型对象                                                                         <span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                       <span class="token punctuation">&#125;</span>                                       <span class="token keyword">let</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">// MyClass.prototype 显示原型</span>                                       <span class="token comment">// mc.__proto__ 隐士原型</span>                                                       <span class="token operator">-</span> 原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。                       我们可以将对象中共有的属性和方法统一添加到原型对象中，                       这样我们只需要添加一次，就可以使所有的对象都可以使用。                                           <span class="token operator">-</span> 当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，                           如果在自身中找到了，则直接使用。                           如果没有找到，则去原型对象中寻找，如果找到了则使用，                           如果没有找到，则去原型的原型中寻找，依此类推。直到找到Object的原型为止，Object的原型的原型为<span class="token keyword">null</span>，如果依然没有找到则返回<span class="token keyword">undefined</span>                                               <span class="token operator">-</span> <span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">-</span> 这个方法可以用来检查对象自身中是否含有某个属性                        <span class="token operator">-</span> 语法：对象<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"属性名"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">BlueCat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                       <span class="token comment">// 写到原型对象中</span>                       <span class="token class-name">BlueCat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑的飞起呀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">&#125;</span>                       <span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlueCat</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlueCat</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat2<span class="token punctuation">)</span><span class="token punctuation">;</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>BlueCat<span class="token punctuation">)</span><span class="token punctuation">;</span>原型对象的作用资源共享、节省空间就是把重复的东西，并且不要每个人都要有一份给单独抽离出来，放到一个公共空间，你用就去哪里找               原型链对象在查找属性或者方法的过程<span class="token function">对象在调用方法</span><span class="token punctuation">(</span>或者属性<span class="token punctuation">)</span>的时候，首先会从自己对象的空间去找，如果找到，就直接用如果没有找到，然后去自己的原型对象空间去找（自己的构造函数的原型对象），如果找到就用，如果没有找到，然后在去自己的原型对象的原型对象空间去找（自己的构造函数的原型对象的构造函数的原型对象中去找），如果找到就用，如果找不到继续向上，直接找到object的原型对象为止，找到就用，找不到报错。            <span class="token comment">/*           *           *    每个函数对象中都有一个属性叫做prototype           *       该属性指向的是一个对象，这个对象就是原型对象           *       如果函数作为普通函数调用，则原型对象(prototype)没有任何作用           *       如果函数作为构造函数调用，那么通过该构造函数所创建的对象中，           *         都会有一个隐含的属性(__proto__)指向函数的原型对象(prototype)           *           *     也就是说，该类的所有实例中都会有一个隐含属性指向构造函数的prototype           *         原型对象，就相当于一个公共的区域可以被所有的该类实例访问           *         可以将一些实例共有的属性或方法存储在原型对象中，           *         这样只需要设置一次即可让所有对象都可访问到该属性           *           *     当我们访问一个对象中的属性时，js会先在对象本身中寻找，如果找到了则直接使用           *         如果没有找到则去对象的原型(__proto__)寻找           *         找到则使用，如果没有找到则去原型的原型中寻找，           *         找到了则使用，如果没有找到以此类推..           *         知道找到object的原型，如果依然没有，则返回undefined，不会报错           *         这个搜索的过程称为原型链           * */</span>               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">5</span>、 <span class="token operator">-</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">这两个方法可以让一个对象使用另外一个对象的方法（也就是可以改变一个函数的执行对象），让一个实例对象去调用window的方法</span><span class="token punctuation">(</span>也就是我们所说的函数<span class="token punctuation">)</span><span class="token operator">-</span> 这两个方法都是函数对象的方法需要通过函数对象来调用<span class="token operator">-</span> 通过两个方法可以直接调用函数，并且可以通过第一个实参来指定函数中<span class="token keyword">this</span><span class="token operator">-</span> 不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递<span class="token keyword">function</span> <span class="token function">BlueCat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑的飞起呀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlueCat</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlueCat</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// window.add(10, 20);</span><span class="token comment">//把add的执行window改为了cat1，让cat1可以有求和的方法</span><span class="token comment">//apply的用法 两个参数：第一个参数代表改变的执行者（对象）</span><span class="token comment">//第二个参数是函数所需要的参数，这个参数必须是数组形式</span><span class="token comment">//语法：</span><span class="token comment">//函数或者方法.apply(对象.[函数的参数])</span><span class="token comment">//函数或者方法.call(对象,函数的参数1,函数的参数2)</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>cat1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>cat1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span>对象是哪个构造函数的实例判断 <span class="token keyword">instanceof</span><span class="token class-name">typeof</span> 应用的场景  这个在判断基本数据类型当中的数字、字符串、布尔、<span class="token keyword">undefined</span>、函数的时候可以派上用场，但是当我们使用<span class="token keyword">typeof</span>判断数组和对象以及<span class="token keyword">null</span>的时候区分不出来，此时我们需要知道的是这个数据是什么对象就无法解决了。<span class="token keyword">instanceof</span> 应用的场景                       主要是判断这个对象是否是构造函数的实例                       可以区分判断是一个数组对象还是一个其他构造函数的实例对象                       通过判断这个对象是哪个构造函数的实例对象，可以区分出来是数组还是其他对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">三 值类型，引用数据类型，堆， 栈 <span class="token number">1.</span>值类型和引用数据类型的概念（）                基本数据类型   number string boolean <span class="token keyword">undefined</span> <span class="token keyword">null</span>     引用数据类型   就是对象数据类型   object  数组对象  函数  内置工具对象    <span class="token number">2.</span> 堆和栈的概念        栈   数据结构 （栈）先进后出 桶 栈结构内存一般比较小，计算机自动分配内存，存取速度比较快         堆   数据结构（链表）  随意进出 堆结构内存一般比较大，底层是需要程序员自己分配（js做了封装，会自动分配）堆里面一般存储的都是一些比较复杂的占空间比较大的数据        队列   数据结构（队列）  先进先出    管道        堆和栈是内存的存数据结构，内存被开辟使用，就一定会被计算机回收（释放内存）；    <span class="token number">3.</span>值类型和引用数据类型与堆栈的关系（堆空间释放）；                堆空间的释放是靠垃圾回收机制进行的                当程序函数或者整个程序执行完成后，栈里面所有的东西都被释放销毁，堆当中的数据可能还在，只是没有任何的变量指向（引用）                那么堆当中的数据就会变成垃圾对象。回收机制会在适当的时候将垃圾对象清理回收；                如果我们在程序当中需要去删除对象，那么就将这个对象的变量赋值为<span class="token keyword">null</span>，代表这个对象引用被改变，这个对象也就成了垃圾对象                其实删除对象就是让堆当中的对象数据成为垃圾对象；四 内置对象<span class="token constant">JSON</span><span class="token number">1.</span>什么是json<span class="token punctuation">,</span>json作用 <span class="token constant">JSON</span>是js当中的一个内置对象，里面封装了对json格式数据的操作方法；json是一种数据格式，是前后端目前数据交互的主要格式（xml）json通常情况下说的是字符串也叫json串在前端json串的格式就是对象或者对象的数组，只不过要把这些数据转化成字符串形式；<span class="token number">2.</span><span class="token constant">JSON</span>对象的方法<span class="token operator">:</span> <span class="token function">parse</span><span class="token punctuation">(</span>json转换为对象<span class="token punctuation">)</span>， stringify（对象转字符串）            <span class="token comment">// 对象</span>            <span class="token keyword">var</span> dataTest <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">"初见"</span><span class="token punctuation">,</span>                age<span class="token operator">:</span> <span class="token number">18</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 对象数组</span>            <span class="token keyword">var</span> dataTestArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">"初见2"</span><span class="token punctuation">,</span>                age<span class="token operator">:</span> <span class="token number">19</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">"初见3"</span><span class="token punctuation">,</span>                age<span class="token operator">:</span> <span class="token number">20</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token comment">// 把对象json化  也就是字符串化 前端往后端传输数据，必须先把数据封装为对象</span>        然后在转换为json传，是为把前端json对象或者是对象数组转换为json字符串        <span class="token keyword">var</span> dataStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dataTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> dataStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dataTestArr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// json转成对象  后端传过来的json数据我要转换为前端的对象或者对象数组进行处理</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">;</span> 五 Math工具对象<span class="token operator">-</span> Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法我们可以直接使用它来进行数学运算相关的操作<span class="token operator">-</span> 方法：Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">-</span> 常量，圆周率Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 绝对值运算Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 向上取整Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 向下取整Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 四舍五入取整Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 生成一个<span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span>之间的随机数<span class="token operator">-</span> 生成一个x<span class="token operator">-</span>y之间的随机数Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-</span> 求x的y次幂Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 对一个数进行开方Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 求多个数中最大值Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 求多个数中的最小值六 Date日期对象 <span class="token number">1.</span>日期的对象，在<span class="token constant">JS</span>中通过Date对象来表示一个时间     <span class="token operator">-</span> 创建对象         创建一个当前的时间对象           <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         创建一个指定的时间对象           <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"月/日/年 时:分:秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">-</span> 方法：        <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span> 当前日期对象是几日（<span class="token number">1</span><span class="token operator">-</span><span class="token number">31</span>）        <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token operator">-</span> 返回当前日期对象时周几（<span class="token number">0</span><span class="token operator">-</span><span class="token number">6</span>）                <span class="token operator">-</span> <span class="token number">0</span> 周日                <span class="token operator">-</span> <span class="token number">1</span> 周一         <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span> 返回当前日期对象的月份（<span class="token number">0</span><span class="token operator">-</span><span class="token number">11</span>）            <span class="token operator">-</span> <span class="token number">0</span> 一月 <span class="token number">1</span> 二月 。。。        <span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 从 Date 对象以四位数字返回年份。         <span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回 Date <span class="token function">对象的小时</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">23</span><span class="token punctuation">)</span>。         <span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回 Date <span class="token function">对象的分钟</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">59</span><span class="token punctuation">)</span>。         <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回 Date <span class="token function">对象的秒数</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">59</span><span class="token punctuation">)</span>。         <span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回 Date <span class="token function">对象的毫秒</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">999</span><span class="token punctuation">)</span>。         <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">-</span> 返回当前日期对象的时间戳                <span class="token operator">-</span> 时间戳，指的是从<span class="token number">1970</span>年月<span class="token number">1</span>日 <span class="token number">0</span>时<span class="token number">0</span>分<span class="token number">0</span>秒，到现在时间的毫秒数                        计算机底层保存时间都是以时间戳的形式保存的。    Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-</span> 可以获取当前代码执行时的时间戳七、包装对象基本数据类型也可以使用<span class="token punctuation">.</span>调用方法<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//包装对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span>tostring a显然是一个对象，才会有方法调用，但是a定义的时候是一个基本数据类型，他是没有方法的，但是js当中基本数据类型操作的时候会有一个规定，当调用数字、字符串、布尔值的方法的时候，会首先把这个值包装成对象，这个对象是临时的，然后进行调用包装对象的方法，调用完成之后，临时的包装对象会立即清除    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、ES5-ES6-String-Array方法"><a href="#十、ES5-ES6-String-Array方法" class="headerlink" title="十、ES5/ES6 String/Array方法"></a>十、ES5/ES6 String/Array方法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">一  <span class="token constant">ES5</span>严格模式 <span class="token operator">+</span> <span class="token constant">ES6</span><span class="token function">定义变量</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token operator">+</span> <span class="token keyword">const</span><span class="token punctuation">)</span>（了解）<span class="token constant">ES5</span>增加了严格模式严格模式？语法更严谨    为什么要使用严格模式？消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为<span class="token punctuation">;</span>消除代码运行的一些不安全之处，保证代码运行的安全；提高编译器效率，增加运行速度；为未来新版本的Javascript做好铺垫。严格模式主要都做了什么？怎么玩？<span class="token number">1</span>、“use strict” 针对脚本（针对所有）写在脚本的第一行，只针对函数写在函数的体的第一行<span class="token number">2</span>、变量声明必须写<span class="token keyword">var</span>，不写<span class="token keyword">var</span>报错<span class="token number">3</span>、禁止<span class="token keyword">this</span>指向window<span class="token punctuation">,</span>如果构造函数忘记写<span class="token keyword">new</span>那么<span class="token keyword">this</span>不会影响全局<span class="token number">4</span>、禁止随意删除变量<span class="token number">5</span>、函数不能有重复的参数；<span class="token keyword">let</span>使用及特点块级作用域声明变量      es6都是处于严格模式下的<span class="token keyword">let</span>定义的变量不会进行预解析<span class="token keyword">let</span>变量不允许重复定义<span class="token keyword">const</span>使用及特点声明一个变量，变量的值无法更改，也是块级作用<span class="token keyword">const</span>定义的变量不可以修改，而且必须初始化二  String方法 <span class="token constant">ES5</span>字符串方法返回的都是一个新字符串，和原来的字符串没关系<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'1*234567890123A'</span><span class="token punctuation">;</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 根据索引获取指定的字符<span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//默认从0位置开始查找‘2’，第二个参数可以指定从哪开始,返回子串在字符串中的位置</span>length：直接返回字符串的长度<span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 可以将字符串中和正则表达式匹配的内容提取出来<span class="token operator">-</span> 参数：<span class="token operator">-</span> 正则表达式，可以根据该正则表达式将字符串中符合要求的内容提取出来并且封装到一个数组中返回<span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 可以根据指定内容将一个字符串拆分为一个数组<span class="token operator">-</span> 参数：<span class="token operator">-</span> 需要一个字符串作为参数，将会根据字符串去拆分数组可以接收一个正则表达式，此时会根据正则表达式去拆分数组<span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">和slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>基本一致，不同的是它第二个参数不是索引，而是截取的数量<span class="token function">substring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">和slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为<span class="token number">0</span>，                <span class="token function">substring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>中如果第二个参数小于第一个，自动调整位置<span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 将字符串转换为小写并返回<span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 将字符串转换为大写并返回console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拿字符串的值</span>三  string方法 <span class="token constant">ES6</span><span class="token number">1.</span><span class="token function">includes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否包含指定的字符串<span class="token number">2.</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否以指定字符串开头<span class="token number">3.</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否以指定字符串结尾四 Array方法 <span class="token constant">ES5</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果不传参，会按照unicode吗进行比较排序</span>            <span class="token comment">// console.log(arr); //排序也会影响原数组，在原数组上进行排序</span>            <span class="token comment">//如果传参数，需要传递回调函数</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//按照从小到大排序（第一个参数-第二个参数返回值）</span>                <span class="token comment">//按照从大到小排序(第二个参数-第一个参数返回值)</span>                <span class="token comment">//排序是在原数组上进行的</span>                简单点就是：比较函数两个参数a和b，返回a<span class="token operator">-</span>b 升序，返回b<span class="token operator">-</span>a 降序    <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span> 可以用来反转一个数组，它会对原数组产生影响    <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span> 可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回<span class="token operator">-</span> String也有一个concat方法 拼接字符串    <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span> 可以将一个数组转换为一个字符串            <span class="token operator">-</span> 参数：                需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素                如果不指定连接符则默认使用五 Array方法 <span class="token constant">ES5</span><span class="token number">1.</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> 从前往后找，返回第一次找到的位置，第二个参数可以指定从哪开始找<span class="token number">2.</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> 从后往前找，返回第一次找到的位置，第二个参数可以指定从哪开始找<span class="token number">3.</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">:</span> 遍历数组<span class="token number">4.</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">:</span> 遍历数组返回一个新的数组，返回加工之后的值<span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。<span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法按照原始数组元素顺序依次处理元素。注意： <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不会对空数组进行检测。注意： <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 不会改变原始数组。所有的方法都要注意三要素；功能、参数、返回值<span class="token number">5.</span>fliter：遍历过滤出一个新的子数组，返回条件作为<span class="token boolean">true</span>的值<span class="token function">箭头函数</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>返回值 <span class="token parameter">参数</span><span class="token operator">=></span><span class="token function">返回值</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token comment">// function sum(a, b) &#123;</span>            <span class="token comment">//   return a + b;</span>            <span class="token comment">// &#125;</span>            <span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token comment">// console.log(sum(123,455));</span>            <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token string">"猪八戒"</span><span class="token punctuation">,</span> <span class="token string">"沙和尚"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// arr.forEach(function (element) &#123;</span>            <span class="token comment">//   console.log(element);</span>            <span class="token comment">// &#125;)</span>            arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、-DOM上"><a href="#十一、-DOM上" class="headerlink" title="十一、 DOM上"></a>十一、 DOM上</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** DOM:文档对象模型*         文档：文档指的就是整个网页*         对象：DOM将网页中的所有的东西都转换为了对象*         模型：用来体现节点之间的关系***     网页由三个部分组成*         结构 HTML*         表现 css*         行为 js*     DOM中为我们提供了大量的对象，使我们可以通过js对网页进行操作**     节点(Node):*         节点是构成我们网页的最基本的组成部分，网页中的每一个部分都可以称为是一个节点。*         html标签、属性、文本、注释、整个文档等都是一个节点。**     常用节点分为四类*        – 文档节点：表示整个网页*        – 元素节点：各种标签都属于元素节点 html、body  标签就是元素 元素就是标签*        – 属性节点：标签中的属性称为属性节点  charset="UTF-8"  lang="zh"*        – 文本节点：标签中的文字就称为文本节点* */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>模型</p><img src="../img/js/image-20210610173815204.png"  style="zoom:67%;" /><p>节点</p><img src="../img/js/image-20210610174224671.png"  style="zoom:67%;" /><p>​             节点Node，是构成我们网页的最基本的组成部分，网页中的每一个部分都可以称为是一个节点。<br>​                    • 比如：html标签、属性、文本、注释、整个文档等都是一个节点。<br>​                    • 虽然都是节点，但是实际上他们的具体类型是不同的。<br>​                    • 比如：标签我们称为元素节点、属性称为属性节点、文本称为文本节点、文档称为文档节点。<br>​                    • 节点的类型不同，属性和方法也都不尽相同。</p><p>常用节点分为四类<br>                – 文档节点：整个HTML文档<br>                – 元素节点：HTML文档中的HTML标签<br>                – 属性节点：元素的属性<br>                – 文本节点：HTML标签中的文本内容</p><p>文档节点（document）</p><p>​            • 文档节点document，代表的是整个HTML文档，网页中的所有节点都是它的子节点。<br>​            • document对象作为window对象的属性存在的，我们不用获取可以直接使用。<br>​            • 通过该对象我们可以在整个文档访问内查找节点对象，并可以通过该对象创建各种节点对象。</p><p>元素节点（Element）</p><p>​            • HTML中的各种标签都是元素节点，这也是我们最常用的一个节点。<br>​            • 浏览器会将页面中所有的标签都转换为一个元素节点，我们可以通过document的方法来获取元素节点。<br>​            • 比如：<br>​                    – document.getElementById()<br>​                    – 根据id属性值获取一个元素节点对象。</p><p>文本节点（Text）</p><p>​            • 文本节点表示的是HTML标签以外的文本内容，任意非HTML的文本都是文本节点。<br>​            • 它包括可以字面解释的纯文本内容。<br>​            • 文本节点一般是作为元素节点的子节点存在的。<br>​            • 获取文本节点时，一般先要获取元素节点。在通过元素节点获取文本节点。<br>​            • 例如：<br>​                        – 元素节点.firstChild;<br>​                        – 获取元素节点的第一个子节点，一般为文本节点</p><p>属性节点（Attr）</p><p>​            • 属性节点表示的是标签中的一个一个的属性，这里要注意的是属性节点并非是元素节点的子节点，而是元素节点的一部分。<br>​            • 可以通过元素节点来获取指定的属性节点。<br>​            • 例如：<br>​                    – 元素节点.getAttributeNode(“属性名”);<br>​            • 注意：我们一般不使用属性节点。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">一、<span class="token constant">DOM</span>概念和操作方式  一切皆对象；         <span class="token number">1.</span><span class="token constant">DOM</span>概念，作用，顶级对象              <span class="token constant">DOM</span> 文档对象模型                <span class="token constant">DOM</span>是一个使程序和脚本有能力动态地访问和更新文档的内容、结构以及样式的平台和语言中立的接口。              <span class="token constant">DOM</span>描述了处理网页内容的方法和接口               window是浏览器窗口对象，所有的东西都被当作是window的子对象              <span class="token constant">JS</span>中通过<span class="token constant">DOM</span>来对<span class="token constant">HTML</span>文档进行操作。只要理解了<span class="token constant">DOM</span>就可以随心所欲的操作<span class="token constant">WEB</span>页面。              文档对象document是window下的一个属性  代表整个<span class="token constant">DOM</span>文档对象              <span class="token function">节点</span> <span class="token punctuation">(</span><span class="token function">元素</span><span class="token punctuation">(</span>也叫标签<span class="token punctuation">)</span> 属性、文本、注释              元素 head<span class="token operator">/</span>body标签<span class="token keyword">class</span><span class="token operator">/</span>id  <span class="token operator">&lt;</span>p标签<span class="token operator">></span>              根元素（root）   html标签              <span class="token function">文档树</span><span class="token punctuation">(</span>dom树<span class="token punctuation">)</span>以<span class="token constant">HTML</span>为根节点  形成的一棵倒立的树状结构，我们称作<span class="token constant">DOM</span>树；              这个树上所有的东西都叫节点，节点有很多类              这些节点如果我们通过<span class="token constant">DOM</span>方法去获取或者其它的操作去使用的化，就叫<span class="token constant">DOM</span>对象                • 文档                – 文档表示的就是整个的<span class="token constant">HTML</span>网页文档                • 对象                – 对象表示将网页中的每一个部分都转换为了一个对象。                • 模型                – 使用模型来表示对象之间的关系，这样方便我们获取对象。                         <span class="token number">2.</span>window<span class="token punctuation">.</span>onload  页面加载完成事件                 一般情况我们都是等待页面加载完成之后才去操作dom元素                 如果页面没有加载完成就去获取dom元素，有可能获取不到；                window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token punctuation">&#125;</span>等待页面加载完成，执行函数当中的代码；                                <span class="token comment">// 页面加载完成</span>                window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 事件源 要获取</span>                <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//绑定点击事件</span>                btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完成点击了~"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>二、获取<span class="token constant">DOM</span>对象，操作<span class="token constant">DOM</span>对象，事件绑定，操作元素属性<span class="token number">1.</span> document<span class="token punctuation">.</span>getElementById这个是document下的一个方法，通过id获取到相关元素  封装为dom对象返回如果没有id没办法获取<span class="token number">2.</span>点击事件事件三要素    事件源 （承受事件的对象）   事件       事件处理回调函数事件处理三大步获取事件源<span class="token constant">DOM</span>对象           添加事件监听   书写处理回调事件写好之后可以重复触发执行；<span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>点我加数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">3.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>属性<span class="token punctuation">,</span>设置的值<span class="token punctuation">)</span><span class="token function">和getAttribute</span><span class="token punctuation">(</span>要获取的属性<span class="token punctuation">)</span>的用法在操作元素数据的时候，<span class="token punctuation">.</span>语法只能操作元素天生具有的属性，如果是自定义属性，通过<span class="token punctuation">.</span>语法是操作不了的。只能通过setAttribute和getAttribute来操作。setAttribute和getAttribute是通用的方法，无论是元素天生的还是自定义的都可以操作三、 循环绑定事件<span class="token operator">+</span>操作元素内容，操作元素内容获取元素节点• 通过document对象调用                <span class="token number">1.</span> <span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 – 通过id属性获取一个元素节点对象                <span class="token number">2.</span> <span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  – 通过标签名获取一组元素节点对象                <span class="token number">3.</span> <span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 – 通过name属性获取一组元素节点对象              上面三个有局限性，拿元素的时候只能通过指定的属性去拿获取元素节点的子节点            • 通过具体的元素节点调用                <span class="token number">1.</span> <span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                – 方法，返回当前节点的指定标签名后代节点                <span class="token number">2.</span> childNodes                – 属性，表示当前节点的所有子节点                <span class="token number">3.</span> firstChild                – 属性，表示当前节点的第一个子节点                <span class="token number">4.</span> lastChild                – 属性，表示当前节点的最后一个子节点获取父节点和兄弟节点            • 通过具体的节点调用                <span class="token number">1.</span> parentNode                – 属性，表示当前节点的父节点                <span class="token number">2.</span> previousSibling                – 属性，表示当前节点的前一个兄弟节点                <span class="token number">3.</span> nextSibling                 – 属性，表示当前节点的后一个兄弟节点        其他属性            • nodeValue            – 文本节点可以通过nodeValue属性获取和设置文本节点的内容            • innerHTML            – 元素节点通过该属性获取和设置标签内部的html代码使用<span class="token constant">CSS</span>选择器进行查询  •document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>选择器<span class="token punctuation">)</span>  常用•document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>选择器<span class="token punctuation">)</span>常用• 这两个方法都是用document对象来调用，两个方法使用相同，都是传递一个选择器字符串作为参数，方法会自动根据选择器字符串去网页中查找元素。• <span class="token function">不同的地方是querySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">只会返回找到的第一个元素，而querySelectorAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>会返回所有符合条件的元素。querySelect 专门用来获取选择器只有一个元素<span class="token punctuation">;</span>返回的是单个元素对象querySelectAll专门用来获取选择器选中多个元素。返回也是数组    <span class="token number">4.</span> textContent  innerHtml  innerText 操作内容三种方式    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pp"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pp"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pp"</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pp"</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> pList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> pList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"哈哈"</span><span class="token punctuation">;</span><span class="token comment">// pList[j].innerText = "嘿嘿";</span><span class="token comment">// pList[j].textContent = "啦啦啦";</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  innerHtml   innerText  之间的区别：设置内容的时候，如果内容当中包含标签字符串   innerHtml会有标签的特性，也就是说标签会在页面上生效如果内容当中包含标签字符串   innerText会把标签原样展示在页面上，不会让标签生效读取内容的时候，如果标签内部还有其它标签，innerHtml会把标签内部带着其它的标签全部输出如果标签内部还有其它标签，innerText只会输出所有标签里面的内容或者文本，不会输出标签如果标签内部没有其它标签，他们两个一致；都是读取文本内容，innerHtml会带空白和换行textContent及innerText的区别・textContent 可以获取隐藏元素的文本，包含换行和空白・innerText 不可以获取，并且不包含换行和空格 常用四、 兼容性封装设置读取内容函数<span class="token number">1.</span>浏览器兼容性讲解浏览器有很多：chrome和火狐   <span class="token constant">IE</span>   Opera  safari  浏览器最终分为两个阵营： 高级浏览器和<span class="token constant">IE</span>低版本浏览器   <span class="token constant">IE8</span>是分水岭innerText   什么浏览器都认识textContent   只有高级浏览器认识  <span class="token constant">IE</span>低版本不认识console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>  当我们的用户既存在使用高级浏览器的也有使用<span class="token constant">IE</span>低版本的，那么此时，如果想要使用textContent 必须兼容性处理<span class="token number">2.</span>textContent及innerText的区别・textContent 可以获取隐藏元素的文本，包含换行和空白・innerText 不可以获取隐藏元素的文本，并且不包含换行和空格querySelect专门用来获取选择器选中只有一个元素；返回的是单个元素dom对象<span class="token punctuation">;</span>querySelectAll专门用来获取选择器选中多个元素，返回也是数组；五、 鼠标事件 <span class="token operator">+</span> style样式操作，操作元素样式<span class="token number">1.</span>鼠标事件<span class="token operator">:</span>      <span class="token function">onmousemove</span><span class="token punctuation">(</span>鼠标移动<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">onmouseover</span><span class="token punctuation">(</span>鼠标移入<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">onmouseout</span><span class="token punctuation">(</span>鼠标移出<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">onmounseenter</span><span class="token punctuation">(</span>鼠标进入<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">onmouseleave</span><span class="token punctuation">(</span>鼠标离开<span class="token punctuation">)</span><span class="token operator">/</span>  主要是用这一对    <span class="token function">onclick</span><span class="token punctuation">(</span>鼠标点击<span class="token punctuation">)</span><span class="token operator">/</span>onmousedown<span class="token operator">/</span>onmouseup<span class="token operator">/</span>  类是用来写css的 <span class="token function">，id是用来写js的</span><span class="token punctuation">(</span>很少用<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、DOM下"><a href="#十二、DOM下" class="headerlink" title="十二、DOM下"></a>十二、DOM下</h2><p>​        一、keyup &amp; keydown &amp; focus(获取焦点事件) &amp; blur<br>​                1.  keyup，keydown(键盘)事件       一般用的都是keyup事件，它能够确保键盘事件只执行一次；<br>​                2.    keycode     存在于事件对象当中，也就是我们回调函数的第一个形参；这个对象不是我们创建，当事件发生的时候，系统会创建好<br>​                这个事件对象，并且传参调用；事件对象当中包含了和事件相关的一切；</p><h2 id="十三、-节点"><a href="#十三、-节点" class="headerlink" title="十三、 节点"></a>十三、 节点</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">第一节<span class="token operator">:</span>  节点的概念和操作什么是节点  文档树所有包含的东西都可以称作节点；最关注的是元素节点查找节点是相对的操作；如果你拿html的子节点<span class="token punctuation">,</span>就是html当中所有的节点但是不包含后代节点，只是子节点    节点的分类<span class="token number">12</span>种，重点了解<span class="token number">3</span>种   元素   文本    属性    注释第二节<span class="token operator">:</span>  子节点和子元素（父节点和父元素）子节点和子元素childNodes拿到的是某个元素的子节点：包括元素子节点和文本子节点，如果有注释还有注释节点； 子节点<span class="token operator">:</span><span class="token function">childNodes</span> <span class="token punctuation">(</span>儿子节点<span class="token punctuation">)</span><span class="token operator">:</span>高级浏览器<span class="token operator">:</span> 元素<span class="token punctuation">,</span><span class="token function">文本</span><span class="token punctuation">(</span>文本<span class="token punctuation">,</span>空格<span class="token punctuation">,</span>换行<span class="token punctuation">)</span><span class="token punctuation">,</span>注释低版本浏览器<span class="token operator">:</span> 元素<span class="token punctuation">,</span><span class="token function">文本</span><span class="token punctuation">(</span>不包括空格和换行<span class="token punctuation">)</span><span class="token punctuation">,</span>注释子元素 <span class="token function">children</span><span class="token punctuation">(</span>儿子元素<span class="token punctuation">)</span><span class="token operator">:</span>  高级浏览器<span class="token operator">:</span>元素  低版本浏览器<span class="token operator">:</span>元素<span class="token punctuation">,</span>注释console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿的是儿子节点</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿的是儿子元素</span>      父节点和父元素parentNodeparentElement父节点<span class="token operator">:</span>parentNode <span class="token function">其实就是父元素</span><span class="token punctuation">(</span>标签<span class="token punctuation">)</span> 获取父亲节点 所有浏览器都能使用父元素<span class="token operator">:</span>parentElement 父标签   获取父亲元素 所有浏览器都能用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">第三节<span class="token operator">:</span>  兼容性封装获取其它节点的方式获取其它节点：第一个子节点        高级浏览器和低级浏览器都认识   firstChild第一个子元素节点    只有高级浏览器可以使用  firstElementChild最后一个子节点        高级浏览器和低级浏览器都认识   lastChild最后一个元素节点    只有高级浏览器可以使用  lastElementChild上一个兄弟节点      高级浏览器和低级浏览器都认识  previousSibling上一个兄弟元素节点  只有高级浏览器可以使用 previousElementSibling下一个兄弟节点      高级浏览器和低级浏览器都认识 nextSibling下一个兄弟元素节点  只有高级浏览器可以使用  nextElementSibling第四节<span class="token operator">:</span>  创建节点的方式Document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'想要创建的元素名'</span><span class="token punctuation">)</span> 元素对象<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>被追加的元素对象<span class="token punctuation">)</span><span class="token punctuation">;</span>第五节<span class="token operator">:</span>  节点常用方法 以下方法都是父元素调用<span class="token punctuation">,</span>操作子元素• 创建节点               – document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>标签名<span class="token punctuation">)</span>               • 删除节点               – 父节点<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>子节点<span class="token punctuation">)</span>               • 替换节点               – 父节点<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>新节点 <span class="token punctuation">,</span> 旧节点<span class="token punctuation">)</span>               • 插入节点               – 父节点<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>子节点<span class="token punctuation">)</span>               – 父节点<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>新节点 <span class="token punctuation">,</span> 旧节点<span class="token punctuation">)</span>节点<span class="token punctuation">.</span>remove（pc端 ie不支持） <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十四、-BOM"><a href="#十四、-BOM" class="headerlink" title="十四、 BOM"></a>十四、 BOM</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">第一节<span class="token operator">:</span>  事件绑定和解绑（要对应）  <span class="token constant">DOM</span> <span class="token number">0</span> <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span> dom <span class="token number">0</span>  和 dom2   有自己独立的事件绑定和解绑方式               dom0事件所有的浏览器都可以使用               dom2事件 <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  高级浏览器可以使用                  ie10以下的不能使用，<span class="token constant">IE10</span>以下给出了另外一种绑定方式；               dom1和dom3 没有  Dom0事件绑定和解绑  pc端用的多  dom0事件解绑  本质上就是把事件函数和事件对象的事件属性断开指向；  box<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> Dom2事件绑定和解绑   移动端用的多 可以添加同一类事件多次 高级浏览器和ie绑定方式（兼容封装）第二节<span class="token operator">:</span>  事件流（事件传播）<span class="token number">1.</span> 冒泡事件流（ie） 最终我们所用的事件传播都是冒泡<span class="token number">2.</span> 标准<span class="token constant">DOM</span>事件流   这个是我们现用的最标准的事件流，里面包含两个阶段：获取元素  然最后冒泡这个两个阶段当中的冒泡可以由程序员自己选择。但是通常情况我们都是使用默认 （冒泡）；第三节<span class="token operator">:</span>  事件冒泡和事件委派阻止事件冒泡事件冒泡的好处就是可以进行事件委派（事件委托，事件代理）事件委托用法，什么时候用：出现新添加的东西，并且新添加的东西要和老的拥有同样的行为；此时我们就想事件委派；事件委派的做法： 给爹添加事件，不给元素本身添加，事件发生后通过爹去找，真正发生事件的元素进行处理；好处，原理onmouseenter onmouseleave   如果是一个父子元素模型，对父元素添加移入和移出，当鼠标移入父元素里面的子元素的时候，事件并没有移出然后再移入。也就是说事件元素没有切换；onmouseover onmouseout 这两对之间的区别如果是一个父子元素模型，对父元素添加移入和移出，当鼠标移入父元素里面的子元素的时候，事件会移出然后再移入。也就是说事件元素会有切换；事件委派的时候，必须使用这一对；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">第四节<span class="token operator">:</span>  window对象是bom的顶级对象• ECMAScript无疑是JavaScript的核心，但是要想在浏览器中使用JavaScript，那么<span class="token constant">BOM</span>（浏览器对象模型）才是真正的核心。• <span class="token constant">BOM</span> 提供了很多对象，用于访问浏览器的功能，这些功能与任何网页内容无关。• <span class="token constant">BOM</span>将浏览器中的各个部分转换成了一个一个的对象，我们通过修改这些对象的属性，调用他们的方法，从而控制浏览器的各种行为。<span class="token number">1.</span>  window对象概念，使用<span class="token keyword">function</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2.</span>  location  window<span class="token punctuation">.</span>location可以让用户获取当前页面地址以及重定向到一个新的页面。    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href   可以读也可以写，写的时候相当于转向另外一个页面history   对象包含浏览器的历史记录，window可以省略。这些历史记录以栈（<span class="token constant">FIFO</span>）的形式保存。页面前进则入栈，页面返回则出栈。navigator 是一个只读对象，它用来描述浏览器本身的信息，包括浏览器的名称、版本、语言、系统平台、用户特性字符串等信息。 screen    提供了用户显示屏幕的相关属性，比如显示屏幕的宽度、高度，可用宽度、高度。<span class="token number">3.</span>   window<span class="token punctuation">.</span>onload window<span class="token punctuation">.</span>onresize   <span class="token comment">//浏览器窗口发生改变，就会执行这个事件；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">第五节<span class="token operator">:</span>  event 对象<span class="token number">1.</span>  event概念，作用系统给我们封装的，任何事件都会有这个event对象，就是回调函数的第一个形参；<span class="token number">2.</span>  event兼容性处理<span class="token number">3.</span>  event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement作用<span class="token number">4.</span>  clientX <span class="token operator">&amp;</span> clientY     拿的是鼠标相对视口的 水平距离和垂直距离   相对的是视口的左上角（以视口左上角为原点）pageX pageY           拿的是鼠标相对页面的 水平距离和垂直距离   相对的是页面的左上角（以页面左上角为原点） offsetX   offsetY     拿的是鼠标相对自身元素的 水平距离和垂直距离   相对的是自身元素左上角（以自身元素左上角为原点）十五、定时器一  定时器基本使用 <span class="token operator">+</span> 案例 （定时器操作是异步的）单次定时器： 一般用来做延迟效果   定时炸弹 <span class="token operator">&lt;</span>button<span class="token operator">></span>点击清除定时器<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 单次定时器  也叫延迟定时器 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// setTimeout是延迟定时器，是window下的一个全局方法，两个参数</span><span class="token comment">// 第一个：回调函数，也就是到时间你想干嘛</span><span class="token comment">// 第二个：时间，这个时间是毫秒为单位</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token comment">// 清楚单次定时器</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>多次定时器： 和循环类似    闹钟案例  每隔<span class="token number">3</span>秒打印i love you<span class="token operator">!</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 设置多次定时器</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num<span class="token operator">++</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i love you !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清除多次定时器</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>​二 元素的大小和位置 ​Offset系列    只读 ​offsetWidth      拿的是盒子   内容 <span class="token operator">+</span> padding <span class="token operator">+</span> border的宽；​offsetHeight    拿的是盒子   内容 <span class="token operator">+</span> padding <span class="token operator">+</span> border的高；​​offsetLeft       拿的是元素的偏倚量：可以认为就是拿的定位left值​offsetTop        拿的是元素的偏倚量：可以认为就是拿的定位top值​​  Client系列    只读​clientWidth      拿的是盒子   内容 <span class="token operator">+</span> padding的宽；​clientHeight     拿的是盒子   内容 <span class="token operator">+</span> padding的高；​clientLeft       拿的是盒子左边框大小；clientTop        拿的是盒子上边框大小；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">视口宽高求法   document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidthdocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeightScroll系列scrollWidth   只读  <span class="token comment">//当内容比盒子小的时候，拿的是盒子的clientWidth</span><span class="token comment">//当内容比盒子大的时候，拿的是内容的offsetWidth + 盒子的一侧内边距； </span>scrollHeight  只读<span class="token comment">//当内容比盒子小的时候，拿的是盒子的clientHeight</span><span class="token comment">//当内容比盒子大的时候，拿的是内容的offsetHeight + 盒子的一侧内边距；</span>scrollTop     可写<span class="token comment">//拿的是盒子内容向上滚动的距离</span>scrollLeft    可写<span class="token comment">//拿的是盒子内容向左滚动的距离</span>元素的大小：宽和高的获取；以后我们拿元素的宽和高 先看元素有没有边框   如果没有边框    那么clientWidth和offsetWidth是一样的如果有边框，看你需要不，需要的话就用offsetWidth 不需要就用clientWidth<span class="token punctuation">;</span>scrollWidth几乎不用；三  初始包含块及系统滚动条的控制    html和body这两个元素overflow的scroll属性，控制着系统的滚动条    系统的滚动条有两个，一个是body身上的  一个是document身上的。我们平时看到的那个滚动条    是document身上的。，如果我们想要控制系统滚动条哪个显示哪个关闭分以下情况：    <span class="token number">1</span>、单独的给body或者html 设置overflow<span class="token operator">:</span>scroll  滚动条打开的全部都是document的    <span class="token number">2</span>、如果两个元素同时设置overflow属性，body设置的是scroll<span class="token punctuation">,</span>html设置是hidden<span class="token punctuation">,</span>那么    document的滚动条被关闭，body身上的滚动条会打开。相反，body身上被关闭，document身上的被打开。    <span class="token number">3</span>、如果两个元素同时设置overflow<span class="token operator">:</span>hidden；那么系统的两个滚动条全部被关闭；    <span class="token number">4</span>、如果两个都设置overflow<span class="token operator">:</span>scroll<span class="token punctuation">,</span>那么html会打开document身上的，而body会打开自己身上的滚动条；    由此我们也引出如何禁止系统的滚动条：html<span class="token punctuation">,</span>body<span class="token punctuation">&#123;</span>height<span class="token operator">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    <span class="token comment">//这个属性加上只是为了让设置的overflow:hidden;更有说服力，只有内容超出才会被掩藏或者出现滚动条</span><span class="token comment">//如果不设置，那么body和html高度将由内容自动撑开，也就是说body当中的内容永远不会溢出。</span>overflow<span class="token operator">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>四  案例：<span class="token number">1</span>、拖拽的原理（画图）点击元素拿到元素的初始位置和鼠标的初始位置移动的时候拿到鼠标最后的位置，可以求出鼠标的距离差元素最终的位置 <span class="token operator">=</span> 元素的初始位置 <span class="token operator">+</span> 鼠标的距离差  注意： 两个方向都要去照顾；<span class="token number">2</span>、pc拖拽事件的问题事件在谁身上添加？刚开始我们把所有事件全部添加在元素身上；元素事件是怎么去加，全部平行的去加还是嵌套加，思考过程；move事件在鼠标Up之后不会自动消失；在up事件当中需要将鼠标的move事件和up事件一起取消掉；当在元素内部我们有文本，文本可以拖拽，所以要取消浏览器的默认行为；取消默认行为之后，发现ie的默认拖拽还是会存在，证明ie的默认行为不包含这个拖拽的，所以我们要进行全局捕获；box<span class="token punctuation">.</span>setCapture <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">.</span><span class="token function">setCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当鼠标点击元素之后，把鼠标的后序事件全部捕获到该元素身上。</span>box<span class="token punctuation">.</span>releaseCapture<span class="token operator">&amp;&amp;</span> box<span class="token punctuation">.</span><span class="token function">releaseCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 鼠标的事件全局捕获，有添加就要有释放，否则后序点击任何地方都相当于在点击box​接着我们快速的去拖动元素，当鼠标移出元素，再次回去的时候，元素的move事件仍然存在；那么我们就该考虑事件添加是否有问题；​拖拽当中mousedown的事件确实给元素添加，但是mousemove和mouseup事件要添加在父元素身上，使用事件冒泡去解决元素的移动​并且鼠标移出元素的时候，我们的事件仍然有效；​​<span class="token number">3</span>、在基础的拖拽事件上添加边界问题​当元素在四周的时候，不能超出范围，做出范围界定；​​<span class="token number">4</span>、当元素距离四周边界<span class="token number">50</span>px时候立即吸附到边界（吸附效果）​<span class="token number">5</span>、元素碰撞问题（九宫格）计算元素到视口上方和左边的距离  <span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 只能读不能写主要是检测什么时候盒子碰撞使用图片切换模拟盒子碰撞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">6</span>、抽象出拖拽的基础模板<span class="token number">7</span>、自制滚动条（布局）我们的页面架构首先要清楚页面的最外层是document<span class="token punctuation">,</span>紧接着是初始包含块  html  body，其次是我们的元素我们禁止了系统的滚动条，（因为各大浏览器的系统滚动条风格不一，有可能会影响我们的页面布局）所以在body当中我们一般会有最外的一个盒子模拟body区域，在这个盒子的右侧会定位一个盒子模拟滚动条自定义滚动条的万能比例：滚动条的高度 <span class="token operator">/</span> 屏幕的高度 <span class="token operator">=</span> 屏幕的高度 <span class="token operator">/</span> 内容的高度 <span class="token operator">=</span> 滚动条的移动距离 <span class="token operator">/</span> 内容的滚动距离 <span class="token number">8</span>、鼠标滚轮事件盒子滚动滚轮改变高度案例ie<span class="token operator">/</span>chrome <span class="token operator">:</span> <span class="token function">mousewheel</span><span class="token punctuation">(</span>dom2的标准模式<span class="token punctuation">)</span>event<span class="token punctuation">.</span>wheelDelta上：<span class="token number">120</span>下：<span class="token operator">-</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">firefox <span class="token operator">:</span> <span class="token function">DOMMouseScroll</span><span class="token punctuation">(</span>dom2的标准模式<span class="token punctuation">)</span>event<span class="token punctuation">.</span>detail上：<span class="token operator">-</span><span class="token number">3</span>下：<span class="token number">3</span><span class="token keyword">return</span> <span class="token boolean">false</span>阻止的是  dom0 所触发的默认行为dom2 需要通过event下面的event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十五、正则表达式"><a href="#十五、正则表达式" class="headerlink" title="十五、正则表达式"></a>十五、正则表达式</h2><h3 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h3><h4 id="1-什么是正则表达式"><a href="#1-什么是正则表达式" class="headerlink" title="1 什么是正则表达式"></a>1 什么是正则表达式</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就是一个正则表达式，看不懂？</p><p><strong>正则表达式用于对字符串进行匹配、检索、替换，是对字符串执行模式匹配的强大工具。对字符串进行模式匹配也是正则表达式唯一的作用。</strong></p><p>在这个世界上与正则表达式相似的事物有：女人的心、道士的符、医生的字。</p><h4 id="2-正则表达式的作用"><a href="#2-正则表达式的作用" class="headerlink" title="2 正则表达式的作用"></a>2 正则表达式的作用</h4><ul><li>验证用户名、邮箱、电话号码、邮编等是否正确</li><li>进行字符串替换</li><li>富文本编辑器</li><li>爬虫程序、内容采集器</li></ul><h4 id="3-正则表达式的应用领域"><a href="#3-正则表达式的应用领域" class="headerlink" title="3. 正则表达式的应用领域"></a>3. 正则表达式的应用领域</h4><p>正则可以在 PHP、C#、Java、JavaScript、Python、Ruby 等多种编程语言中使用</p><h4 id="4-学习正则表达式"><a href="#4-学习正则表达式" class="headerlink" title="4. 学习正则表达式"></a>4. 学习正则表达式</h4><p>学习正则表达式，要学习两部分：</p><p>第一，正则表达式的基础语法；</p><p>第二，正则表达式在编程语言中的使用方法，例如在 javaScript 中，可以用通过 RegRep 对象或者 String 对象的几个方法来使用正则表达式</p><h4 id="5-正则表达式基本语法"><a href="#5-正则表达式基本语法" class="headerlink" title="5.正则表达式基本语法"></a>5.正则表达式基本语法</h4><p>正则表达式的基本语法包括两部分，一部分是原子（元字符），一部分对原子（元字符）的修饰）</p><h3 id="原子"><a href="#原子" class="headerlink" title="原子"></a>原子</h3><p>原子也叫元字符，是正则表达式的基本组成单位； 通常一个原子匹配字符串中的一个字符。我们把原子分为如下几类</p><h4 id="1-字符串直接量"><a href="#1-字符串直接量" class="headerlink" title="1 字符串直接量"></a>1 字符串直接量</h4><p><strong>首先，</strong> 一个标点符号，一个字母，一个汉字都可以当做一个原子; 此外还有如下的不可见字符</p><table><thead><tr><th>原子（元字符）</th><th>描述</th></tr></thead><tbody><tr><td><code>\n</code></td><td>查找换行符。</td></tr><tr><td><code>\f</code></td><td>查找换页符。</td></tr><tr><td><code>\r</code></td><td>查找回车符。</td></tr><tr><td><code>\t</code></td><td>查找制表符。</td></tr><tr><td><code>\v</code></td><td>查找垂直制表符。</td></tr><tr><td><code>\uxxxx</code></td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><h4 id="2-字符类"><a href="#2-字符类" class="headerlink" title="2 字符类"></a>2 字符类</h4><table><thead><tr><th align="left">元字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[abc]</code></td><td align="left">匹配方括号之间的任何字符 例 <code>[abc]</code>、<code>[a-z]</code>、<code>[b-f0-9]</code>、<code>[a-z0-9_]</code></td></tr><tr><td align="left"><code>[^abc]</code></td><td align="left">查找任何不在方括号之间的字符。</td></tr><tr><td align="left"><code>.</code></td><td align="left">匹配除了换行和行结束符外所有的字符。 <code>[^\n]</code></td></tr><tr><td align="left"><code>\w</code></td><td align="left">匹配数字、字母或下划线 <code>[a-zA-Z0-9_]</code></td></tr><tr><td align="left"><code>\W</code></td><td align="left">匹配除了数字、字母或下划线以外的字符 <code>[^a-zA-Z0-9_]</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">匹配数字字符 <code>[0-9]</code></td></tr><tr><td align="left"><code>\D</code></td><td align="left">匹配非数字字符 <code>[^0-9]</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">匹配空白字符 <code>[\n\t\v\r\f]</code></td></tr><tr><td align="left"><code>\S</code></td><td align="left">匹配空白字符以外的其他字符 <code>[^\n\t\v\r\f]</code></td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">[0-9]    查找任何从 0 至 9 的数字。[a-z]    查找任何从小写 a 到小写 z 的字符。[A-Z]    查找任何从大写 A 到大写 Z 的字符。[A-z]    查找任何从大写 A 到小写 z 的字符。[adgk]    查找给定集合内的任何字符。[^adgk]    查找给定集合外的任何字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-特殊字符"><a href="#3-特殊字符" class="headerlink" title="3 特殊字符"></a>3 特殊字符</h4><p>如果要匹配的字符是在正则中具有特殊意义的符号，可以使用反斜杠<code>\</code>来转义；</p><p>例如：<code>\.</code> 匹配字符串<code>.</code></p><h3 id="数量修饰符"><a href="#数量修饰符" class="headerlink" title="数量修饰符"></a>数量修饰符</h3><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>&#123;n&#125;</code></td><td>前面原子的数量 n次</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>前面原子的数量n次以及以上</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>前面原子的数量n次到m次</td></tr><tr><td><code>?</code></td><td>前面原子的数量 0次或 1次 <code>&#123;0,1&#125;</code></td></tr><tr><td><code>+</code></td><td>前面原子的数量1次或多次 <code>&#123;1,&#125;</code></td></tr><tr><td><code>*</code></td><td>前面原子的数量0次、1次或多次也就是任意次 <code>&#123;0,&#125;</code></td></tr></tbody></table><blockquote><p>默认会尽可能多的匹配，故称之为<strong>贪婪匹配。</strong></p><p>正则表达式后面加<code>?</code>可以阻止贪婪匹配。</p></blockquote><h3 id="位置修饰符"><a href="#位置修饰符" class="headerlink" title="位置修饰符"></a>位置修饰符</h3><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>\b</code></td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， <code>er\b</code> 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’</td></tr><tr><td><code>\B</code></td><td>匹配非单词边界。<code>er\B</code> 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’</td></tr><tr><td><code>\A</code></td><td>匹配字符串开始</td></tr><tr><td><code>\Z</code></td><td>匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串</td></tr><tr><td><code>^</code></td><td>匹配字符串的开头 同<code>\A</code></td></tr><tr><td><code>$</code></td><td>匹配字符串结束 同<code>\Z</code></td></tr></tbody></table><h3 id="选择修饰符"><a href="#选择修饰符" class="headerlink" title="选择修饰符"></a>选择修饰符</h3><p><code>|</code> 修饰符类似于逻辑或</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">a<span class="token operator">|</span>b         <span class="token comment">// 匹配a或者b                        </span>abc<span class="token operator">|</span>def     <span class="token comment">// 匹配abc  或者def  字符串的结合优先级高于选择    </span><span class="token function">ab</span><span class="token punctuation">(</span>c<span class="token operator">|</span>d<span class="token punctuation">)</span>ef   <span class="token comment">// 匹配abcef   或者abdef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="模式单元"><a href="#模式单元" class="headerlink" title="模式单元"></a>模式单元</h3><h4 id="1-什么是模式单元"><a href="#1-什么是模式单元" class="headerlink" title="1. 什么是模式单元"></a>1. 什么是模式单元</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span><span class="token punctuation">(</span>\w<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>括号里的部分就构成了一个模式单元。</p><h4 id="2-模式单元的作用"><a href="#2-模式单元的作用" class="headerlink" title="2. 模式单元的作用"></a>2. 模式单元的作用</h4><ul><li>改变优先级。</li><li>将多个原子视为一个原子。</li><li><strong>暂存内存</strong> 将匹配的内容捕获暂存在内存，<code>/(?:abc)/</code> 用问号冒号，可以取消暂存内存的特性。</li><li><strong>反向引用</strong> 可以将模式单元的内容反向引用。使用<code>$1</code>、<code>$2</code>可以反向引用， <code>$1</code>会引用第一个模式单元匹配的内容。</li></ul><h4 id="3-groups-捕获组"><a href="#3-groups-捕获组" class="headerlink" title="3. groups 捕获组"></a>3. groups 捕获组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 命名捕获组的获取</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;first>\d)(?&lt;second>\d)</span><span class="token regex-delimiter">/</span></span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">)</span> <span class="token comment">// => &#123; first: 1, second: 2 &#125; 新的语法支持对这些捕获组进行命名，更方便地获取某个捕获组的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h3><p>先行断言以及负向先行断言本质上是对原子数量的修饰</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>(?=pattern)</code></td><td>正向先行断言（正向预查） 要求接下来的字符都与 pattern 匹配，但不能包括匹配p的那些字符。<code>(?=pattern)</code>位于右侧。</td></tr><tr><td><code>(?!pattern)</code></td><td>负向先行断言 (负向预查) 要求接下来的字符不与 pattern 匹配。<code>(?!pattern)</code>位于右侧。</td></tr><tr><td><code>(?&lt;=pattern)</code></td><td>正向后行断言 要求接下来的字符不与 pattern 匹配。 <code>(?&lt;=pattern)</code>位于左侧。</td></tr><tr><td><code>(？&lt;!pattern)</code></td><td>负向后行断言 要求接下来的字符不与 pattern 匹配。 <code>(？&lt;!pattern)</code>位于左侧。</td></tr></tbody></table><h3 id="模式修饰符"><a href="#模式修饰符" class="headerlink" title="模式修饰符"></a>模式修饰符</h3><p>修饰符用于执行区分大小写和全局匹配:</p><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">执行对大小写不敏感的匹配。</td></tr><tr><td align="left">g</td><td align="left">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td align="left">m</td><td align="left">执行多行匹配。</td></tr></tbody></table><h3 id="JavaScript中使用正则表达式"><a href="#JavaScript中使用正则表达式" class="headerlink" title="JavaScript中使用正则表达式"></a>JavaScript中使用正则表达式</h3><h4 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h4><p>同 Array、Function、Object一样, RegExp表示JavaScript中一类数据。</p><p>1 如何创建正则表达式 （创建RegExp对象）</p><ul><li>RegExp直接量方式 <code>/html5/</code></li><li>RegExp构造函数 <code>new RegExp(&quot;html5&quot;)</code></li><li>RegExp() 函数 <code>RegExp(&quot;html5&quot;)</code></li></ul><ol start="2"><li>RegExp对象的方法</li></ol><ul><li><code>exec()</code> 检索字符串中指定的值。返回找到的值，并确定其位置。</li><li><code>test()</code> 检索字符串中指定的值。返回 true 或 false。</li></ul><h4 id="可用正则的字符串方法"><a href="#可用正则的字符串方法" class="headerlink" title="可用正则的字符串方法"></a>可用正则的字符串方法</h4><ul><li><p>search() 检索与正则表达式相匹配的值。</p></li><li><p>match() 找到一个或多个正则表达式的匹配。</p></li><li><p>replace() 替换与正则表达式匹配的子串。该方法可以使用模式单元的后向引用</p></li><li><p>split() 把字符串分割为字符串数组。</p><p>一  正则的基本使用</p><p>​        1、正则的概念<br>​                是什么？<br>​                    正则表达式是描述字符模式的对象。<br>​                    正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。<br>​                    简单点：正则表达式是一种字符串匹配规则；<br>​        正则就是让我们用来在一个字符串当中 去查找符合正则规则的字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">为什么？假设我想要知道一个字符串当中是否有<span class="token number">6</span>，该如何去做假设我想知道字符串当中是否有数字又该如何假设我想从字符串当中找到abcd怎么去做假设我想知道这个电话号码是否合法  怎么玩？<span class="token number">2</span>、创建方式字面量创建<span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token operator">/</span>pattern<span class="token operator">/</span>modifiers<span class="token punctuation">;</span>构造函数创建<span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>  pattern（模式） 描述了表达式的模式<span class="token function">modifiers</span><span class="token punctuation">(</span>修饰符<span class="token punctuation">)</span> 用于指定全局匹配、区分大小写的匹配和多行匹配  注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的：<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>  <span class="token number">3</span>、正则表达式规则写法修饰符修饰符用于执行区分大小写和全局匹配<span class="token operator">:</span>i<span class="token operator">:</span>忽略大小写g<span class="token operator">:</span> 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。m<span class="token operator">:</span>执行多行匹配方括号方括号用于查找某个范围内的字符：<span class="token punctuation">[</span>abc<span class="token punctuation">]</span>    查找abc任意一个<span class="token punctuation">[</span><span class="token operator">^</span>abc<span class="token punctuation">]</span>   查找不是abc的任意一个<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>    查找任意一个数字    \d<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>    查找任意一个小写字母<span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>    查找任意一个大写字母元字符<span class="token punctuation">.</span>  匹配任意字符不包含\n（换行和结束符）\d  任意数字  等价于<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\<span class="token constant">D</span>  任意非数字  等价于<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\w  任意单词字符 数字 字母  下划线  <span class="token punctuation">[</span>a<span class="token operator">-</span>z <span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span> _<span class="token punctuation">]</span>\<span class="token constant">W</span>  任意非单词字符 <span class="token punctuation">[</span><span class="token operator">^</span>a<span class="token operator">-</span>z <span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span> _<span class="token punctuation">]</span>\s   任意空白字符\<span class="token constant">S</span>   任意非空白字符\b   单词边界\<span class="token constant">B</span>   非单词边界\n   换行符\f   换页符\r   回车符\t   制表符\v   垂直制表符量词<span class="token operator">+</span>   <span class="token number">1</span>个或者多个前一个字符   \d<span class="token operator">+</span><span class="token operator">*</span>   <span class="token number">0</span>个或者多个前一个字符   \d<span class="token operator">*</span>？  <span class="token number">0</span>个或者<span class="token number">1</span>个前一个字符 \d<span class="token operator">?</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span>  n个前一个字符      \d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span>     <span class="token punctuation">(</span>\d<span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span>n<span class="token punctuation">&#125;</span> m到n个前一个字符  \d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> 至少m个前一 个字符   \d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>$   结       <span class="token operator">^</span>\d<span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">&#125;</span>$<span class="token operator">^</span>   开头分组（）分组后的反向引用<span class="token operator">|</span> 贪婪和非贪婪量词后面的？代表非贪婪  第二节<span class="token operator">:</span>  字符串正则相关方法正则对象的方法：Reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 <span class="token boolean">true</span>，否则返回 <span class="token boolean">false</span>。  Reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 <span class="token keyword">null</span>。注意：此方法每次只会返回一个结果，如果要找到所有的，需要循环去调用必须全局匹配修饰；   字符串方法使用正则str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：在字符串中搜索符合规则的内容，搜索成功就返回内容，格式为数组，失败就返回<span class="token keyword">null</span>。如果不加g，那么返回第一次符合的结果，加g返回所有结果的数组  str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：在字符串搜索符合正则的内容，搜索到就返回出现的位置（从<span class="token number">0</span>开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 <span class="token operator">-</span><span class="token number">1</span> 只能返回第一次；  注意：上面两个方法类似正则的方法 test和execReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     当不使用全局匹配时，两者的匹配效果都是返回第一次匹配成功的结果：  reg<span class="token punctuation">.</span>test（）和str<span class="token punctuation">.</span>search（）  前者返回的是<span class="token boolean">true</span>或者<span class="token boolean">false</span>   后者返回到的是匹配到的子串位置或者<span class="token operator">-</span><span class="token number">1</span>；  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。这个方法象当于做了两件事     先查找匹配    然后再用新的串把匹配到的串替换掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5-CSS3</title>
      <link href="/posts/1001.html"/>
      <url>/posts/1001.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h1><h2 id="什么是前端"><a href="#什么是前端" class="headerlink" title="什么是前端"></a>什么是前端</h2><p>前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，完美的动效设计，给用户带来极高的用户体验。</p><p>前端技术一般分为前端设计和前端开发，前端设计一般可以理解为网站的视觉设计，前端开发则是网站的前台代码实现，包括基本的 HTML 和 CS S以及 JavaScript。</p><h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h2><img src="../img/html+css/image-20210531153335367.png" style="zoom:67%;" /><h2 id="前端开发工程师在整个开发流程中的位置"><a href="#前端开发工程师在整个开发流程中的位置" class="headerlink" title="前端开发工程师在整个开发流程中的位置"></a>前端开发工程师在整个开发流程中的位置</h2><img src="../img/html+css/image-20210625230106061.png" style="zoom:50%;" />与前端开发工程师打交道的岗位如下：<p>​    前端工程师  把设计的设计稿转为可以运行的程序</p><ul><li>产品经理 （需求经理）</li><li>UI 设计师   (设计界面)</li><li>后端开发工程师 负责给前端提供数据</li><li>测试工程师  负责测试</li></ul><h2 id="什么是B-S-C-S"><a href="#什么是B-S-C-S" class="headerlink" title="什么是B/S | C/S"></a>什么是B/S | C/S</h2><blockquote><ol><li><p>无论是前端工程师还是后台工程师，我们的内容都是开发软件</p></li><li><p>软件的分类：</p></li><li><p>C/S架构的软件</p></li></ol><ul><li>C表示客户端，S表示服务器</li><li>客户端：<ul><li>用户通过客户端来使用软件</li><li>服务器用来处理软件的业务逻辑</li></ul></li><li>例子：<ul><li>QQ、office、360、王者</li></ul></li><li>特点：<ul><li>1、C/S架构的软件必须要安装后才可以使用</li><li>2、C/S架构的软件更新时，服务器和客户端都需要更新</li><li>3、C/S架构的软件无法跨平台使用</li><li>4、C/S架构的软件客户端和服务器间的通信采用自有的协议，安全性较好</li></ul></li></ul><ol start="4"><li>B/S  我们主要从事的是B/S的软件的开发</li></ol><ul><li>B表示浏览器，S同样表示服务器  java、NodeJs</li><li>B/S本质也是C/S,只不过B/S使用浏览器作为软件的客户端</li><li>B/S实际上就是一个一个的网站，我们可以通过访问一个网站来使用软件</li><li>例子：<ul><li>京东、淘宝、12306</li></ul></li><li>特点：<ul><li>1、不需要安装可以直接使用</li><li>2、软件更新，客户端无需更新</li><li>3、软件可以跨平台使用</li><li>4、B/S架构的软件，客户端和服务器间的通信采用公共的HTTP协议，安全性较差</li></ul></li></ul><p><strong>C/S结构：</strong> Client/Server（客户机/服务器）结构，客户端程序直接运行在操作系统上，需要安装。</p><p><strong>B/S结构：</strong> Browser/Server（浏览器/服务器）结构，客户端程序运行在浏览器上，无需安装。</p></blockquote><h2 id="完善的软件体系"><a href="#完善的软件体系" class="headerlink" title="完善的软件体系"></a>完善的软件体系</h2><img src="../img/html+css/image-20210531101521508.png" style="zoom:67%;" /><h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2><img src="../img/html+css/image-20210526000602508.png" style="zoom:67%;" /><blockquote><p>我们需要将设计师的设计转换为代码，并且调用后台接口动态显示网页数据。</p><p>我们需要和设计师沟通，需要和产品经理沟通，需要和后台工程师沟通。</p><p>我们的编写的网页会在整个项目的最前端由用户查看。</p></blockquote><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><img src="HTML5-CSS3.assets/image-20210625230200040.png" /><img src="../img/html+css/image-20210531113655442.png" /><h2 id="浏览器的发展以及内核"><a href="#浏览器的发展以及内核" class="headerlink" title="浏览器的发展以及内核"></a>浏览器的发展以及内核</h2><img src="../img/html+css/image-20210531111256000.png" /><blockquote><p>主流浏览器：</p><p>其他浏览器： 360安全浏览器、360极速浏览器、搜狗浏览器、UC浏览器、猎豹浏览器、夸克浏览器、海豚浏览器、傲游浏览器、QQ浏览器、2345浏览器 等</p><p>浏览器是前端开发中的核心工具，我们编写的所有内容都需要通过浏览器来显示</p><p>浏览器的主要作用便是将我们所编写的代码渲染为可供用户查看的页面</p><p>换句话说，我们所编写的代码最终显示的效果实际上是由浏览器来决定的</p><p>而我们要做的事情就是确保一个网页在不同的浏览器中有着相同的显示效果</p></blockquote><h2 id="万维网联盟（W3C）"><a href="#万维网联盟（W3C）" class="headerlink" title="万维网联盟（W3C）"></a>万维网联盟（W3C）</h2><img src="../img/html+css/image-20210526003039124.png" style="zoom:67%;" /><img src="HTML5-CSS3.assets/image-20210526003241855.png" style="zoom: 50%;" /><blockquote><p>万维网联盟World Wid Web Consortium，又称W3C理事会，是万维网的主要国际标准组织</p><p>该组织试图制作一套标准来解决网络应用在不同平台间的兼容问题</p><p>定义了网页中的<code>HTML、CSS、DOM、HTTP、XML</code>等标准。</p><p>W3C是前端开发中最最重要的一个组织，我们所开发的应用都需要遵循W3C的规范W3C</p></blockquote><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><img src="../img/html+css/image-20210526003359790.png" style="zoom: 50%;" /><h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h2><img src="../img/html+css/image-20210531125326588.png" style="zoom: 50%;" /><blockquote><ul><li>HTML是用来制作网页的标记语言</li><li>HTML是Hypertext Markup Language的英文缩写,即超文本标记语言</li><li>HTML语言是一种标记语言,不需要编译,直接由浏览器执行</li><li>HTML文件是一个文本文件,包含了一些HTML元素,标签等</li><li>HTML文件必须使用.html或.htm为文件名后缀</li><li>HTML是大小写不敏感的,HTML与html是一样的</li><li>HTML是由W3C的维护的</li><li>HTML 是通向 WEB 技术世界的钥匙。</li></ul><p>HTML（Hypertext Markup Language）<code>超文本标记语言</code></p><p>它负责网页的三个要素之中的<code>结构</code>。</p><p>HTML使用<code>标签</code>的的形式来标识网页中的不同组成部分。</p><p>所谓超文本指的是超链接，使用<code>超链接</code>可以让我们从一个页面跳转到另一个页面。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--html标签是网页的根标签，网页中的所有内容都应该写在根标签中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--head是html的子元素 head中的内容不会在网页中直接显示，他用来对网页进行配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--meta标签，表示网页中的一些元数据--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--title是网页的标题，他会显示在浏览器的标题栏--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!---body也是html的子元素，网页中所有的可见内容都应该写在body中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--h1是一级标题标签--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网页正文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--文档声明，告诉浏览器网页的版本--></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--自结束标签 meta用来设置网页的基本信息指定网页的编码字符集(避免乱码问题)表示网页中的一些元数据               name：要设置的数据的名字               content：要设置的数据的值               http-equiv：设置Http协议的响应头--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java,大数据,前端<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>前端开发工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--在开始标签中可以为元素添加属性属性可以用来设置元素如何显示其中的内容属性是一个明值对结构：属性名="属性值"font:规定文本的颜色 大小 不推荐使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTML的发展</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">HTML是从2.0版本开始的，实际上没有1.0的官方规范,在1993年6月作为互联网工程工作小组（IETF）工作草案发布（并非标准） HTML 2.0——1995年11月作为RFC 1866发布，在RFC 2854于2000年6月发布之后被宣布已经过时HTML 3.2——1997年1月14日，W3C推荐标准HTML 4.0——1997年12月18日，W3C推荐标准HTML 4.01（微小改进）——1999年12月24日，W3C推荐标准HTML 5——2014年10月28日，W3C推荐标准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../img/html+css/image-20210619124615142.png" style="zoom: 67%;" /><h3 id="HTML-基本语法"><a href="#HTML-基本语法" class="headerlink" title="HTML 基本语法"></a>HTML 基本语法</h3><h4 id="1-HTML-标签"><a href="#1-HTML-标签" class="headerlink" title="1 HTML 标签"></a>1 HTML 标签</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">标签是HTML中最基本单位,也是最重要组成部分通常要用两个角括号括起来:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>和</span><span class="token punctuation">></span></span>标签都是闭合的（两种形式：成对与不成对）双标签（成对）: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span> 如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span> 即分起始和结束单标签（不成对）: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token punctuation">/></span></span>; 如： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span>标签是大小写无关的,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>;跟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BODY</span><span class="token punctuation">></span></span>表示意思是一样的，标准推荐使用小写，这样符合XHTML标准。对于HTML标签来讲，最重要的是语义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-HTML-标签属性"><a href="#2-HTML-标签属性" class="headerlink" title="2 HTML 标签属性"></a>2 HTML 标签属性</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">HTML属性一般都出现在HTML的开始标签中, 是HTML标签的一部分。标签可以有属性,它包含了额外的信息.属性的值一定要在双引号中。标签可以拥有多个属性。属性由属性名和值成对出现。语法格式如下：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token attr-name">属性名1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token attr-name">属性名2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token attr-name">...</span> <span class="token attr-name">属性名N</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–</span> <span class="token attr-name">输出内容…</span>  <span class="token attr-name">--</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-如何掌握一个-HTML-标签"><a href="#3-如何掌握一个-HTML-标签" class="headerlink" title="3 如何掌握一个 HTML 标签"></a>3 如何掌握一个 HTML 标签</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">要掌握一个 HTML 标签，我们需要记住以下几点：    ① 标签的语义、作用。    ② 该标签有哪些属性，属性的值是怎样的。    ③ 该标签是单标签还是双标签。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-HTML代码格式"><a href="#4-HTML代码格式" class="headerlink" title="4 HTML代码格式"></a>4 HTML代码格式</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">任何回车或空格在源代码中都是不起作用， 所以在编写HTML代码时，都可以使用回车或者空格进行代码排版， 这样可以使代码清晰，也便于团队合作。必须保持严格的缩进规则，以Tab键为准。<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网站<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-HTML-注释"><a href="#5-HTML-注释" class="headerlink" title="5 HTML 注释"></a>5 HTML 注释</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 注释内容 --></span><span class="token comment">&lt;!--    这里全是注释    都是注释--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-文档声明"><a href="#6-文档声明" class="headerlink" title="6 文档声明"></a>6 文档声明</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">你可使用此声明在 Internet Explorer 6 及以后版本中切换为严格的标准兼容模式。<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h3><img src="../img/html+css/image-20210531125414344.png" style="zoom:67%;" /><pre class="line-numbers language-html" data-language="html"><code class="language-html">语义化标签    header 表示网页的头部，头部可以包含logo、导航、搜索框、广告条    main 表示网页的主体，一个网页中只有一个main标签    footer 表示网页的底部，底部可以包含版权声明    nav 表示导航    article 表示网页中一块内容（一般是一些文字的信息）    aside 表示侧边栏（辅助信息）    section 表示一个区块    hgroup 表示一个标题组    div 表示一个区块    p 表示页面中的一个段落    blockquote 长引用    hr表示水平线        - 以上的元素都属于块元素，块元素在页面中会独占一行        - 在网页中一般通过块元素进行布局自己单独占一行；设置宽高起作用,在不设置宽度的情况下,和父元素的宽度一样。具有块级显示模式的元素称之为块级元素。常见的块级元素有：div、h1-h6、 ul、 ol、 li、 dl、 dt、 dd、 hr、 p、 form 等    em 强调（语气）     strong 强调重要性 有加粗效果    i 斜体     b 加粗    q 短引用    span 一般用于在网页中选中文字    br 标签来进行换行        - 以上这些元素都是行内元素（内联元素），在页面中不会独占一行        - 行内元素主要用来包裹文字设置效果自己不独占一行，一行可以有多个；设置宽高不起作用,宽高靠内容撑开。具有行内显示模式的元素称之为行内元素。常见的行内元素有：span、a 、strong、 em、 ins、 del 等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-主体结构标签"><a href="#1-主体结构标签" class="headerlink" title="1 主体结构标签"></a>1 主体结构标签</h4><table><thead><tr><th>标签名</th><th>标签的语义和作用</th><th>标签的属性</th><th>是单标签还是双标签</th></tr></thead><tbody><tr><td>html</td><td>页面最外层</td><td></td><td>双</td></tr><tr><td>head</td><td>页面头部</td><td></td><td>双</td></tr><tr><td>body</td><td>页面主体</td><td></td><td>双</td></tr></tbody></table><h4 id="2-HEAD-标签"><a href="#2-HEAD-标签" class="headerlink" title="2 HEAD 标签"></a>2 HEAD 标签</h4><table><thead><tr><th>标签名</th><th align="center">标签的语义和作用</th><th align="center">标签的属性</th><th align="center">是单标签还是双标签</th></tr></thead><tbody><tr><td>title</td><td align="center">页面标题</td><td align="center"></td><td align="center">双</td></tr><tr><td>meta</td><td align="center">页面元信息： ① 设置字符集编码 ② 设置关键字和描述信息</td><td align="center">charset：值是字符编码 name: 值是 keywords 或 description content: 值根据 name 属性的值填写</td><td align="center">双</td></tr><tr><td>base</td><td align="center">为页面上的所有链接规定默认地址或默认目标 一个页面最多只能使用一个 base 元素，用来提供一个指定的默认目标。</td><td align="center">href: 规定页面中所有相对链接的基准 URL。 target: 规定页面中所有的超链接和表单在何处打开。值为<code>_blank</code>/<code>_self</code></td><td align="center">单</td></tr><tr><td>style</td><td align="center">定义 HTML 文档的样式信息。 该标签也可放在 head 之外。</td><td align="center">type: 规定样式表的 MIME 类型，默认<code>text/css</code></td><td align="center">双</td></tr><tr><td>link</td><td align="center">引入文档与外部资源的关系 该标签也可放在 head 之外。</td><td align="center">href：定义被链接文档的位置 rel：定义当前文档与被链接文档之间的关系。 type：规定样式表的 MIME 类型，默认<code>text/css</code></td><td align="center">双</td></tr><tr><td>script</td><td align="center">定义客户端脚本，比如 JavaScript。script 元素既可以包含脚本语句，也可以通过 src 属性指向外部脚本文件。 该标签也可放在 head 之外。</td><td align="center">src：规定外部脚本的 URL type: 规定脚本的 MIME 类型，默认<code>text/javascript</code></td><td align="center">双</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html">link 标签可以用于引入外部 css 文件或者引入页面窗口小图标<span class="token comment">&lt;!--导入外部CSS文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--导入页面窗口小图标---></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/x-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>附：常用 MIME 类型    text/html    text/xml    image/jpeg    image/png    image/gif    image/x-icon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-格式排版标签"><a href="#3-格式排版标签" class="headerlink" title="3 格式排版标签"></a>3 格式排版标签</h4><table><thead><tr><th>标签名</th><th>标签的语义和作用</th><th>标签的属性</th><th>是单标签还是双标签</th></tr></thead><tbody><tr><td>h1~h6</td><td>标题</td><td></td><td>双</td></tr><tr><td>p</td><td>段落</td><td></td><td>双</td></tr><tr><td>hr</td><td>分割线</td><td></td><td>单</td></tr><tr><td>br</td><td>换行</td><td></td><td>单</td></tr><tr><td>pre</td><td>按原文显示</td><td></td><td>双</td></tr><tr><td>div</td><td>没有任何语义，用于页面布局</td><td></td><td>双</td></tr></tbody></table><h4 id="4-文本标签"><a href="#4-文本标签" class="headerlink" title="4 文本标签"></a>4 文本标签</h4><table><thead><tr><th>标签名</th><th>标签的语义和作用</th><th>标签的属性</th><th>是单标签还是双标签</th></tr></thead><tbody><tr><td>em</td><td>表示强调，通常为斜体字</td><td></td><td>双</td></tr><tr><td>strong</td><td>表示强调(语气更强)，通常为粗体字</td><td></td><td>双</td></tr><tr><td>del</td><td>定义文档中已删除的文本。</td><td></td><td>双</td></tr><tr><td>ins</td><td>定义已经被插入文档中的文本。</td><td></td><td>双</td></tr><tr><td>sub</td><td>文字下标字字体。</td><td></td><td>双</td></tr><tr><td>sup</td><td>文字上标字体</td><td></td><td>双</td></tr></tbody></table><h3 id="HTML-功能标签"><a href="#HTML-功能标签" class="headerlink" title="HTML 功能标签"></a>HTML 功能标签</h3><h4 id="1-图片"><a href="#1-图片" class="headerlink" title="1 图片"></a>1 图片</h4><h5 id="1-1-img-标签"><a href="#1-1-img-标签" class="headerlink" title="1.1 img 标签"></a>1.1 img 标签</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性：    alt -- 代表图像的替代文字    src -- 代表一个图像源(就是图像的位置)    border – 代表图片边框的宽度    height -- 代表一个图像的高度    width -- 代表一个图像的宽度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-常见图片格式"><a href="#1-2-常见图片格式" class="headerlink" title="1.2 常见图片格式"></a>1.2 常见图片格式</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">GIF -- 最多支持256色,支持透明,支持多帧动画显示效果.JPEG -- 支持多种颜色,可以有很高的压缩比,使用了有损压缩,不支持透明,不支持动画效果.PNG -- 是一种新的图片技术,可以表现品质比较高的图片,使用了无损压缩,支持透明,不支持动画.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-超链接和锚点"><a href="#2-超链接和锚点" class="headerlink" title="2 超链接和锚点"></a>2 超链接和锚点</h4><h5 id="2-1-超链接"><a href="#2-1-超链接" class="headerlink" title="2.1 超链接"></a>2.1 超链接</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>要跳转的地址<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>超链接文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>① a 标签的属性href -- 代表一个url链接源(就是链接到什么地方)    url 除了是网页外,还可以是其它的文件(如文本文件,pdf文件等)。     url 还可以是指向HTML文件中的一个位置。     url 还可以是Email地址。target -- 用来指出哪个窗口或框架应该被此链接打开target=_blank： 将链接内容在新的浏览窗口中打开。 target=_self：  将链接的内容，显示在目前的窗口中。 (默认)target=_parent：将链接的内容，当成文件的上一个画面。 target=_top：这个参数可以解决新内容被旧框窗包围的困扰，使用这参数，会将整个画面重新显示成链接的画面内容。② 超链接示例网站链接：     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.atguigu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>尚硅谷<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>电子邮件链接： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mailto:fuming@atguigu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>写信给我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>电话             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel:10086<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10086<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>短信          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sms:10086<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发短息给我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-锚点"><a href="#2-2-锚点" class="headerlink" title="2.2 锚点"></a>2.2 锚点</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">① 定义锚点用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“”</span><span class="token punctuation">></span></span> 定义，例如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“here1”</span><span class="token punctuation">></span></span>第一部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>，使用标签配合 id 属性定义，例如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    ② 跳转到锚点本页面内跳转  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#锚点名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>跳转到指定页面指定锚点  http://www.lampuser.com/index.html#section2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-列表标签"><a href="#3-列表标签" class="headerlink" title="3. 列表标签"></a>3. 列表标签</h4><table><thead><tr><th>标签名</th><th>标签的语义和作用</th><th>标签的属性</th><th>是单标签还是双标签</th></tr></thead><tbody><tr><td>li</td><td>列表项，被嵌套在 ul 或者 ol 的里面</td><td></td><td>双</td></tr><tr><td>ul</td><td>无序列表</td><td></td><td>双</td></tr><tr><td>ol</td><td>有序列表</td><td></td><td>双</td></tr><tr><td>dl</td><td>自定义列表</td><td></td><td>双</td></tr><tr><td>dt</td><td>列表主题</td><td></td><td>双</td></tr><tr><td>dd</td><td>列表描述，对列表主题的描述</td><td></td><td>双</td></tr></tbody></table><h4 id="4-表格标签"><a href="#4-表格标签" class="headerlink" title="4. 表格标签"></a>4. 表格标签</h4><img src="../img/html+css/image-20210625231723761.png" style="zoom:67%;" /><pre class="line-numbers language-html" data-language="html"><code class="language-html">注意：thead、tbody、tfoot 都有属性 align、valigntr、th、td 都有属性 width、height、align、valign<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-表单标签"><a href="#5-表单标签" class="headerlink" title="5 表单标签"></a>5 表单标签</h4><img src="../img/html+css/image-20210625231915521.png" style="zoom:67%;" /><img src="HTML5-CSS3.assets/image-20210625231928610.png" style="zoom:67%;" /><h4 id="6-框架标签"><a href="#6-框架标签" class="headerlink" title="6 框架标签"></a>6 框架标签</h4><table><thead><tr><th align="center">标签名</th><th align="center">标签的语义和作用</th><th align="center">标签的属性</th><th align="center">是单标签还是双标签</th></tr></thead><tbody><tr><td align="center">iframe</td><td align="center">规定一个内联框架</td><td align="center">name 定义iframe的名称 width 定义iframe宽度 height 定义height高度 frameborder 是否显示边框，值为0不显示 src 要显示文档的url</td><td align="center">双</td></tr></tbody></table><p>曾经是项框架分帧的还有 <code>&lt;frameset&gt;</code> 和 <code>&lt;frame&gt;</code> 标签，但新标准都已经不推荐使用</p><h3 id="HTML-全局属性"><a href="#HTML-全局属性" class="headerlink" title="HTML 全局属性"></a>HTML 全局属性</h3><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>class</td><td>class 规定元素的一个或多个类名（引用样式表中的类） class 属性不能在以下 HTML 元素中使用：base, head, html, meta, param, script, style 以及 title。</td></tr><tr><td>id</td><td>规定元素的唯一 id。</td></tr><tr><td>dir</td><td>规定元素中内容的文本方向。 注意：dir 属性在以下标签中无效：base, br, frame, frameset, hr, iframe, param 以及 script。</td></tr><tr><td>style</td><td>规定元素的行内 CSS 样式。</td></tr><tr><td>title</td><td>规定有关元素的额外信息。</td></tr><tr><td>lang</td><td>规定元素内容的语言，值是语言代码，如 cn、zh。 注意：lang 属性在以下标签中无效：base, br, frame, frameset, hr, iframe, param 以及 script。</td></tr></tbody></table><h3 id="URL-和路径"><a href="#URL-和路径" class="headerlink" title="URL 和路径"></a>URL 和路径</h3><h4 id="1-URL"><a href="#1-URL" class="headerlink" title="1 URL"></a>1 URL</h4><h5 id="1-1-什么是-URL"><a href="#1-1-什么是-URL" class="headerlink" title="1.1 什么是 URL"></a>1.1 什么是 URL</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">统一资源定位符（URL，英语 Uniform Resource Locator 的缩写），它的英文简称叫做 URL。也被称为网页地址，是因特网上标准的资源的地址。它最初是由蒂姆·伯纳斯－李发明用来作为万维网的地址的，现在它已经被万维网联盟编制为因特网标准RFC1738了。URL 就是表示互联网上一个资源的地址。资源包括网页、图片、音乐、视频、样式文件、脚步文件以及其他各种文件等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-URL-的格式"><a href="#1-2-URL-的格式" class="headerlink" title="1.2 URL 的格式"></a>1.2 URL 的格式</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">scheme://host.domain:port/path/filenamescheme - 定义因特网服务的类型。最常见的类型是 httphost - 定义域主机（http 的默认主机是 www）domain - 定义因特网域名，比如 w3school.com.cnport - 定义主机上的端口号（http 的默认端口号是 80）path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）filename - 定义文档/资源的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-相对路径和绝对路径"><a href="#2-相对路径和绝对路径" class="headerlink" title="2 相对路径和绝对路径"></a>2 相对路径和绝对路径</h4><h5 id="2-1-HTML-中用到路径的地方"><a href="#2-1-HTML-中用到路径的地方" class="headerlink" title="2.1 HTML 中用到路径的地方"></a>2.1 HTML 中用到路径的地方</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">使用 img 标签导入图片a 标签指定链接到页面地址link 标签引入 css 文件或图标文件script 标签引入 js 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-绝对路径"><a href="#2-2-绝对路径" class="headerlink" title="2.2 绝对路径"></a>2.2 绝对路径</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">① 本地绝对路径C:\Library\200524\index.html后端程序可以用来读取文件② 网络绝对路径https://www.baidu.com/img/pc_cc75653cd975aea6d4ba1f59b3697455.png前端地址用绝对路径，就使用网络的绝对路径。网络绝对路径其实就是URL。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-相对路径"><a href="#2-3-相对路径" class="headerlink" title="2.3 相对路径"></a>2.3 相对路径</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">① 要引用的文件在同级或者下一级./直接写② 要引用的文件在上一级或者更上级../ 上级目录../../ 上上级目录../../../ 上上上级目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Meta-元信息"><a href="#Meta-元信息" class="headerlink" title="Meta 元信息"></a>Meta 元信息</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">我们可以使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">></span></span> 标签定义 HTML 页面的元信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-Meta-标签属性的使用规则"><a href="#1-Meta-标签属性的使用规则" class="headerlink" title="1 Meta 标签属性的使用规则"></a>1 Meta 标签属性的使用规则</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">content 属性定义与 http-equiv 属性或 name 属性相关的元信息。name 属性把 content 属性关联到一个名称。name 属性常见的值：    author    description    keywords    generator    revised    robots    othershttp-equiv 把 content 属性关联到 HTTP 头部信息。http-equiv 属性常见的值：content-type expires refresh set-cookiecharset 属性定义字符集编码。常见字符集编码：    GB2312    GBK    UTF8编码字符集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  HTML5 支持 HTML5向下兼容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html;charset=utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> HTML 4支持网页关键字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8-12个以英文逗号隔开的单词/词语<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网页描述信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80字以内的一段话，与网站内容相关<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>所有搜索引擎，抓取这个页面、爬行链接、禁止快照：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index,follow,noarchive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  all：文件将被检索，且页面上的链接可以被查询；  none：文件将不被检索，且页面上的链接不可以被查询；  index：文件将被检索；  follow：页面上的链接可以被查询；  noindex：文件将不被检索，但页面上的链接可以被查询；  nofollow：文件将被检索，但页面上的链接不可以被查询；  noarchive：文件将被检索，但禁止保存快照；网页作者：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obama<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网页网页生成工具 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generator<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sublime Text3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>定义页面最新版本 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>revised<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>David, 2008/8/8/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>网页版权信息：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2009-2014©版权所有<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网页刷新信息：(10秒后跳转到百度页面)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10;url=http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="什么CSS"><a href="#什么CSS" class="headerlink" title="什么CSS"></a>什么CSS</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css">层叠样式表 <span class="token punctuation">(</span>Cascading Style Sheets<span class="token punctuation">)</span>CSS可以用来为网页创建样式表，通过样式表可以对网页进行装饰。所谓层叠，可以将整个网页想象成是一层一层的结构，层次高的将会覆盖层次低的而css就可以分别为网页的各个层次设置样式 -层叠样式表    网页实际上是一个多层的结构，通过css可以分别为网页的每一个层设置样式    而最终我们能看到的只是网页的最上边一层<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS常用属性"><a href="#CSS常用属性" class="headerlink" title="CSS常用属性"></a>CSS常用属性</h3><img src="../img/html+css/image-20210531214723755.png" style="zoom:67%;" /><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css">CSS的样式表由一个一个的样式构成，一个样式又由选择器和声明块构成。语法：选择器：通过选择器可以选中页面中的指定元素            比如：p的作用就是选中页面中的所有p元素<span class="token punctuation">(</span>标签<span class="token punctuation">)</span>            声明块：通过声明块来指定要为元素设置的样式声明块由一个一个的声明组成                <span class="token property">一个样式名对应一个样式值，名和值之间以</span><span class="token punctuation">:</span>连接，以<span class="token punctuation">;</span>结尾<span class="token selector">选择器</span> <span class="token punctuation">&#123;</span><span class="token property">样式名</span><span class="token punctuation">:</span><span class="token property">样式值；样式名</span><span class="token punctuation">:</span>样式值 <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token selector">p</span> <span class="token punctuation">&#123;</span>       <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>       <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="行内样式-内联样式"><a href="#行内样式-内联样式" class="headerlink" title="行内样式(内联样式)"></a>行内样式(内联样式)</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">可以直接将样式写到标签内部的style属性中，这种样式不用填写选择器，直接编写声明即可。&lt;p style=<span class="token string">"color: red;font-size: 30px"</span>>&lt;/p>这种方式编写简单，定位准确。但是由于直接将css代码写到了html标签的内部，导致结构与表现耦合，同时导致样式不能够复用，所以这种方式我们不使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">可以直接将样式写到&lt;style>标签中。&lt;style>p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style>这样使css独立于html代码，而且可以同时为多个元素设置样式，这是我们使用的比较多的一种方式。但是这种方式，样式只能在一个页面中使用，不能在多个页面中重复使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">可以将所有的样式保存到一个外部的css文件中，然后通过&lt;link>标签将样式表引入到文件中。&lt;link rel=<span class="token string">"stylesheet"</span> type=<span class="token string">"text/css"</span> href=<span class="token string">"style.css"</span>>这种方式将样式表放入到了页面的外部，可以在多个页面中引入，同时浏览器加载文件时可以使用缓存，这是我们开发中使用的最多的方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS基本长度单位"><a href="#CSS基本长度单位" class="headerlink" title="CSS基本长度单位"></a>CSS基本长度单位</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">em 倍数 默认字体大小的倍数px：pixel，像素，屏幕上显示的最小单位，用于网页设计，直观方便；%百分比pt：point，是一个标准的长度单位，1pt＝1/72英寸，用于印刷业，非常简单易用；cm 厘米mm 毫米<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><img src="../img/html+css/image-20210601010205762.png" style="zoom:67%;" /><pre class="line-numbers language-css" data-language="css"><code class="language-css">RGB十进制数字表示颜色 数字（1-255）  <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span> 百分比<span class="token punctuation">(</span>1-100<span class="token punctuation">)</span>  <span class="token function">rgb</span><span class="token punctuation">(</span>100%<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span>RGB十六进制表示 #rrggbb #rgb  简写十六进制颜色用的最多的颜色是十六进制符号。一个颜色值，比如：#6600FF实际上包含了三组十六进制的数字。上边的例子中66代表红色的浓度，00代表绿色的浓度，FF代表了蓝色的浓度。最后的颜色是由这些指定浓度的红绿蓝混合而成的。如果每一组数中的两个数字都相同，就可以把十六进制的数字缩短为只有3个字符，如将#6600FF缩短为#60F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">选择器（selector），会告诉浏览器：网页上的哪些元素需要设置什么样的样式。比如：p这个选择器就表示选择页面中的所有的p元素，在选择器之后所设置的样式会应用到所有的p元素上。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">元素选择器（标签选择器），可以根据标签的名字来从页面中选取指定的元素。语法：标签名</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>比如p则会选中页面中的所有p标签，h1会选中页面中的所有h1标签。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">类选择器，可以根据元素的class属性值选取元素。语法：.className</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>比如.hello会选中页面所有class属性为hello的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ID选择器，可以根据元素的id属性值选取元素。语法：#id</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>比如#box会选中页面中id属性值为box的元素，和class属性不同，id属性是不能重复的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">通用选择器，可以同时选中页面中的所有元素。语法：*&#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><h5 id="群组选择器-并集选择器"><a href="#群组选择器-并集选择器" class="headerlink" title="群组选择器(并集选择器)"></a>群组选择器(并集选择器)</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">群组选择器，可以同时使用多个选择器，多个选择器将被同时应用指定的样式。语法：选择器1,选择器2,选择器3 &#123; &#125;比如p,.hello,#box会同时选中页面中p元素，class为hello的元素，id为box的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多选择器（交集选择器）"><a href="#多选择器（交集选择器）" class="headerlink" title="多选择器（交集选择器）"></a>多选择器（交集选择器）</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">选择类名是xxx的li的元素div.item &#123; &#125; .item.list-item &#123; &#125; div#container &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">复合选择器，可以同时使用多个选择器，这样可以选择同时满足多个选择器的元素。语法：选择器1选择器2&#123;&#125;例如div.box1会选中页面中具有box1这个class的div元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="选择器权重"><a href="#选择器权重" class="headerlink" title="选择器权重"></a>选择器权重</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css">不同的选择器有不同的权重值：内联样式：权重是 1000id选择器：权重是 100类、属性、伪类选择器：权重是 10元素选择器：权重是 1通配符：权重是 0计算权重需要将一个样式的全部选择器相加，比如上边的body h1的权重是20，h1的权重是10，所以第一个选择器设置的样式会优先显示。标签选择器 &lt; 类选择器 &lt; ID选择器 &lt; 行内样式 &lt; <span class="token important">!important</span>   1         10        100       1000     无穷大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS-常用属性"><a href="#CSS-常用属性" class="headerlink" title="CSS 常用属性"></a>CSS 常用属性</h3><h4 id="1-字体属性"><a href="#1-字体属性" class="headerlink" title="1 字体属性"></a>1 字体属性</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">fontfont:字体风格[字体加粗]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>字体大小</span><span class="token punctuation">></span></span>[/行高]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>字体族科</span><span class="token punctuation">></span></span>        font-family      字体族科 宋体|微软雅黑    font-family:"Arial","Helvetica",sans-serif;(非衬线字体)        font-size 字体大小font-style 字体风格 normal | italic | oblique (斜体)font-weight 字体加粗 normal | bold | lighter  数字 设置粗体字font-variant 字体变形 normal | small-caps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-文字颜色"><a href="#2-文字颜色" class="headerlink" title="2 文字颜色"></a>2 文字颜色</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">color 设置文字颜色<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-文本属性"><a href="#3-文本属性" class="headerlink" title="3 文本属性"></a>3 文本属性</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">letter-spacing 字母间隔 值为长度，可以是负值word-spacing 词的间距(通过空格识别)text-decoration 文字修饰    underline    overline    line-through    none(默认)text-align 横向排列 left | right | centervertical-align 垂直对齐方式baseline： 将支持valign特性的对象的内容与基线对齐 sub： 垂直对齐文本的下标 super： 垂直对齐文本的上标 top： 将支持valign特性的对象的内容与对象顶端对齐 text-top： 将支持valign特性的对象的文本与对象顶端对齐 middle： 将支持valign特性的对象的内容与对象中部对齐 bottom： 将支持valign特性的对象的文本与对象底端对齐 text-bottom： 将支持valign特性的对象的文本与对象顶端对齐 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>percentage</span><span class="token punctuation">></span></span>： 用百分比指定由基线算起的偏移量。可以为负值。基线对于百分数来说就是0%。 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>length</span><span class="token punctuation">></span></span>： 用长度值指定由基线算起的偏移量。可以为负值。基线对于数值来说为0。（CSS2）        text-indent 文本缩进 2em(2个字) 50pxline-height 设置行间距离 不允许使用负值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-背景属性"><a href="#4-背景属性" class="headerlink" title="4 背景属性"></a>4 背景属性</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">backgroundbackground:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>背景颜色</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>背景图像</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>背景重复</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>背景附件</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>背景位置</span><span class="token punctuation">></span></span>例：background:red url('./123.png') no-repeat 100px 10px;        background-color 设置背景色，或设置为transparent（透明）background-image 背景图片 url 或者 nonebackground-repeat 背景重复 repeat | repeat-x | repeat-y | no-repeatbackground-attachment 背景附件 scroll | fixedbackground-position 背景位置            background-position: 水平方向 垂直方向background-position:left top;background-position:100px 100px;        left | center | right (横向) top | center | bottom (纵向) 或者使用百分比或者数值    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-列表属性"><a href="#5-列表属性" class="headerlink" title="5 列表属性"></a>5 列表属性</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">list-style-typedisc         实心点    circle       圆圈    square       小方框    decimal      数字    lower-roman  小写罗马字    upper-roman  大写罗马字    lower-alpha  小写字母    upper-alpha  大写字母list-style-position 位置inside   标示在li里面outside  标示在li外面list-style-image 使用图片 url(./123.gif)list-style 复合属性list-style: type position imagelist-style: none<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-表格属性"><a href="#6-表格属性" class="headerlink" title="6 表格属性"></a>6 表格属性</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">table-layout 表格布局方式auto(默认)  布局将基于各单元格的内容，换言之，可能你给某个单元格定义宽度为100px，但结果可能并不是100px。表格在每一单元格读取计算之后才会显示出来，速度很慢 fixed       平布局是仅仅基于表格的宽度，表格边框的宽度，单元格间距，列的宽度，而和表格内容无关。也就是说，内容可能被裁切border-collapse 表格的行和单元格的边是合并还是独立separate (默认)  独立collapse  合并border-spacing 当表格边框独立时，行和单元格的边框在横向和纵向上的间距caption-side caption 在table上面还是下面top    bottom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">文档流        -网页是一个多层的结构，一层落着一层        -通过css可以分别为每一层来设置样式        作为用户来讲，只能看到最顶上一层这些层中，最底下的一层称为文档流，文档流是网页的基础        我们所创建的元素默认都是在文档流中进行排列        -对于我们元素主要有两个状态          -在文档中          -不在文档流中        -元素在文档流有什么特点            -块元素              -块元素会在页面中独占一行              -默认宽度是父元素的全部<span class="token punctuation">(</span>会把父元素撑满<span class="token punctuation">)</span>  -默认高度是被内容撑开            -行内元素<span class="token punctuation">(</span>内联样式<span class="token punctuation">)</span>              -行内元素不会独占页面一行，只占自身的大小              -行内元素在页面中左右水平排列  -行内元素的默认宽度和高度都是被内容撑开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="盒子是什么"><a href="#盒子是什么" class="headerlink" title="盒子是什么"></a>盒子是什么</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">CSS处理网页时，它认为每个元素都包含在一个矩形盒子里。为什么是矩形盒子呢？因为如果把所有的元素都想象成盒子，那么我们对网页的布局就相当于是摆放盒子。我们只需要将相应的盒子摆放到网页中相应的位置即可完成网页的布局。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显示模式转换-文档流"><a href="#显示模式转换-文档流" class="headerlink" title="显示模式转换(文档流)"></a>显示模式转换(文档流)</h4><p>可以通过给元素设置 display 属性，来改变元素的显示模式</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">隐藏元素（元素将在页面中完全消失）</td></tr><tr><td align="center">block</td><td align="center">设置元素为块元素</td></tr><tr><td align="center">inline</td><td align="center">默认。设置元素为行内元素 (内联元素)</td></tr><tr><td align="center">inline-block</td><td align="center">设置元素为行内块元素。（CSS2.1 新增的值）</td></tr></tbody></table><h4 id="盒子模型-1"><a href="#盒子模型-1" class="headerlink" title="盒子模型"></a>盒子模型</h4><img src="../img/html+css/image-20210626170832235.png" style="zoom:50%;" /><pre class="line-numbers language-css" data-language="css"><code class="language-css">一个盒子模型有以下四部分组成：    <span class="token function">Margin</span><span class="token punctuation">(</span>外边距<span class="token punctuation">)</span> 清除边框外的区域，外边距是透明的。    <span class="token function">Border</span><span class="token punctuation">(</span>边框<span class="token punctuation">)</span> 围绕在内边距和内容外的边框。    <span class="token function">Padding</span><span class="token punctuation">(</span>内边距<span class="token punctuation">)</span> 清除内容周围的区域，内边距是透明的。    <span class="token function">Content</span><span class="token punctuation">(</span>内容<span class="token punctuation">)</span> 盒子的内容，显示文本和图像。一个盒子实际的大小 = 内容的大小 + padding + border宽度。外边距不计入盒子的大小。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内容区"><a href="#内容区" class="headerlink" title="内容区"></a>内容区</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">内容区决定这个盒子能装多少子元素① 设置内容区尺寸 css 属性    width 内容区宽度    max-width 内容区最大宽度    min-width 内容区最小宽度    height 内容区高度    max-height 内容区最大高度    min-height 内容区最小高度② 内容区默认大小如果没有设置宽度，块级元素会根据父元素大小自动计算，行内元素和行内块元素宽度根据内容大小计算。如果没有设置高度，块级、行内、行内块都会根据内容大小计算。width 默认是 auto<span class="token punctuation">,</span>auto分为4种情况：fill-available：充分利用可使用空间（块标签）<span class="token property">fit-content</span><span class="token punctuation">:</span> 收缩到合适（浮动，定位）<span class="token property">min-content</span><span class="token punctuation">:</span> 收缩到最小（表格中常见）<span class="token property">max-content</span><span class="token punctuation">:</span>超出容器限制（英文单词较长，或者设置了不换行，就会超出容器限制）height 的默认值也是 auto，其高度由内部元素堆叠而成，也就是内部元素撑起来的。块级元素的默认宽度如何根据父元素宽度自动计算：元素设置了外边距、内边距、边框都会压缩该元素内容区域的宽度。内容宽度 = 父元素的内容宽度 - margin（子元素） - padding（子元素） - border（子元素）。③ 设置内容区溢出overflow 设置内容溢出方式    值          描述                          visible    默认值。内容不会被修剪，会呈现在元素框之外。      hidden     内容会被修剪，隐藏超出盒子的内容      scroll     内容会被修剪，但是浏览器会添加滚动条以便查看其余的内容。auto       如果内容被修剪，则浏览器会根据需要添加滚动条以便查看其余的内容。inherit    规定应该从父元素继承 overflow 属性的值。overflow-x 设置水平方向的内容溢出方式，值与overflow属性相同。overflow-y 设置垂直方向的内容溢出方式，值与overflow属性相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><img src="../img/html+css/image-20210601121914425.png" style="zoom:67%;" /><pre class="line-numbers language-css" data-language="css"><code class="language-css">顾名思义，内边距 padding 也叫补白或填充，是边框和内容之间的空间。① padding 相关属性padding 设置各个方向的内边距，复合属性，可以指定多个值。padding-left 设置左内边距。padding-right 设置右内边距。padding-top 设置上内边距。padding-bottom 设置下内边距。例如：<span class="token property">padding</span><span class="token punctuation">:</span>10px 20px 30px 40px这样会设置元素的上、右、下、左四个方向的内边距。<span class="token property">padding</span><span class="token punctuation">:</span>10px 20px 30px<span class="token punctuation">;</span>分别指定上、左右、下四个方向的内边距<span class="token property">padding</span><span class="token punctuation">:</span>10px 20px<span class="token punctuation">;</span>分别指定上下、左右四个方向的内边距<span class="token property">padding</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span>同时指定上左右下四个方向的内边距同时在css中还提供了padding-top、padding-right、padding-right、padding-bottom分别用来指定四个方向的内边距。② padding 设置规则padding 不支持负值，也不能设置为“auto”。给行内元素设置 padding 的时候，水平方向非常正常，但是垂直方向设置了 padding 之后不能撑开元素的距离。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"> 边框：边框属于盒子的边缘，边框里面属于盒子内部，出了边框都是盒子的外部① 边框相关属性border 复合属性 border-left|border-right|border-top|border-bottom   <span class="token property">border</span><span class="token punctuation">:</span> 边框宽度  边框样式  边框颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="边框的样式"><a href="#边框的样式" class="headerlink" title="边框的样式"></a>边框的样式</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css">border-style 边框线风格 border-top-style | border-right-style | border-bottom-style | border-left-style    dotted  点线    dashed  虚线    solid   实线    double  双实线    groove  槽状线    ridge   脊线    inset   内嵌效果    outset  外凸效果border-color 边框颜色 border-left-color | border-right-color | border-top-color | border-bottom-colorborder-width 边框宽度 border-left-width | border-right-width | border-top-width | border-bottom-width    粗细 样式  颜色<span class="token property">border-left</span><span class="token punctuation">:</span>1px solid red<span class="token punctuation">;</span>② 边框位置边框不会显示在 margin 中。背景颜色在边框中显示（实线的时候，我们看不到）。背景图片原点没有从边框开始 而是从padding开始的，但是可能会平铺到边框中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><img src="../img/html+css/image-20210601122103518.png" style="zoom:67%;" /><pre class="line-numbers language-css" data-language="css"><code class="language-css">外边距是元素边框与周围元素相距的空间。① 外边距相关属性    margin 设置各个方向的内边距，复合属性，可以指定多个值。    margin-left 设置左外边距。    margin-right 设置右外边距    margin-top 设置上外边距    margin-bottom 设置下外边距<span class="token property">margin</span><span class="token punctuation">:</span>0 auto 水平居中margin-top和margin-left是改变自己的位置margin-right和margin-bottom是挤别人 不移动自己<span class="token comment">/* margin 的复合属性 */</span><span class="token comment">/* 一个值  上下左右*/</span><span class="token property">margin</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token comment">/* 两个值   上下   左右*/</span><span class="token property">margin</span><span class="token punctuation">:</span>10px 20px<span class="token punctuation">;</span><span class="token comment">/* 三个值  上  左右  下*/</span><span class="token property">margin</span><span class="token punctuation">:</span>10px 20px 30px<span class="token punctuation">;</span><span class="token comment">/* 四个值 上  右    下   左*/</span><span class="token property">margin</span><span class="token punctuation">:</span> 10px 20px 30px 40px<span class="token punctuation">;</span>② margin 设置规则margin 可以设置为负值。对于行内元素，只有水平方向设置 margin 是有效的。mamargin 为负值的情况：    margin-left为负：    元素向左移动，并且原来的位置不保留（后边元素会紧跟上一起移动）；    元素向左移动，并不会挤到前边的兄弟元素，而是覆盖前边的兄弟元素。    margin-right为负：    元素视觉大小不发生变化<span class="token punctuation">;</span>    但是元素实际所占用的空间变小，后边元素会跟上来或者是撑不开父级宽度。    margin-top为负：    元素向上移动，并且原来的位置不保留（下边元素会紧跟上一起移动），    元素向上移动，并不会挤到上边的兄弟元素，而是覆盖上边的兄弟元素    margin-bottom为负：    元素视觉大小不发生变化；    但是元素实际所占用的空间变小，下边元素会跟上来或者是撑不开父级高度。③ margin 塌陷在一个元素里，第一个子元素的 margin-top 会塌陷给父级；最后一个子元素的 margin-bottom 会塌陷给父级。解决 margin塌陷的方法：给父元素设置一个边框 边框的宽度不能为 0 <span class="token punctuation">;</span> 防止影响视觉，可以设置透明（transparent）颜色。父元素开启BFC（块级格式化上下文），开启 BFC 的方法很多，如设置 <span class="token property">overflow</span><span class="token punctuation">:</span>hidden。④ margin 合并左右两个兄弟元素，分别设置 margin-right（前面的元素） 和 margin-left（后面的元素），元素之间的间距是 margin-right 和 margin-left 之和。上下两个兄弟元素，分别设置 margin-bottom（前面的元素）和 margin-top（后面的元素）<span class="token punctuation">,</span> 两个元素之间的间距会取 margin-bottom 和 margin-top 之间最大的那个值，称之为 margin 合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="外边距折叠"><a href="#外边距折叠" class="headerlink" title="外边距折叠"></a>外边距折叠</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css">垂直方向的外边距会发生折叠现象。相邻的垂直方向外边距会折叠为其中最大的那个外边距。两个正值，取最大值两个负值，取绝对值较大的一正一负，取和box-sizing用于改变width和height值的具体意义。示例：<span class="token property">box-sizing</span> <span class="token punctuation">:</span> content-box内容盒子，width和heigh设置内容区的大小<span class="token property">box-sizing</span> <span class="token punctuation">:</span> border-box边框盒子，width和height设置整个盒子的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮动-浮动流"><a href="#浮动-浮动流" class="headerlink" title="浮动(浮动流)"></a>浮动(浮动流)</h3><h4 id="1-浮动的来历"><a href="#1-浮动的来历" class="headerlink" title="1 浮动的来历"></a>1 浮动的来历</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">浮动设计的最初想法是为了实现文字环绕图片的效果。后来浮动代替表格布局成为了主流的布局方式。CSS的<span class="token function">Float</span><span class="token punctuation">(</span>浮动<span class="token punctuation">)</span>，元素可以围绕其他元素向左或向右被推动    设置浮动，脱离普通文档流。    浮动的元素，如果不设置宽度，会尽可能的窄（被内容撑开）    浮动元素之后的元素将围绕它 浮动元素之前的元素将不会受到影响。    float 设计的初始想法仅仅是为了做文字环绕图片。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2设置浮动"><a href="#2设置浮动" class="headerlink" title="2设置浮动"></a>2设置浮动</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">之前学习的三种显示模式被称为文档流在 CSS 中，我们通过 float 属性实现元素的浮动浮动分为左浮动和右浮动，值分别是left和right.item</span> <span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">&#125;</span><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">&#125;</span><span class="token comment">/*float 属性的默认值是 none  表示没有浮动*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">浮动造成的影响：当子元素是浮动时，父元素没有设置固定高度，由于子元素是飘起来的状态，父元素会认为没有内容撑开自身的高度，此时造成高度塌陷，父元素的高度是0。解决方案：    1) 给浮动元素的父级设置高度 height（不推荐使用）    缺点：很多情况下元素的高度都是不确定的。    2) 以浮制浮，给浮动元素的父元素设置浮动，原理是开启BFC（不推荐使用）    缺点：只有在父级需要浮动的时候，可以这么清除，否则父级的浮动会继续影响其他元素。    3) 给父级设置 overflow：hidden；，原理也是开启BFC。    优点：简单快捷，    缺点：元素超出的时候，会隐藏超出部分。    5) clear 浮动清除法：给浮动元素的下边添加一个块元素，书写样式 clear:both。    缺点：增加额外的结构，不符合语义化标准    6) after 伪元素清浮动（推荐）    给浮动元素的父元素添加 after 伪类，给 after 伪类设置样式 clear:both。    可以给所有浮动元素的父元素一个 clearfix 的类名，当一个元素需要清除浮动的时候，直接设置 clearfix 类名即可。    .clearfix::after</span><span class="token punctuation">&#123;</span>        <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>      <span class="token comment">/* 必须拥有content属性  内容为空*/</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token comment">/* 必须块标签才能清浮动 */</span>        <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>     /* 清除浮动* /    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><h5 id="定位的概念"><a href="#定位的概念" class="headerlink" title="定位的概念"></a>定位的概念</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">1) 除非专门指定，否则所有框都在普通流中定位。也就是说，普通流中的元素的位置由元素在 HTML 中的位置决定。2) 定位的基本思想很简单，它允许你定义元素相对于其正常位置应该出现的位置，或者相对于父元素甚至浏览器窗口本身的位置。3) 通过使用 position 属性，我们可以选择 4 种不同类型的定位。position属性是把元素放置到一个静态的、相对的、绝对的、或固定的位置中。position属性的四个值分别对应 static、relative、absolute、fixed。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="相对定位-占位定位"><a href="#相对定位-占位定位" class="headerlink" title="相对定位(占位定位)"></a>相对定位(占位定位)</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">使用相对定位的盒子,会相对于它原来的位置,通过偏移量指定的距离,到达新的位置使用相对定位的盒子,仍在标准流中,它对父块好兄弟盒子没有任何影响(相当于车走了 车位还在)position:relative开启元素的相对定位相对定位开启后：元素不会从文档流中移除元素相对于其自身的静态位置进行定位元素会提升层级.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    //要配合偏移量       <span class="token property">top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">使用绝对定位的盒子以它"最近"的一个"已经定位"的"祖先元素"为基准进行偏移. 如果没有已经定位的"祖先元素", 那么会以根元素 html 为基准进行定位。绝对定位的框从标准流中脱离,这意味着它们对其后的兄弟盒子的定位没有影响,其他的盒子就好像这个盒子不存在一样position:absolute开启元素的绝对定位1.开启绝对定位后，如果不设置偏移量元素的位置不会发生变化     2.开启绝对定位后，元素会从文档流中脱离  不会占位置     3.绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开     4.绝对定位会使元素提升一个层级     5.绝对定位元素是相对于其包含块进行定位的.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">&#125;</span>相对定位可以和浮动一起使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">以视口（viewport）为基准进行定位窗口滚动时,依然保持位置不变position:fixed开启元素的固定定位固定定位开启后：    - 将元素的position属性设置为fixed则开启了元素的固定定位                    - 固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样                       唯一不同的是固定定位永远参照于浏览器的视口进行定位                       固定定位的元素不会随网页的滚动条滚动   元素从文档流中移除   元素相对于视口定位.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="空间位置-z-index"><a href="#空间位置-z-index" class="headerlink" title="空间位置 z-index"></a>空间位置 z-index</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">对于开启了定位元素，可以通过z-index属性来指定元素的层级                   z-index需要一个整数作为参数，值越大元素的层级越高                       元素的层级越高越优先显示                   如果元素的层级一样，则优先显示靠下的元素                   祖先的元素的层级再高也不会盖住后代元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><h4 id="重置样式"><a href="#重置样式" class="headerlink" title="重置样式"></a>重置样式</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">很多元素是具有默认样式的，比如 p 元素有默认的上外边距和下外边距，h1~h6 标题元素也有默认的上外边距和下外边距且字体加粗，body 元素有默认的外边距，超链接有默认的字体颜色和下划线，ul 元素有默认的左内边距 等等。在不同的浏览器下，元素的默认样式有时候有些差异，这样元素的默认样式就未我们的开发带来了一些问题。所以，在开发页面之前，我们会选择重置元素的默认样式，这里介绍三种重置方案。第一种方式 使用全局选择器重置样式*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>此种方法，在讲解案例的时候可以简单用一下，但实际开发中是不会用这种方式的，因为 * 是选择所有的元素，而并不是所有的元素都有默认样式，改方式效率较低。Reset.css选择到具有默认样式的元素，清空其默认的样式。<span class="token comment">/* 基础设置 */</span><span class="token selector">body,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,input,textarea,th,td</span><span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">ul,ol</span> <span class="token punctuation">&#123;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">img</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 底部留白 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">b,strong</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1,h2,h3,h4,h5,h6</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 父元素字号的百分比 */</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">i,em</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 不倾斜 */</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">u,ins,s,del</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 去掉中划线和下划线 */</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">table</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span>    <span class="token comment">/* 相当于是cellspacing */</span>    <span class="token property">border-spacing</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token comment">/* 1px边框 */</span>    <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">td,th</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">input,button</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 去掉轮廓线 */</span>    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 风格设置 */</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font</span><span class="token punctuation">:</span> 12px/1.3 <span class="token string">"Microsoft YaHei"</span><span class="token punctuation">,</span> Tahoma<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> <span class="token string">"\5b8b\4f53"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>#c00<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>各网站都会定义自己的重置样式表，请参考 <span class="token property">http</span><span class="token punctuation">:</span>//www.unclealan.cn/index.php/front/174.htmlNormalize.cssNormalize.css是一种CSS reset的替代方案。它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。<span class="token property">官网地址：http</span><span class="token punctuation">:</span>//necolas.github.io/normalize.css/<span class="token property">GitHub</span><span class="token punctuation">:</span> <span class="token property">https</span><span class="token punctuation">:</span>//github.com/necolas/normalize.css/相对于 Reset.css， Normalize.css 有如下特点：        保护有价值的浏览器默认样式而不是完全去掉它们。        新增对 HTML5 元素的设置。        修复浏览器 BUG 并保证各浏览器的一致性，修复的 BUG 有预格式化文字的 font-size 问题、在 IE9 中 SVG 的溢出、许多出现在各浏览器和操作系统中的与表单相关的 BUF 等。        Normalize.css 对并集选择器的使用比较谨慎，有效避免调试工具杂乱。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">行内元素或行内块元素让行内元素或行内块元素进行居中，需要对其父元素设置文本对齐方式，因为行内元素或行内块元素可以被当做文本处理。让行内元素或行内块元素水平居中对齐，在其父元素上设置 <span class="token property">text-align</span><span class="token punctuation">:</span>center。让行内元素或行内块元素垂直居中对齐，在其父元素上设置 line-height 属性，行高的值与高度相等即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">继承为祖先元素所设置样式，也会同时应用到其后代元素上继承的存在大大的简化了样式的编写今天只为祖先元素设置样式即可让所有的后代元素都同时具有该样式在开发中可以将一些公共的样式，统一设置到祖先元素上，这样即可让所有的元素都具有该样式就像父亲的财产会遗传给儿子一样，在CSS中祖先元素的样式同样也会被子元素继承。继承是指应用在一个标签上的那些CSS样式会同时被应用到其内嵌标签上。比如为父元素设置了字体颜色，子元素也会应用上相同的颜色。当然并不是所有的样式都会被继承，比如：背景相关的样式还有布局相关的默认样式，通常情况下都会为元素设置一些默认样式默认样式的存在会影响页面的布局，通常情况在编写网页时，必须要去除浏览器的默认样式(PC端的页面) &lt;!--       引入清除样式表        reset：直接去除了浏览器的默认样式        normalize：对默认样式进行统一 --> body</span> <span class="token punctuation">&#123;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>//去除项目符号      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="favicon-图标"><a href="#favicon-图标" class="headerlink" title="favicon 图标"></a>favicon 图标</h4><img src="../img/html+css/image-20210626173032314.png" style="zoom:67%;" /><pre class="line-numbers language-css" data-language="css"><code class="language-css">favicon 图标 一般用于作为缩略的网站标志<span class="token punctuation">,</span>它显示位于浏览器的地址栏或者在标签上，用于显示网站的logo，如图红圈的位置， 目前主要的浏览器都支持 favicon 图标。favicon 图标文件一般命名为 favicon.ico， 是后缀为 .ico 的图片文件。使用方法一：把 ico 图标文件命名为 favicon.ico <span class="token punctuation">,</span>放在网站根目录下，网页会自动获取 ico 图标。使用方法二：在网页中使用 link 标签自行引入 ico 文件。&lt;link rel=<span class="token string">"shortcut icon"</span> type=<span class="token string">"images/x-icon"</span> href=<span class="token string">"favicon.ico"</span>>favicon 图标的制作在线工具 <span class="token property">http</span><span class="token punctuation">:</span>//www.ico51.cn/在线工具 <span class="token property">http</span><span class="token punctuation">:</span>//www.bitbug.net/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><p>概述:HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。</p><p>HTML5的设计目的是为了在移动设备上支持多媒体。</p><p>总结:HTML5就是HTML4的一个升级(加入了新的语义化标签和语义化的属性及新的表单控件)</p><h3 id="HTML5中的新特性"><a href="#HTML5中的新特性" class="headerlink" title="HTML5中的新特性"></a>HTML5中的新特性</h3><ul><li>用于绘画的 canvas 元素</li><li>用于媒介回放的 video 和 audio 元素</li><li>对本地离线存储的更好的支持</li><li>新的特殊内容元素，比如 article、footer、header、nav、section</li><li>新的表单控件，比如 calendar、date、time、email、url、search</li></ul><h3 id="HTML5的改进"><a href="#HTML5的改进" class="headerlink" title="HTML5的改进"></a>HTML5的改进</h3><ul><li>新元素</li><li>新属性</li><li>完全支持 CSS3</li><li>Video 和 Audio</li><li>2D/3D 制图</li><li>本地存储</li><li>本地 SQL 数据</li><li>Web 应用</li></ul><h3 id="HTML的优势"><a href="#HTML的优势" class="headerlink" title="HTML的优势"></a>HTML的优势</h3><p>跨平台:PC和移动端全部都支持—提高用户体验</p><p>网页的功能扩展:不需要下载客户端或者插件就可以看视频,玩游戏,或者操作更加简单</p><p>降低成本:开发者针对不同的操作系统开发,都需要自己研究,现在不需要了,一次开发多次使用,可以直接封装非app—时间和资金成本全部降低—跨系统移植</p><p>搜索引擎优化:HTML5新增的标签，使搜索引擎更加容易抓取和索引网页，从而驱动网站获得更多的点击流量。</p><h3 id="HTML中的语义元素"><a href="#HTML中的语义元素" class="headerlink" title="HTML中的语义元素"></a>HTML中的语义元素</h3><p>语义化标签:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>        定义页面或 section 的页眉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>        定义页面或 section 的页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>                定义页面的主要导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>            定义文档的主要内容 (whatwg 没有语义， IE不支持)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>     定义页面中的一节或文章中的一段，里面通常带有标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        定义文章、博客、论坛帖子、用户评论等<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>            定义侧边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span>        包裹连续的标题，如文章主标题和副标题的组合 （w3c将其删除）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语义化的好处:</p><p>​        HTML5可以让很多更语义化结构化的代码标签代替大量的无意义的div标签这种语义化的特性提升了网页的质量和语义对搜索引擎更加的友好</p><p>注意:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">hgroup元素代表 网页 或 section 的标题进行组合，当元素有多个层级时，该元素可以将h1到h6元素放在其内，譬如文章的主标题和副标题的组合<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>HTML 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>这是一篇介绍HTML 5语义化标签和更简洁的结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span>hgroup使用注意：如果只需要一个h1-h6标签就不用hgroup如果有连续多个h1-h6标签就用hgroup如果有连续多个标题和其他文章数据，h1-h6标签就用hgroup包住，和其他文章元数据一起放入header标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">header 元素代表 网页 或 section 的页眉。通常包含h1-h6元素或hgroup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网站标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>网站副标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>header使用注意：可以是“网页”或任意“section”的头部部分没有个数限制。如果hgroup或h1-h6自己就能工作的很好，那就不要用header。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">nav元素代表页面的导航链接区域。用于定义页面的主要导航部分。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>HTML 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>CSS3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>nav使用注意：用在整个页面主要导航部分上，不合适就不要用nav元素；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">section元素代表文档中的 节 或 段，段可以是指一篇文章里按照主题的分段；节可以是指一个页面里的分组。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>section是啥？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>关于section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>section的介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>关于其他<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>关于其他section的介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>section使用注意：section不是一般意义上的容器元素，如果想作为样式展示和脚本的便利，可以用div。article、nav、aside可以理解为特殊的section，所以如果可以用article、nav、aside就不要用section，没实际意义的就用div<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">article元素最容易跟section和div容易混淆，其实article代表一个在文档，页面或者网站中自成一体的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一篇文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文章内容..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>版权：html5jscss网所属，作者：damu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>article使用注意：独立文章：用article单独的模块：用section没有语义的：用div<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">aside元素被包含在article元素中作为主要内容的附属信息部分，其中的内容可以是与当前文章有关的相关资料、标签、名次解释等在article元素之外使用作为页面或站点全局的附属信息部分。最典型的是侧边栏，其中的内容可以是日志串连，其他组的导航，甚至广告，这些内容相关的页面。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>作者简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>小北，前端一枚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>aside使用总结：aside在article内表示主要内容的附属信息，在article之外则可做侧边栏如果是广告，其他日志链接或者其他分类导航也可以用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">footer元素代表 网页 或 section 的页脚，通常含有该节的一些基本信息，譬如：作者，相关文档链接，版权资料。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    COPYRIGHT@damu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>footer使用注意：可以是 网页 或任意 section 的底部部分；没有个数限制，除了包裹的内容不一样，其他跟header类似。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML5标签演示"><a href="#HTML5标签演示" class="headerlink" title="HTML5标签演示"></a>HTML5标签演示</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是header的副标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- /header --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是content的副标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- /header --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是footer的副标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- /header --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检测网址:<a href="https://gsnedders.html5.org/outliner/">https://gsnedders.html5.org/outliner/</a></p><h3 id="HTML5中新增的DOM操作介绍"><a href="#HTML5中新增的DOM操作介绍" class="headerlink" title="HTML5中新增的DOM操作介绍"></a>HTML5中新增的DOM操作介绍</h3><p>1.获取元素的方式:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"选择器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>单个的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">document.querySelectorAll(&quot;选择器&quot;);多个的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">divObj<span class="token punctuation">.</span>classList 返回的是一个存放了所有类样式名字的数组<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>添加类样式<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>删除类样式<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>切换类样式<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是否包含某个类样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML5中自定义属性的操作"><a href="#HTML5中自定义属性的操作" class="headerlink" title="HTML5中自定义属性的操作"></a>HTML5中自定义属性的操作</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dv<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>小黑<span class="token punctuation">"</span></span> <span class="token attr-name">data-des</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>真黑啊<span class="token punctuation">"</span></span> <span class="token attr-name">data-sex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//HTML5中新增加了一个关于自定义属性的数据集:dataset--统一写法,方便操作</span>对象<span class="token punctuation">.</span>dataset<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>获取的是所有自定义属性的数组添加自定义属性<span class="token operator">:</span> 对象<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>属性名字<span class="token operator">=</span><span class="token string">"值"</span><span class="token punctuation">;</span>获取自定义属性<span class="token operator">:</span> 对象<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>属性名<span class="token punctuation">;</span>注意自定义属性名字如果是多个单词组合该如何添加<span class="token operator">?</span><span class="token punctuation">(</span>驼峰命名法即可<span class="token punctuation">)</span>对象<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myFace<span class="token operator">=</span><span class="token string">"值"</span><span class="token punctuation">;</span>最终在html标签上就可以看到<span class="token operator">:</span>data<span class="token operator">-</span>my<span class="token operator">-</span>face<span class="token operator">=</span><span class="token string">"值"</span><span class="token punctuation">;</span>可以使用键值的方式来设置自定义属性<span class="token operator">:</span>对象<span class="token punctuation">.</span>dataset<span class="token punctuation">[</span><span class="token string">"属性名字"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"值"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML5中的可编辑属性"><a href="#HTML5中的可编辑属性" class="headerlink" title="HTML5中的可编辑属性"></a>HTML5中的可编辑属性</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  可以编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>页面中的div可以直接进行编辑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML5和HTML4的对比"><a href="#HTML5和HTML4的对比" class="headerlink" title="HTML5和HTML4的对比"></a>HTML5和HTML4的对比</h3><p>1.写法不同:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">!   直接tab键---->页面中h5的html标签内容全部导入html:4s 直接tab键--->页面中h4严格版的标签内容全部导入还有其他的写法:html:4t等等----不介绍了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.要求不同:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">HTML5的写法比较随意,怎么写浏览器都认识HTML4(严格)的写法,必须要严格的写验证的网址https://validator.w3.org/check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html;charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>HTML4的写法(严格的模式)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.DOCTYPE和浏览器渲染模式</p><pre class="line-numbers language-none"><code class="language-none">DOCTYPE和浏览器渲染模式   DOCTYPE，或者称为 Document Type Declaration（文档类型声明，缩写 DTD）   通常情况下，DOCTYPE 位于一个 HTML 文档的最前面的位置，位于根元素 HTML 的起始标签之前。   因为浏览器必须在解析 HTML 文档正文之前就确定当前文档的类型，以决定其需要采用的渲染模式，   不同的渲染模式会影响到浏览器对于 CSS 代码甚至 JavaScript 脚本的解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">到目前为止，各浏览器主要包含了三种模式。在 HTML5 草案中，更加明确的规定了模式的定义：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>传统名称</th><th>HTML5草案名</th><th>document.compatMode返回值</th></tr></thead><tbody><tr><td>standards mode(strict mode)</td><td>no-quirks mode</td><td>CSS1Compat</td></tr><tr><td>almost standards mode</td><td>limited-quirks mode</td><td>CSS1Compat</td></tr><tr><td>quirks mode</td><td>quirks mode</td><td>BackCompat</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">document.compatMode    document.compatMode 属性最初由微软在 IE 中创造出来，这是一个只读的属性，返回一个字符串，    只可能存在两种返回值：      BackCompat：标准兼容模式未开启（怪异模式）      CSS1Compat：标准兼容模式已开启（标准模式）在现代主流浏览器中，其实怪异模式的渲染和标准与几乎标准间没有太大的差别（ie9+ 谷歌 火狐 ...）    ie5.5之前都是ie自己的渲染模式，怪异模式    ie6才开始慢慢支持标准，标准模式，在ie6 中怪异和标准模式的区别最大    ie7 8 9都是基于标准模式升级的，他们理论上存在怪异模式HTML5提供的&lt;DOCTYPE html&gt;是标准模式，向后兼容的,等同于开启了标准模式，那么浏览器就得老老实实的按照W3C的 标准解析渲染页面一个不含任何 DOCTYPE 的网页将会以 怪异(quirks) 模式渲染。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结:写页面都要加&lt;!DOCTYPE&gt;</strong></p><p>5.根元素</p><p>H4中的根元素:<html xmlns="http://www.w3.org/1999/xhtml">可以继续用,H5中省略的</p><p>xmlns:这是XHTML1.0的东西，<br>   它的意思是在这个页面上的元素都位于<a href="http://www.w3.org/1999/xhtml%E8%BF%99%E4%B8%AA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%86%85">http://www.w3.org/1999/xhtml这个命名空间内</a><br>   但是HTML5中的每个元素都具有这个命名空间，不需要在页面上再显示指出</p><p>6.head元素:</p><pre class="line-numbers language-none"><code class="language-none">MIME类型:   每当浏览器请求一个页面时，web服务器会在发送实际页面内容之前，先发送一些头信息。   浏览器需要这些信息来决定如何解析随后的页面内容。最重要的是Content-Type      比如: Content-Type:text&#x2F;html      text&#x2F;html:即这个页面的&quot;内容类型&quot;,或者称为MIME类型。这个头信息将唯一确定某个资源的本质是什么   也决定了它应该如何被呈现。      图片也有自己的MIME类型           jpg:image&#x2F;jpeg         png:image&#x2F;png         js也有自己的MIME类型，css也有自己的MIME类型，      任何资源都有自己的MIME类型，整个web都依靠MIME类型来运作                  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;:   告诉浏览器你应该使用哪种编码来解析网页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="CSS3-概述"><a href="#CSS3-概述" class="headerlink" title="CSS3 概述"></a>CSS3 概述</h2><h3 id="1-什么是CSS3"><a href="#1-什么是CSS3" class="headerlink" title="1 什么是CSS3"></a>1 什么是CSS3</h3><ul><li>CSS3是CSS2的升级版本，3只是版本号，它在CSS2.1的基础上增加了很多强大的新能</li><li>CSS3语言开发是朝着模块化发展的 <a href="https://www.w3.org/Style/CSS/current-work.html">https://www.w3.org/Style/CSS/current-work.html</a></li></ul><h3 id="2-CSS的新特性"><a href="#2-CSS的新特性" class="headerlink" title="2. CSS的新特性"></a>2. CSS的新特性</h3><ul><li>强大的CSS3选择器</li><li>抛弃图片的视觉效果 圆角 阴影 渐变 半透明 图片边框, 可以通过CSS3实现,而不用借助于JavaScript或图片</li><li>新增的背景功能</li><li>盒子模型的变化</li><li>阴影效果</li><li>多列布局与弹性盒模型布局</li><li>Web字体与WebFont图标</li><li>颜色与透明度</li><li>圆角与边框</li><li>CSS变形</li><li>CSS过渡与动画交互</li><li>媒体特性与Response布局</li></ul><p><strong>注意：</strong> 可以通过网站 <a href="https://caniuse.com/">https://caniuse.com/</a> 来查看浏览器对某个CSS模块的支持情况。</p><h2 id="取值与单位"><a href="#取值与单位" class="headerlink" title="取值与单位"></a>取值与单位</h2><h3 id="1-新增长度单位"><a href="#1-新增长度单位" class="headerlink" title="1 新增长度单位"></a>1 新增长度单位</h3><ul><li>rem <strong>相对于根元素(即html元素)font-size计算值的倍数</strong></li><li>vm <strong>视口被均分为100单位的vw</strong></li><li>vh <strong>视口被均分为100单位的vh</strong></li><li>vmax <strong>相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax</strong></li><li>vmin <strong>相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin</strong></li></ul><h3 id="2-新增颜色单位"><a href="#2-新增颜色单位" class="headerlink" title="2 新增颜色单位"></a>2 新增颜色单位</h3><ul><li><p>RGBA(R,G,B,A) A：Alpha透明度。取值0~1之间。</p></li><li><p>HSL(H,S,L)</p><blockquote><p>H: Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</p><p>S：Saturation(饱和度)。取值为：0.0% - 100.0%</p><p>L：Lightness(亮度)。取值为：0.0% - 100.0%</p></blockquote></li><li><p>HSLA(H,S,L,A)</p></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="1层级选择器"><a href="#1层级选择器" class="headerlink" title="1层级选择器"></a>1层级选择器</h3><ul><li><p>后代选择器 <code>E F</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">后代选择器可以根据标签的关系，为处在元素内部的代元素设置样式。语法：祖先元素 后代元素 后代元素</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token selector">例子：div span</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">比如p strong 会选中页面中所有的p元素内的strong元素。.news-list li</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子选择器 <code>E&gt;F</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">子元素选择器可以给另一个元素的子元素设置样式。语法：父元素 > 子元素</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">比如body > h1将选择body子标签中的所有h1标签。.news-list>li</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>相邻兄弟选择器 <code>E+F</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">除了根据祖先父子关系，还可以根据兄弟关系查找元素。语法:选择紧邻兄弟元素兄弟元素 + 兄弟元素</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">选择后续兄弟元素  后面所有兄弟的元素选择器兄弟元素 ~ 兄弟元素</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.active+.item</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通用兄弟选择器 <code>E~F</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.active~li</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-属性选择器"><a href="#2-属性选择器" class="headerlink" title="2 属性选择器"></a>2 属性选择器</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">属性选择器，可以根据元素的属性来选中元素语法：div[title]&#123;&#125;[属性名]&#123; &#125;[属性名="属性值"]&#123; &#125;[属性名|="属性值"]&#123; &#125;[属性名~="属性值"]&#123; &#125;[属性名*="属性值"]&#123; &#125; 包含[属性名^="属性值"]&#123; &#125; 开始[属性名$="属性值"]&#123; &#125; 结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3伪类选择器"><a href="#3伪类选择器" class="headerlink" title="3伪类选择器"></a>3伪类选择器</h3><p>通过伪类选择器可以为文档中不一定真实存在的结构指定样式，或者为某些元素的特定状态指定样式。</p><h4 id="3-1-状态伪类选择器"><a href="#3-1-状态伪类选择器" class="headerlink" title="3.1 状态伪类选择器"></a>3.1 状态伪类选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">:link 正常的链接（没访问过的链接）:visited 访问过的链接:hover 鼠标移入的状态:active 鼠标点击的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2结构伪类选择器"><a href="#3-2结构伪类选择器" class="headerlink" title="3.2结构伪类选择器"></a>3.2结构伪类选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">.list li:first-child 第一个子元素:first-of-type 同类型的第一个子元素:last-child 最后一个子元素:last-of-type 同类型的最后一个子元素:nth-child(n) 第N个子元素:nth-of-type(n) 同类型的第N个子元素:only-child 唯一的子元素:only-of-type 同类型中唯一的子元素:empty 空元素:not() 除了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3否定伪类选择器"><a href="#3-3否定伪类选择器" class="headerlink" title="3.3否定伪类选择器"></a>3.3否定伪类选择器</h4><pre class="line-numbers language-htm" data-language="htm"><code class="language-htm">:not()选择除了某种元素以外的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-4伪元素选择器"><a href="#3-4伪元素选择器" class="headerlink" title="3.4伪元素选择器"></a>3.4伪元素选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">CSS中我们可以通过伪元素向页面中插入虚构的元素。伪元素默认是行内显示模式第一个字母::first-line元素的开始位置::before元素的结束位置::afterbefore和after必须结合content来使用选中元素设置样式::selection表示第一个字母::first-letter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5表单伪类"><a href="#3-5表单伪类" class="headerlink" title="3.5表单伪类"></a>3.5表单伪类</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">:enabled 可用元素（可以接受输入）:disabled 不可用元素:checked 选中的单选按钮或多选框:default 默认选中的单选、多选或下拉列表:valid 通过验证的数据:invalid 没通过验证的数据:in-range 合法范围内的输入值:out-of-range 超过范围的输入值:optional 可选值:read-write 可以修改的输入框:read-only 禁止修改的输入框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Web字体"><a href="#Web字体" class="headerlink" title="Web字体"></a>Web字体</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">可以把字体放置在服务器上,而不受制于客户端系统字体浏览器会根据指定的命令将对应的字体下载到本地缓存1998年@font-face加入到css2中, 但css2.1中又被移出,css3重新加入IE兼容性极好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="font-face语法"><a href="#font-face语法" class="headerlink" title="@font-face语法"></a>@font-face语法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">@font-face &#123;     font-family: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>identifier</span><span class="token punctuation">></span></span>;     src: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fontsrc</span><span class="token punctuation">></span></span> [<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>] [, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fontsrc</span><span class="token punctuation">></span></span> [<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>]]*;     [<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>]; &#125;        相关参数identifier 字体名称url 此值指的是你自定义的字体的存放路径，可以是相对路径也可以是绝路径string 字体的格式，主要用来帮助浏览器识别, format(fontType)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体工具"><a href="#字体工具" class="headerlink" title="字体工具"></a>字体工具</h3><p>web字体定制</p><ul><li><a href="https://www.iconfont.cn/webfont?spm=a313x.7781068.0.d81ec59f2#!/webfont/index">https://www.iconfont.cn/webfont?spm=a313x.7781068.0.d81ec59f2#!/webfont/index</a> 阿里Web字体</li><li><a href="http://www.youziku.com/">http://www.youziku.com/</a> 字体库网站</li><li><a href="https://www.ziti163.com/webfont/create.aspx">https://www.ziti163.com/webfont/create.aspx</a> 字体网</li></ul><p>web字体转换</p><ul><li><a href="https://www.fontsquirrel.com/tools/webfont-generator">https://www.fontsquirrel.com/tools/webfont-generator</a> FontSquirrel在线工具</li><li><a href="https://www.fontke.com/tool/fontface/">https://www.fontke.com/tool/fontface/</a> 字客网</li></ul><h3 id="常用的字体图标库"><a href="#常用的字体图标库" class="headerlink" title="常用的字体图标库"></a>常用的字体图标库</h3><ul><li>阿里图标 <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></li><li>Font Awesome <a href="http://fontawesome.dashgame.com/">http://fontawesome.dashgame.com/</a></li><li>Glyphicons Halfings <a href="http://glyphicons.com/">http://glyphicons.com/</a></li></ul><h3 id="字体图标制作工具"><a href="#字体图标制作工具" class="headerlink" title="字体图标制作工具"></a>字体图标制作工具</h3><ul><li>IcoMoon <a href="http://icomoon.io/app/#/select">http://icomoon.io/app/#/select</a></li></ul><h2 id="弹性盒模型"><a href="#弹性盒模型" class="headerlink" title="弹性盒模型"></a>弹性盒模型</h2><img src="../img/html5+css3/image-20210601171446616.png" style="zoom:67%;" /><pre class="line-numbers language-css" data-language="css"><code class="language-css">FlexBox是CSS提供的用于布局的一套新属性。弹性盒是一种简单而强大的布局方式，通过弹性盒可以指明空间的分布方式、内容的对齐方式和元素的视觉顺序。弹性盒能让元素对不同的屏幕尺寸和不同的显示设备做好适应准备。主要就是代替浮动完成页面的布局要使用弹性容器，必须先将一个元素设置为弹性容器，我们通过display设置弹性容器弹性容器（flex container）负责在所占空间内布置子元素，控制子元素的布局。弹性项（flex item）弹性容器的子元素称为弹性项或弹性元素。<span class="token property">使用display</span><span class="token punctuation">:</span><span class="token property">flex或display</span><span class="token punctuation">:</span>inline-flex将一个元素设置为弹性容器。flex块级弹性容器  一般用这个inline-flex行内弹性容器弹性容器中的每一个子元素都会变成弹性项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="弹性容器的属性"><a href="#弹性容器的属性" class="headerlink" title="弹性容器的属性"></a>弹性容器的属性</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">flex-direction  指定容器中弹性元素的排列方式可选值：    row 默认值 弹性元素在容器中 <span class="token punctuation">(</span>左向右<span class="token punctuation">)</span>    row-reverse  反向水平排列 <span class="token punctuation">(</span>右向左<span class="token punctuation">)</span>    column  垂直排列    column-reverse 垂直逆序flex-wrap置弹性元素是否在弹性容器中自动换行                可选值：                    nowrap 默认值，元素不会自动换行                    wrap 元素沿着辅轴方向自动换行                    wrap-reverse 元素沿着辅轴反方向换行flex-flow属性是flex-direction和flex-wrap两个属性的简写形式：语法：<span class="token property">flex-flow</span> <span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主轴和垂轴"><a href="#主轴和垂轴" class="headerlink" title="主轴和垂轴"></a>主轴和垂轴</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">主轴指弹性元素默认的排列方向。默认情况下，flex-direction设置为row，则主轴为水平方向，设置为column则主轴方向为垂直方向。垂轴指与主轴垂直的方向，主轴水平则垂轴垂直，主轴垂直则垂轴水平。主轴：默认是水平方向，左边开始，右边结束   垂轴：默认是垂直方向，上边开始 ，下边结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="弹性容器属性"><a href="#弹性容器属性" class="headerlink" title="弹性容器属性"></a>弹性容器属性</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">justify-content属性用于设置弹性元素在主轴上如何分布。      - 如何分配主轴上的空白空间（主轴上的元素如何排列）                    - 可选值：                        flex-start 元素沿着主轴起边排列  居开始                        flex-end 元素沿着主轴终边排列  居结束                        center 元素居中排列                          space-around 空白分布到元素两侧  空间包含元素                        space-between 空白均匀分布到元素间  元素包含空间                        space-evenly 空白分布到元素的单侧  空间包含元素左右相等的间距align-items，用于设置垂抽的对齐方式。- 元素在辅轴上如何对齐                - 元素间的关系                    - 可选值：                        stretch 默认值，将元素的长度设置为相同的值                        flex-start 元素不会拉伸，沿着辅轴起边对齐                        flex-end 沿着辅轴的终边对齐                        center 居中对齐                        baseline 基线对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="弹性元素属性"><a href="#弹性元素属性" class="headerlink" title="弹性元素属性"></a>弹性元素属性</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">align-self属性用于设置某个弹性元素的对齐方式可选值：autoflex-start 居开始flex-end  居结束 center 居中baseline stretch  默认值，当弹性元素不设置高度时，高度和垂轴当前行的高度一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="弹性容器属性-1"><a href="#弹性容器属性-1" class="headerlink" title="弹性容器属性"></a>弹性容器属性</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">align-content属性用来设置弹性容器中垂轴方向的额外空间如何分配。可选值flex-start | flex-end | center | space-between | space-around | space-evenly | stretch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="弹性元素-弹性项"><a href="#弹性元素-弹性项" class="headerlink" title="弹性元素(弹性项)"></a>弹性元素(弹性项)</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">弹性元素是弹性容器的子元素。弹性元素的特点：外边距不折叠不受float和clear属性的影响一个元素可以同时是弹性容器和弹性元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="弹性元素属性-1"><a href="#弹性元素属性-1" class="headerlink" title="弹性元素属性"></a>弹性元素属性</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">flex-grow属性用来设置弹性容器的多余空间是否用于增大弹性元素（增长因子）。flex-grow需要设置一个数字作为值。flex-shrink属性用来指定缩减因子，即当弹性容器大小不足以容纳所有的子元素是，如果减少其大小。flex-shrink需要设置一个数字作为值。flex-basis属性用于设置弹性元素的初始或默认尺寸。可选值：auto | 数值 | 百分比flex是上述三个属性flex-grow、 flex-shrink、 flex-basis的简写属性，可以通过该属性同时设置上述三个属性。可选值：1个值    如果是一个数字，则设置flex-grow <span class="token punctuation">(</span><span class="token property">flex</span> <span class="token punctuation">:</span> 1 相当于 <span class="token property">flex</span> <span class="token punctuation">:</span> 1 0 0<span class="token punctuation">)</span>    如果是一个大小，则设置flex-basis <span class="token punctuation">(</span><span class="token property">flex</span> <span class="token punctuation">:</span> 200px 相当于 <span class="token property">flex</span> <span class="token punctuation">:</span> 1 1 200px<span class="token punctuation">)</span>    initial  根据宽或高设置元素大小，允许缩小 <span class="token punctuation">(</span><span class="token property">flex</span> <span class="token punctuation">:</span> 0 1 auto<span class="token punctuation">)</span>    auto 根据宽或高设置元素大小，允许缩小和放大<span class="token punctuation">(</span><span class="token property">flex</span> <span class="token punctuation">:</span> 1 1 auto<span class="token punctuation">)</span>    none 根据宽或高设置元素大小，不能缩小放大<span class="token punctuation">(</span><span class="token property">flex</span> <span class="token punctuation">:</span> 0 0 auto<span class="token punctuation">)</span>2个值    第一个值必须是数字，用以指定flex-grow 第二个值如果是数字，就是flex-shrink，大小就是flex-basis    3个值    顺序必须是：flex-grow flex-shrink flex-basisorder用于设置弹性元素的显示顺序它需要一个数字作为参数，值越小元素显示的位置越靠前。值一样，则按照文档顺序排列。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h1><h2 id="1-什么是CSS预处理器"><a href="#1-什么是CSS预处理器" class="headerlink" title="1 什么是CSS预处理器"></a>1 什么是CSS预处理器</h2><blockquote><p>css 预处理器定义了一种新的语言, 其基本思想是, 用一种专门的编程语言, 为 css 增加一些特性, 将 css 作为目标生成文件。</p><p>通俗的讲，用CSS预处理器的语法写，最后在编译成CSS； 因为任何浏览器都无法解析CSS预处理器的语法。<br><img src="HTML5-CSS3.assets/image-20210706152653824.png" style="zoom:80%;" /></p></blockquote><h2 id="2-为什么要用CSS预处理器"><a href="#2-为什么要用CSS预处理器" class="headerlink" title="2 为什么要用CSS预处理器"></a>2 为什么要用CSS预处理器</h2><p><strong>CSS本身具有如下问题：</strong></p><ul><li>语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；</li><li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以<strong>字面量</strong>的形式重复输出，导致难以维护。</li></ul><p><strong>这就决定了CSS预处理器要解决的问题：</strong></p><ul><li>提供 CSS 缺失的<em>样式层</em>复用机制、减少冗余代码，提高样式代码的可维护性。</li></ul><h2 id="3-主流的-CSS-预处理器"><a href="#3-主流的-CSS-预处理器" class="headerlink" title="3 主流的 CSS 预处理器"></a>3 主流的 CSS 预处理器</h2><ul><li>Less</li><li>Sass</li><li>Stylus</li></ul><h1 id="Less-介绍"><a href="#Less-介绍" class="headerlink" title="Less 介绍"></a>Less 介绍</h1><h2 id="1-什么是-Less"><a href="#1-什么是-Less" class="headerlink" title="1 什么是 Less"></a>1 什么是 Less</h2><pre class="line-numbers language-less" data-language="less"><code class="language-less">Less 是一种动态样式语言，属于 CSS 预处理器的范畴，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展因为 Less 和 CSS 非常像，学习很容易。而且 Less 仅对 CSS 语言增加了少许方便的扩展，这就是 Less 如此易学的原因之一。Less <span class="token punctuation">(</span>Less编辑器 <span class="token punctuation">)</span> 是开源的，其第一个版本由 Ruby 写成，但在后续的版本当中，Ruby 逐渐被替换为 JavaScript。受益于JavaScript，LESS可以在客户端上运行（IE6<span class="token operator">+</span>、Webkit、Firefox），也可以在服务端运行（Node.js 、Rhino）。less是一门css预处理语言         <span class="token operator">-</span>less是一个css的增强版，通过less可以编写更少的代码，实现更强大的样式         <span class="token operator">-</span>在less中添加了许多的新特性：像对变量的支持、对mixin的支持         <span class="token operator">-</span>less的语法大体上和css语法一致，但是less中增添了许多css的扩展            所以浏览器无法直接执行less代码，要执行必须将less转换为css，然后            在由浏览器执行<span class="token punctuation">,</span>vc编辑器需要安装一个插件<span class="token punctuation">(</span>EasyLess<span class="token punctuation">)</span>也可以在node服务端运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Less-编译工具"><a href="#2-Less-编译工具" class="headerlink" title="2 Less 编译工具"></a>2 Less 编译工具</h2><h3 id="2-1-less-js"><a href="#2-1-less-js" class="headerlink" title="2.1 less.js"></a>2.1 less.js</h3><pre class="line-numbers language-less" data-language="less"><code class="language-less">&lt;!doctype html>&lt;html lang=<span class="token string">"cn-ZH"</span>>    &lt;head>        &lt;meta charset=<span class="token string">"utf-8"</span>>&lt;<span class="token operator">/</span>meta>        &lt;title>LESS&lt;<span class="token operator">/</span>title>        &lt;!<span class="token operator">-</span><span class="token operator">-</span> 直接在 style 标签内写 less 代码<span class="token operator">-</span><span class="token operator">-</span>>        &lt;style style=<span class="token string">"text/less"</span>>            ...        &lt;<span class="token operator">/</span>style>        &lt;!<span class="token operator">-</span><span class="token operator">-</span>也可以单独引入 less 文件<span class="token operator">-</span><span class="token operator">-</span>>        &lt;link rel=<span class="token string">"stylesheet/less"</span> type=<span class="token string">"text/css"</span> href=<span class="token string">"styles.less"</span>>        &lt;!<span class="token operator">-</span><span class="token operator">-</span>less.js 可以将上面的 less 编译为 css<span class="token operator">-</span><span class="token operator">-</span>>        &lt;script src=<span class="token string">"https://cdn.bootcss.com/less.js/3.9.0/less.js"</span>>&lt;<span class="token operator">/</span>script>    &lt;<span class="token operator">/</span>head>    &lt;body>&lt;<span class="token operator">/</span>body>&lt;<span class="token operator">/</span>html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-命令行安装-less"><a href="#2-2-命令行安装-less" class="headerlink" title="2.2 命令行安装 less"></a>2.2 命令行安装 less</h3><p>此方式需要 node 的支持</p><p><strong>安装</strong></p><pre class="line-numbers language-less" data-language="less"><code class="language-less">npm install less <span class="token operator">-</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用</strong></p><pre class="line-numbers language-less" data-language="less"><code class="language-less">lessc bootstrap.less bootstrap.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-第三方编译工具-koala（考拉）"><a href="#2-3-第三方编译工具-koala（考拉）" class="headerlink" title="2.3 第三方编译工具 koala（考拉）"></a>2.3 第三方编译工具 koala（考拉）</h3><blockquote><p>koala 官网: <a href="http://koala-app.com/index-zh.html">http://koala-app.com/index-zh.html</a><br><img src="HTML5-CSS3.assets/image-20210706152922166.png" style="zoom:80%;" /></p></blockquote><h2 id="3-Less语法"><a href="#3-Less语法" class="headerlink" title="3 Less语法"></a>3 Less语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>块注释和行注释都可以使用：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">/* 一个块注释 * style comment! */</span><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token comment">// 这一行被注释掉了！</span><span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="1-声明-Less-变量"><a href="#1-声明-Less-变量" class="headerlink" title="1 声明 Less 变量"></a>1 声明 Less 变量</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> 10px<span class="token punctuation">;</span><span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">+</span> 10px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-Less-变量的使用"><a href="#2-Less-变量的使用" class="headerlink" title="2 Less 变量的使用"></a>2 Less 变量的使用</h4><ul><li><ol><li>变量作为普通属性值只来使用：直接使用 <code>@pink</code></li></ol></li><li><ol><li>变量作为选择器和属性名：<code>@&#123;selector的值&#125;</code> 的形式</li></ol></li></ul><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> 500px<span class="token punctuation">;</span><span class="token variable">@g<span class="token punctuation">:</span></span>grey<span class="token punctuation">;</span><span class="token variable">@w<span class="token punctuation">:</span></span>wrap<span class="token punctuation">;</span><span class="token variable">@bg<span class="token punctuation">:</span></span>background<span class="token punctuation">;</span><span class="token selector">#@&#123;w&#125;</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">@&#123;bg&#125;</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">@&#123;bg&#125;</span><span class="token punctuation">:</span> <span class="token variable">@g</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译为：</strong></p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Less-变量作用域和延迟加载"><a href="#3-Less-变量作用域和延迟加载" class="headerlink" title="3 Less 变量作用域和延迟加载"></a>3 Less 变量作用域和延迟加载</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> 0px<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> 1px<span class="token punctuation">;</span>  <span class="token selector">.brass</span> <span class="token punctuation">&#123;</span>    <span class="token variable">@var<span class="token punctuation">:</span></span> 2px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span>    <span class="token variable">@var<span class="token punctuation">:</span></span> 3px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译为：</strong></p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class .brass</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作用域：</strong></p><blockquote><ol><li>首先在本地查找变量和混合函数</li><li>如果找不到它们，则从“父”范围继承。</li></ol></blockquote><p><strong>延迟加载（懒加载），是作用域基础上的特性：</strong></p><blockquote><ol><li>先找子元素，如果出现两个相同的变量，我们拿后边的</li><li>再找父元素，把子元素的东西排除掉</li><li>如果当前找不到这个变量，他需要到上一层去找</li></ol></blockquote><h3 id="混合-Mixins"><a href="#混合-Mixins" class="headerlink" title="混合 Mixins"></a>混合 Mixins</h3><p>混合就是将一系列属性从一个规则集引入到另一个规则集的方式，类似于 JavaScript 中的<strong>函数</strong>， 目的是提高代码的重用性。</p><h4 id="1-普通混合"><a href="#1-普通混合" class="headerlink" title="1 普通混合"></a>1 普通混合</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.mixin-class</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.mixin-id</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.mixin-class</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.mixin-id</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-不带输出的混合"><a href="#2-不带输出的混合" class="headerlink" title="2 不带输出的混合"></a>2 不带输出的混合</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.my-mixin</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 该混合不会被输出</span><span class="token selector">.my-other-mixin()</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.my-mixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.my-other-mixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.my-mixin</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-带参数的混合"><a href="#3-带参数的混合" class="headerlink" title="3 带参数的混合"></a>3 带参数的混合</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.border-radius(<span class="token variable">@radius</span>)</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span>     <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span>          <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.border-radius</span><span class="token punctuation">(</span>4px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.border-radius</span><span class="token punctuation">(</span>6px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>     <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>          border<span class="token operator">-</span>radius 4px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>     <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>          border<span class="token operator">-</span>radius 6px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-带参数并且有默认值的混合"><a href="#4-带参数并且有默认值的混合" class="headerlink" title="4 带参数并且有默认值的混合"></a>4 带参数并且有默认值的混合</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.border-radius(<span class="token variable">@radius</span>: 5px)</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span>     <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span>          <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">@radius</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.border-radius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.border-radius</span><span class="token punctuation">(</span>6px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>     <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>          border<span class="token operator">-</span>radius 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>     <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>          border<span class="token operator">-</span>radius 6px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-带多个参数的混合"><a href="#5-带多个参数的混合" class="headerlink" title="5 带多个参数的混合"></a>5 带多个参数的混合</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.mixin(<span class="token variable">@color</span>: black; <span class="token variable">@margin</span>, <span class="token variable">@padding</span>: 20px)</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">@margin</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">@padding</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class1</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span><span class="token variable">@margin<span class="token punctuation">:</span></span> 20px<span class="token punctuation">;</span> <span class="token variable">@color<span class="token punctuation">:</span></span> #33acfe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class2</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.mixin</span><span class="token punctuation">(</span>#efca44<span class="token punctuation">;</span> <span class="token variable">@padding<span class="token punctuation">:</span></span> 40px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.class1</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #33acfe<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class2</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #efca44<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-arguments-的用法"><a href="#6-arguments-的用法" class="headerlink" title="6 @arguments 的用法"></a>6 @arguments 的用法</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.box-shadow(<span class="token variable">@x</span>: 0; <span class="token variable">@y</span>: 0; <span class="token variable">@blur</span>: 1px; <span class="token variable">@color</span>: #000)</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span>     <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span>          <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.big-block</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.box-shadow</span><span class="token punctuation">(</span>2px<span class="token punctuation">;</span> 5px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.big-block</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 2px 5px 1px #000<span class="token punctuation">;</span>     <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 2px 5px 1px #000<span class="token punctuation">;</span>          <span class="token property">box-shadow</span><span class="token punctuation">:</span> 2px 5px 1px #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>Less 可以使用 when 关键字实现条件判断</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.arrowSet()</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token variable">@pixel</span><span class="token punctuation">;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.arrow(<span class="token variable">@direction</span>, <span class="token variable">@color</span>:#000, <span class="token variable">@pixel</span>:5px) when (<span class="token variable">@direction</span> = up)</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.arrowSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span><span class="token variable">@color</span> transparent transparent transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.arrow(<span class="token variable">@direction</span>, <span class="token variable">@color</span>:#000, <span class="token variable">@pixel</span>:5px) when (<span class="token variable">@direction</span> = down)</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.arrowSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span>transparent transparent <span class="token variable">@color</span>  transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.arrow(<span class="token variable">@direction</span>, <span class="token variable">@color</span>:#000, <span class="token variable">@pixel</span>:5px) when (<span class="token variable">@direction</span> = left)</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.arrowSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span>transparent transparent transparent <span class="token variable">@color</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.arrow(<span class="token variable">@direction</span>, <span class="token variable">@color</span>:#000, <span class="token variable">@pixel</span>:5px) when (<span class="token variable">@direction</span> = right)</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.arrowSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span>transparent <span class="token variable">@color</span>  transparent transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token mixin-usage function">.arrow</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.arrow</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> red<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>你可以导入一个 <code>.less</code> 文件，此文件中的所有变量就可以全部使用了。</p><p>如果导入的文件是 <code>.less</code> 扩展名，则可以将扩展名省略掉。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@import</span> <span class="token string">"library.less"</span><span class="token punctuation">;</span> <span class="token variable">@import</span> <span class="token string">"mixins"</span><span class="token punctuation">;</span>  <span class="token comment">// mixins.less</span><span class="token variable">@import</span> <span class="token string">"typo.css"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>Less 提供了使用嵌套代替层叠或与层叠结合使用的能力</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span>200px          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.logo</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .navigation</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .navigation li</span><span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .logo</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-使用-amp-引用父选择器"><a href="#2-使用-amp-引用父选择器" class="headerlink" title="2 使用 &amp; 引用父选择器"></a>2 使用 &amp; 引用父选择器</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">&amp;-ok</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"ok.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">&amp; &amp;</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'ak47.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button-ok</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"ok.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button .button</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'ak47.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-media-嵌套"><a href="#3-media-嵌套" class="headerlink" title="3 @media 嵌套"></a>3 @media 嵌套</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.component</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token atrule">@media  <span class="token punctuation">(</span>min-resolution<span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/retina2x.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.component</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> and <span class="token punctuation">(</span>min-resolution<span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/retina2x.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.component</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-media-第二种嵌套方式"><a href="#4-media-第二种嵌套方式" class="headerlink" title="4 @media 第二种嵌套方式"></a>4 @media 第二种嵌套方式</h4><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@min1024<span class="token punctuation">:</span></span> ~<span class="token string">"(min-width: 1024px)"</span><span class="token punctuation">;</span><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span>640px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule">@media @min1024</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.element</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 640px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.element</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.element</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>算术运算 <code>+</code>、<code>-</code>、 <code>*</code>、 <code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，数学运算在加、减或比较之前会考虑到单位并转换数字。结果具有最左边的显式单位类型。如果转换不可能或没有意义，则忽略单位。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">// numbers are converted into the same units</span><span class="token variable">@conversion-1<span class="token punctuation">:</span></span> 5cm <span class="token operator">+</span> 10mm<span class="token punctuation">;</span> <span class="token comment">// result is 6cm</span><span class="token variable">@conversion-2<span class="token punctuation">:</span></span> 2 <span class="token operator">-</span> 3cm <span class="token operator">-</span> 5mm<span class="token punctuation">;</span> <span class="token comment">// result is -1.5cm</span><span class="token comment">// conversion is impossible</span><span class="token variable">@incompatible-units<span class="token punctuation">:</span></span> 2 <span class="token operator">+</span> 5px <span class="token operator">-</span> 3cm<span class="token punctuation">;</span> <span class="token comment">// result is 4px</span><span class="token comment">// example with variables</span><span class="token variable">@base<span class="token punctuation">:</span></span> 5%<span class="token punctuation">;</span><span class="token variable">@filler<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">*</span> 2<span class="token punctuation">;</span> <span class="token comment">// result is 10%</span><span class="token variable">@other<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">+</span> <span class="token variable">@filler</span><span class="token punctuation">;</span> <span class="token comment">// result is 15%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>混合（Mixins）类似于 JavaScript 中的<strong>自定义函数</strong>， 而这里的函数类似于 JavaScript 中的<strong>内置函数</strong>。</p><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。</p><p>可以参考 Less 中文网提供的函数手册： <a href="http://lesscss.cn/functions/#misc-functions">http://lesscss.cn/functions/#misc-functions</a></p><p>需要<strong>注意</strong>的是，一般我们很少会使用这些内置函数。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@base<span class="token punctuation">:</span></span> #f04615<span class="token punctuation">;</span><span class="token variable">@width<span class="token punctuation">:</span></span> 0.5<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">percentage</span><span class="token punctuation">(</span><span class="token variable">@width</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将小数转换为百分比 returns `50%`</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 5%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将颜色饱和度增加 %5</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">spin</span><span class="token punctuation">(</span><span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> <span class="token operator">-</span>25%<span class="token punctuation">)</span><span class="token punctuation">,</span> 8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 颜色亮度减小 25% 并且色相值增加 8 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>less 3.5之后，新增了 map 语法</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">#colors()</span> <span class="token punctuation">&#123;</span>  <span class="token property">primary</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">secondary</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #colors[primary]<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #colors[secondary]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为:</p><pre class="line-numbers language-le" data-language="le"><code class="language-le">.button &#123;  color: blue;  border: 1px solid green;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-le" data-language="le"><code class="language-le">&#x2F;&#x2F;作为类名，或者一部分值使用时必须以 @&#123;变量名&#125; 的形式使用.@&#123;c&#125;&#123;    width: @a;    background-image: url(&quot;@&#123;c&#125;&#x2F;1.png&quot;);&#125;@d:200px;@d:300px;div&#123;    &#x2F;&#x2F; 变量发生重名时，会优先使用比较近的变量    @d:115px;    width: @d;    height: @e;&#125;&#x2F;&#x2F;可以在变量声明前就使用变量@e:335px;div&#123;    width: 300px;    &#x2F;&#x2F; 新版的语法    &#x2F;&#x2F; height: $width;&#125;----.box1&#123;    .box2&#123;        color: red;    &#125;    &gt;.box3&#123;        color: red;        &amp;:hover&#123;            color: blue;        &#125;    &#125;    &#x2F;&#x2F;为box1设置一个hover    &#x2F;&#x2F;&amp; 就表示外层的父元素    &amp;:hover&#123;        color: orange;    &#125;    div &amp;&#123;        width: 100px;    &#125;&#125;.p1&#123;    width: 100px;    height: 200px;&#125;&#x2F;&#x2F;:extend() 对当前选择器扩展指定选择器的样式（选择器分组）.p2:extend(.p1)&#123;    color: red;&#125;.p3&#123;    &#x2F;&#x2F;直接对指定的样式进行引用，这里就相当于将p1的样式在这里进行了复制    &#x2F;&#x2F;mixin 混合  不推荐    .p1();&#125;&#x2F;&#x2F; 使用类选择器时可以在选择器后边添加一个括号，这时我们实际上就创建了一个mixins.p4()&#123;    width: 100px;    height: 100px;&#125;.p5&#123;    .p4;&#125;&#x2F;&#x2F;混合函数 在混合函数中可以直接设置变量.test(@w:100px,@h:200px,@bg-color:red)&#123;    width: @w;    height: @h;    border: 1px solid @bg-color;&#125;div&#123;    &#x2F;&#x2F;调用混合函数，按顺序传递参数    &#x2F;&#x2F; .test(200px,300px,#bfa);    .test(300px);    &#x2F;&#x2F; .test(@bg-color:red, @h:100px, @w:300px);&#125;span&#123;    color: average(red,blue);&#125;html&#123;    width: 100%;    height: 100%; &#125;body &#123;    width: 100%;    height: 100%;    background-color: #bfa;&#125;body:hover&#123;    background-color: darken(#bfa,50%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode常用插件和配置</title>
      <link href="/posts/1000.html"/>
      <url>/posts/1000.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本插件列表"><a href="#基本插件列表" class="headerlink" title="基本插件列表"></a>基本插件列表</h1><blockquote><p>1、Chinese (Simplified) Language Pack: 官方中文包<br>2、ES7 React/Redux/GraphQL/React­Native snippets : 一些代码模板VS Code 中支持 React Native，React，Redux </p><p>常见代码片段的插件<br>3、Auto Close Tag: 自动生成结束标签<br>4、Beautify: 格式化代码 可美化JS、JSON、CSS、Sass、HTML<br>5、JS-CSS-HTML Formatter自动格式化代码<br>6、HTML CSS Support: html/css的代码模板Markdown Preview Github Styling: md 预 览open in browser: 右键打开浏览器<br>7、live server右键打开浏览器<br>8、Search node_modules: 搜索第三方依赖包<br>9、Path Intellisense: 自动提示路径补全<br>10、Material theme皮肤插件<br>11、Prettier 格式化插件<br>12、search-node-modules 可让您快速浏览项目的node_modules目录中的文件-源码<br>13、Bracket pair colorizer 2 找到相同的大括号<br>14、Css peek快速找到css代码<br>15、vc编辑器需要安装一个插件(EasyLess)  less语法<br>16、atom one dark theme 代码风格主题vscode-icons文件图标的样式<br>17、vscode-icons-mac图标主题插件<br>18、Material Icon Theme 图标主题插件<br>19、Auto Rename Tag这是一个修改标签对的插件。 重命名一个HTML / XML标签时，自动重命名配对的HTML / XML标签<br>20、Atom One Dark 是语法皮肤，美化代码。<br>21、TODO Highlight TODO高亮显示<br>22、super-translate 划词翻译。鼠标停留选中几秒就会查看翻译内容。<br>23、Google Translate 选中自动翻译，很简单。<br>24、filesize 在状态栏中显示当前文件大小，点击后还可以看到详细创建、修改时间<br>25、Dracula Official 官方吸血鬼主题，很漂亮<br>26、Color Highlight 颜色突出显示”显示任何颜色代码的直观表示。例如，如果你键入 RGB，RGBa，十六进制或任何其他颜色代码，你将能够在视觉上看到颜色<br>27、GitLens — Git supercharged它可以帮助你通过 git-blame 注释和代码注释一目了然地查看代码作者身份，无缝导航和探索 Git 存储库，通过强大的比较命令获得有价值的见解<br>28、 Visual Studio Intellicode帮助开发人员提供智能的代码完成建议而构建的，并且已预先构建了对多种编程语言的支持<br>29、Vetur插件支持.vue文件的语法高亮显示，除了支持template模板以外，还支持大多数主流的前端开发脚本和插件，比如Sass和TypeScript，完整的支持高亮的语法<br>30、vue-helper vue代码提示插件，不仅包括了vue2所有api，还含有vue-router2和vuex2的代码提示<br>31、Git History Diff，安装这个插件后，如果你的VSCode打开了一个Git管理的代码，则在VSCode编辑窗口中，可以看到所有的提交记录、改动文件，包括每一行代码的提交时间、提交人，非常方便。<br>32、Tabnine Autocomplete AI Tabnine 是功能强大的人工智能助手，能帮你更快地敲代码并减少错误。Tabnine 基于 AI 深度学习算法，能够预测你编码意图并提供一键式代码完成<br>Kite AI Code AutoComplete Kite 支持js与python的多行补全功能，可帮助你在保持流程顺畅的同时加快编码速度。<br>33、JavaScript (ES6) code snippets  支持JavaScript和TypeScript 常规ES代码提示块<br>34、One Dark Pro 主题<br>35、vue3snippets支持 Vue 3 的语法高亮，代码格式化和代码提示</p></blockquote><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>打开/关闭终端: ctrl + ` 显示所有命令: ctrl + 1 查找文件: ctrl + E</p><p>在文件中查找: ctrl + F</p><p>保存所有修改的文本: ctrl + shift + S </p><h2 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h2><p>根据功能名查找后设置或者修改快捷键组合</p><p>根据快捷键组件查找后设置或者修改快捷键组合</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"emmet.triggerExpansionOnTab"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onFocusChange"</span><span class="token punctuation">,</span>    <span class="token property">"sublimeTextKeymap.promptV3Features"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"editor.multiCursorModifier"</span><span class="token operator">:</span> <span class="token string">"ctrlCmd"</span><span class="token punctuation">,</span>    <span class="token property">"editor.snippetSuggestions"</span><span class="token operator">:</span> <span class="token string">"top"</span><span class="token punctuation">,</span>    <span class="token property">"eslint.enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"window.zoomLevel"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"fileheader.Author"</span><span class="token operator">:</span> <span class="token string">"xfzhang"</span><span class="token punctuation">,</span>    <span class="token property">"fileheader.LastModifiedBy"</span><span class="token operator">:</span> <span class="token string">"xfzhang"</span><span class="token punctuation">,</span>    <span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"html"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"workbench.startupEditor"</span><span class="token operator">:</span> <span class="token string">"newUntitledFile"</span><span class="token punctuation">,</span>    <span class="token property">"git.autofetch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"[html]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"HookyQR.beautify"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"workbench.activityBar.visible"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"workbench.statusBar.visible"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"editor.minimap.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"vsicons.dontShowNewVersionMessage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"editor.mouseWheelZoom"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"terminal.integrated.shell.windows"</span><span class="token operator">:</span> <span class="token string">"C:\\WINDOWS\\system32\\cmd.exe"</span><span class="token punctuation">,</span><span class="token property">"breadcrumbs.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"vetur.validation.template"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"workbench.list.openMode"</span><span class="token operator">:</span> <span class="token string">"doubleClick"</span><span class="token punctuation">,</span><span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"HookyQR.beautify"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"[json]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"HookyQR.beautify"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"[markdown]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"HookyQR.beautify"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"git.enableSmartCommit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"path-intellisense.extensionOnImport"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"path-intellisense.autoSlashAfterDirectory"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"path-intellisense.showHiddenFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"search.followSymlinks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"javascript.updateImportsOnFileMove.enabled"</span><span class="token operator">:</span> <span class="token string">"never"</span><span class="token punctuation">,</span><span class="token property">"liveServer.settings.donotShowInfoMsg"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"terminal.integrated.fontSize"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token property">"javascript.implicitProjectConfig.experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门到实战</title>
      <link href="/posts/dba7b746.html"/>
      <url>/posts/dba7b746.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><h2 id="Spark-简介"><a href="#Spark-简介" class="headerlink" title="Spark 简介"></a>Spark 简介</h2><h2 id="Spark和Hadoop的区别"><a href="#Spark和Hadoop的区别" class="headerlink" title="Spark和Hadoop的区别"></a>Spark和Hadoop的区别</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据 Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkCore SparkSQL SparkStreaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop入门到实战</title>
      <link href="/posts/2e852b48.html"/>
      <url>/posts/2e852b48.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点大纲"><a href="#知识点大纲" class="headerlink" title="知识点大纲"></a>知识点大纲</h1><h2 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h2><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><h2 id="生产调优手段以及相关参数"><a href="#生产调优手段以及相关参数" class="headerlink" title="生产调优手段以及相关参数"></a>生产调优手段以及相关参数</h2><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据 Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux HDFS MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git/GitHub</title>
      <link href="/posts/939cdcd3.html"/>
      <url>/posts/939cdcd3.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 版本控制 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud入门到实战</title>
      <link href="/posts/5f840d92.html"/>
      <url>/posts/5f840d92.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="微服务架构概念以及优势"><a href="#微服务架构概念以及优势" class="headerlink" title="微服务架构概念以及优势"></a>微服务架构概念以及优势</h2>]]></content>
      
      
      <categories>
          
          <category> 微服务 SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka Ribbon Hystrix Feign Zuul Config Bus Stream Sleuth Sentinel Seata Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink1.12 JAVA版入门到实战</title>
      <link href="/posts/85cfc545.html"/>
      <url>/posts/85cfc545.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><h2 id="Flink简介"><a href="#Flink简介" class="headerlink" title="Flink简介"></a>Flink简介</h2><h2 id="Flink快速上手"><a href="#Flink快速上手" class="headerlink" title="Flink快速上手"></a>Flink快速上手</h2><h2 id="Flink部署"><a href="#Flink部署" class="headerlink" title="Flink部署"></a>Flink部署</h2><h2 id="Flink运行架构"><a href="#Flink运行架构" class="headerlink" title="Flink运行架构"></a>Flink运行架构</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据 Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FlinkSQL FlinkTable FlinkDataStream/DataSet FlinkProcess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-js入门到实战</title>
      <link href="/posts/a62cb03e.html"/>
      <url>/posts/a62cb03e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><h1 id="Node概述"><a href="#Node概述" class="headerlink" title="Node概述"></a>Node概述</h1>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA面试大保健</title>
      <link href="/posts/2516a51a.html"/>
      <url>/posts/2516a51a.html</url>
      
        <content type="html"><![CDATA[<h1 id="面试大保健"><a href="#面试大保健" class="headerlink" title="面试大保健"></a>面试大保健</h1><h2 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h2><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA面试大保健 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA SpringBoot SpringCloud Redis JUC MQ 分布式 微服务 MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门到实战</title>
      <link href="/posts/7a36aef8.html"/>
      <url>/posts/7a36aef8.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA 微服务 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web SSM SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据面试大保健</title>
      <link href="/posts/ae5d0700.html"/>
      <url>/posts/ae5d0700.html</url>
      
        <content type="html"><![CDATA[<h1 id="面试大保健"><a href="#面试大保健" class="headerlink" title="面试大保健"></a>面试大保健</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><h2 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据面试大保健 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Flink Hadoop Spark HIVE 离线数仓 实时数仓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试宝典</title>
      <link href="/posts/298dca6b.html"/>
      <url>/posts/298dca6b.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML+CSS"></a>HTML+CSS</h2><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2>]]></content>
      
      
      <categories>
          
          <category> 前端面试大保健 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML CSS JS Node Webpack5 Vue React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
